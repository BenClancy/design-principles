[{"title":"Continuous Delivery","indexable_content":"The deployment pipeline The commit stage Shared sandbox environment Specialist testing environments Production environment Continuous Delivery builds upon the iterative, adaptive process of delivering valuable software and testing assumptions about product direction. From the Lean philosophy, software that is not in production isn’t delivering value, it should be treated as inventory piling up, and inventory is waste. Agile development practices normally look to have a product in a deployable state at the end of each iteration. It does not necessarily follow that the product should be deployed at the end of each iteration. The important thing is having the capability to do so. Understanding your end-to-end deployment pipeline has massive benefits for addressing configuration management and the automation of your build, deploy, test and release processes. By automating your deployment process, you are forced to fully understand it and resolve early on any issues with getting code from your version control system into production. Automating the deployment early also means that it will be tested and bugs ironed out, so that releases become frequent, low-risk, almost boring events. If you treat long-term planning as an attempt to predict the future, then attempting to predict what features will be available for a production release slot in 6 months time is a somewhat redundant exercise. If instead, your process allows for deploying anything when it is ready, then release planning becomes a lot simpler. If a project needs to miss a release slot, then it can always be rescheduled for tomorrow or next week, rather than in 6 months, or perhaps in a year if the next slot is already full up. Another advantage is being able to quickly respond to security patches or similar changes in underlying libraries / frameworks used by your application. You can quickly make a change and watch the update flow through the various gates in your deployment pipeline, confident that nothing has been broken. What happens to code between it being written by a developer, and deployed to production? We refer to this process as the deployment pipeline. Whenever a developer checks into version control, a suite of tests is run against the latest version of the code. At this stage, any quick, easy-to-identify defects such as compile errors or unit test failures are caught. If the tests pass, the code progresses to the next stage. The code is deployed to a shared sandbox environment, where everyone involved in the project can observe it. The sandbox should be similar to production as far as is practical: for example, if production uses Postgres, the sandbox should also use Postgres and not another database such as MySQL or sqlite. Every commit is considered a potential candidate to be released into production. The sandbox environment is the first environment where the application is deployed and run. This is the first stage where it can be visually inspected for quality by anybody on the team. The purpose is to identify any defect which means the application should not be deployed to production. If such a defect is found, this version of the code stops here; otherwise, it can proceed to further specialist testing environments. There may be a need for other testing environments, to enable testing for specialist requirements such as load and performance testing, penetration testing, or accessibility testing. How many environments are needed will depend on the requirements and constraints of individual projects. If code is determined to be of satisfactory quality, it can now proceed to the live production environment. Once code has passed the commit stage, been deployed into the shared sandbox environment, had any necessary specialist testing run on it, it is considered suitable to go live. Deploying to production should be done in the same way as deploying to any other environment – using the same scripts, same configuration management tooling, and the same version of the code. This ensures that when code is released to production, you are not doing it for the first time; you are instead performing an operation which has been validated at each stage throughout the deployment pipeline.","description":"Continuous Delivery builds upon the iterative, adaptive process of delivering valuable software and testing assumptions about product direction. From the Lean philosophy, software that is not in production isn’t delivering value, it should be treated as inventory piling up, and inventory is waste.","link":"/service-manual/agile/continuous-delivery.html"},{"title":"Features of agile","indexable_content":"Sprints Standard meetings Daily Stand Up Sprint planning Story time Sprint Review Sprint Retrospective how long is the project? If it’s only a couple of months then shorter sprints give you greater flexibility and visibility of what’s going on and an opportunity to iterate and adaptively plan shorter sprints allow teams that are new to Scrum get used to the regular meeting formats and familiarise themselves with the process. For those teams that a familiar with Scrum then moving to longer sprint cycles reduces the overhead of Sprint Planning, Review and Retrospectives if you choose to release to production only at the end of each sprint (it’s optional, but perfectly OK), then how often do you want to ship production ready code? what I worked on/delivered yesterday what I am working on today (and help I might need) what’s blocking me (ie stopping me delivering a story card) Here are some of the common features of the agile development methods we’ve used at GDS. Sprints are the rhythmic foundation of an agile process that uses Scrum. They usually last 1-2 weeks. Factors in deciding the length of your sprints include: Teams commonly start with a Sprint 0, which is used to get the development and working environments setup, agree some of the design principles (technical, product, interaction, content) and prepare the backlog for the first sprint. Note: There are other agile methodologies that do not rely on sprinting such as Kanban. However it’s common for teams to start with Scrum and sprint. A daily meeting with all of the team. It should take no more than 15 minutes and typically takes less time. It’s best if you do it standing up, in a semi-circle in front of the project wall. This helps keep it short and allows participants to point at story cards on the wall to keep things on topic. The normal format is each person answers the following 3 questions: (It sometimes helps to have an object that you (gently) throw randomly to the a person in the stand-up to signify they should speak next. It keeps people on their toes, the randomness stops it feeling too repetitive and allows the last person that speaks to choose the person they wish to hear from next. At GDS we use cuddly toys or a piece of fruit. It’s a bit of fun. You don’t have to this, it’s just something to experiment with.) It’s OK to ask a waffler to wind up. If people try to solve issues within the stand up then team members can call time on the conversation and decide to convene a huddle after the stand-up to discuss in a smaller group. I think it’s a sign of a good, constructive stand up if you spin up a couple of ad-hoc huddles afterwards and I believe it shows people are getting something out of the meeting. Sprint planning is done at the start of each sprint. It requires stories to have been written in advance with acceptance criteria. It’s the Product Owners job to read out the stories and explain the acceptance criteria in priority order. It is the job of the team to understand the story and acceptance criteria and agree the number of stories they will commit to within each sprint and agree the tasks needed to complete it. There is a good description of this meeting on the Agile Learning Labs website and how it has two parts: the “what we will do?” and the “how we will do it?” With bigger teams this can be a hard meeting to get right. Some people want to dig deep and question every story, others want to keep moving and don’t want to go into detail. Persevere! it’s an important part of the sprint and like Marmite, love or hate it, it’s good for you. Some teams choose to write or refine their stories at a single, set time within their sprint cycle, others choose to do it over a couple of sessions. It’s up to you, but don’t miss it. It’s vital that you have good stories and there has been constructively discussed with relevant team members, subject matter experts and stakeholders in good time, ahead of sprint planning. Make sure stories are well formed (ie don’t skip the ‘So that…’ part because it’s hard), have a good, sensible list of acceptance criteria that supplement your teams’ standing criteria for ‘definition of done’ and are estimated. If stories are too big then split them into smaller stories. They stand more chance of delivering shippable code. There needs to be a moment at the end of the sprint where the team get to demonstrate the work they have delivered. The whole team needs to feel on the hook for delivery. These meetings are important opportunities to iterate the team’s working process. Read detailed guidance about how to run retrospectives.","description":"Here are some of the common features of the agile development methods we’ve used at GDS.","link":"/service-manual/agile/features-of-agile.html"},{"title":"Quality","indexable_content":"Defining quality Testing Team roles and QA specialists A note on technical debt the accessibility of the service to the broadest possible range of users across an appropriate range of devices the simplicity of the interactions involved the ability of the service provider to quickly provide appropriate support whether the storage and handling of any data is proportionate and secure the robustness of the underlying software and infrastructure is the code well tested and largely bug-free? does it respond quickly when placed under reasonable amounts of load? can it be scaled rapidly to handle unusual amounts of traffic the ability of the team to quickly add or modify features to respond to changing requirements or contexts Testing in an agile environment Accessibility testing Testing code Load and performance testing Vulnerability and penetration testing Quality is at the heart of building services that are so good that people prefer to use them. It is the responsibility of every member of the team and the quality of a system is defined by the people who create it. If the system being produced is lacking in quality, then it should be evident to everyone involved, and every person on the project should be taking action to increase quality and fix issues. Quality will mean different things to different members of the team. Fundamentally it is about the end-to-end experience of the service’s users, from the start to the end of the transaction. That may include: It is common to talk of ‘technical debt’ in software. Definitions of technical debt vary, but generally it means compromises made in the development of an application or system favouring speed of delivery over a clean, extensible technical design. It is impossible to develop software without accruing some technical debt, but you should ensure your team have some way of sharing an understanding of the technical debt in their system. A large amount of technical debt slows down future development and having a clear picture will let you prioritise work to reduce it and thereby ensure your ability to iterate rapidly in future. In order to ensure quality a range of testing must be carried out. You can only know if your service meets the above criteria and any other definition of quality if you have tested it under normal and unusual conditions. For an example of testing under unusual stresses, it is worth reviewing Dylan Robert’s book “Learning From First Responders” about the Obama 2012 campaign’s preparations to ensure their software was highly available during the final days of that Presidential campaign. For further guidance on testing, see the following sections of this manual: The quality of any digital service is the responsibility of the entire team, but the final responsibility lies with the Service Manager. It is essential that the Service Manager works with the team to understand the measures that they need to put in place to ensure quality. That will include making sure that the team are considering quality when writing development stories and allowing time and resources to test what they’re building, doing the groundwork to ensure that assumptions about the accessibility of a service are regularly tested, taking the time to consider failure scenarios and how they will respond, and so on. At times there will be a need for specialist skills and facilities to ensure good testing. For example, there should always be some Penetration testing undertaken by people outside the team as an outside perspective helps challenge assumptions and identify weaknesses the team are not in a position to see clearly. Some teams may seek to employ a Quality Assurance specialist. That role can be helpful to ensure all quality-related activities are co-ordinated and to make sure that the team is getting the training and resources they need to make a high quality service. A QA specialist should have a clear remit and be expected to work with the team to build quality into everything they do rather than simply adding a review gate to the development process. We encourage teams employing a QA specialist to consider such a role a short-term responsibility with the intention that they quickly leave the team able to manage quality as part of their standard development and iteration of the service.","description":"Quality is at the heart of building services that are so good that people prefer to use them. It is the responsibility of every member of the team and the quality of a system is defined by the people who create it.","link":"/service-manual/agile/quality.html"},{"title":"Running retrospectives","indexable_content":"What is a retrospective? The facilitator Working agreements Outcomes of a retrospective Template Why we do this Further reading 00:00 to 00:05 (5 mins) Setting the scene 00:05 to 00:10 (5 mins) Actions from the previous retrospective 00:10 to 00:20 (10 mins) The Good 00:20 to 00:30 (10 mins) Discussion 00:30 to 00:45 (15 mins) The Bad 00:45 to 01:05 (20 mins) Discussion 01:05 to 01:20 (15 mins) Actions Gather data Generate insights Decide what to do plan the retrospective ensure that everyone gets a chance to contribute keep the retrospective on track make sure actions are created and assigned manage time so that it does not run over Everyone contributes Do not speak over each other (except for the facilitator) No laptops – focus should be on the meeting be concrete and measurable (eg ‘write 10 more unit tests for the redirector’, or ‘speak to Jamie about arranging a project retrospective’; not ‘write more tests’, or ‘we should understand the lessons learned from this project’) have a date by which they should be completed be assigned to a specific person (and not to ‘the team’) should not be assigned to someone who is not present One of the central principles of agile is quick feedback loops – we want to demonstrate something to the user as soon as we can so that we can see how well it suits their needs. Retrospectives are the way we apply this to our own teams and find out what’s working and what isn’t, so we can continuously improve.  A retrospective is a meeting at the end of a sprint where the team get a chance to talk about what went well and badly in that sprint, and take some actions to improve matters. It can also cover a larger scope, eg a full project retrospective. A retrospective takes the following form: A retrospective should be a chance for everyone in the team to contribute to improving process/productivity.  All retrospectives must be facilitated. The facilitator’s role is to give everyone a chance to air their concerns and positive feedback while ensuring the meeting remains a structured, productive meeting and doesn’t turn into just a moanfest. Ideally the facilitator will be someone outside the team so the team can all contribute, but this is not essential. The facilitator needs to: It is helpful to have some working agreements. These can be stated if necessary, for example in the first retrospectives a team has held. Working agreements might include:  The outcome of a retrospective should be some actions that can be taken to improve the process – ideally for the next iteration, but certainly as soon as possible. Actions should: Subsequent retrospectives should follow up on actions to make sure they have been done. If they are consistently not getting done, there may be too many.  This is a possible template for a sample retrospective for a team of 8-10, covering a two-week sprint. Each of the activities is timeboxed, and it is up to the facilitator to make sure that this is adhered to. For this scope and number of people, 90 minutes is a reasonable length of time. It is advisable to build in about 10% ‘shuffle time’ to move between activities to ensure it doesn’t overrun. Explaining the scope, and if necessary, purpose. If the team don’t know each other and/or are shy, you could include brief introductions. Make sure they have been completed. If not, find out why not. Do they still need to be done? If so, why have they not been? Set a new deadline if necessary, but it’s not ideal to keep carrying actions over.  Give the team around 10 minutes to write on post-its all the things that went well in the previous two weeks. If anonymity is important to encourage free expression, collect them in and add them to the wall yourself. If not, have the team take turns adding their own to the wall, possibly saying a few words about each. Don’t allow this to develop into a discussion at this point – at the moment we are just gathering data. Group the post-its into common themes and discuss each of the main areas in turn. If there are too many, have the team prioritise, for example by voting with stickers. What should we keep doing? Why did those things go well and what can we learn? Are there any actions we can draw out? Give the team around 15 minutes to write post-its for anything that went badly. Again, group the post-its and prioritise if necessary, and discuss the main areas. Can we work out why these things went badly? Can we work out what we need to do to improve matters, or prevent specific things happening again? Can we draw out specific actions that someone here can take that will help?  Spend some time looking at the actions we have identified, assigning them to people present and setting realistic deadlines for completion. Total: 80 mins with 10% shuffle time. It is OK to finish early if people have said what they need to. It is not OK to overrun – if there is too much to say, have the team prioritise the top areas for discussion and/or book more time for the next retrospective. By having a retrospective regularly, we can make small improvements often, ideally before problems start to fester, and we can identify working practices which make us more efficient, productive or at least happier. Agile development practices are to help us work better, and the retrospective allows us to fine-tune the process and our environment to our needs. The Agile Retrospective Wiki has some very useful resources, including plans for different types of retrospectives. This is a very useful book Agile Retrospectives: Making Good Teams Great. Retrospective plan photo by Anna Shipman. Voting with stickers photo by Pete Herlihy. All other photographs by Paul Downey.","description":"One of the central principles of agile is quick feedback loops – we want to demonstrate something to the user as soon as we can so that we can see how well it suits their needs. Retrospectives are the way we apply this to our own teams and find out what’s working and what isn’t, so we can continuously improve.","link":"/service-manual/agile/running-retrospectives.html"},{"title":"Navigating the controls process","indexable_content":"Mapping controls to Discovery, Alpha, Beta, Live Stages greater public and market transparency and two-way engagement through publishing business needs and subsequent decisions towards a solution greater emphasis on problem exploration, solution discovery and market engagement activity before any formal procurement is initiated greater use of agile iterative development over linear waterfall delivery contracts (including contract amendments, extensions or renewals) licences expenditure through existing frameworks feasibility and/or proof of concept studies pilots projects (or an element of a project) and programmes ‘business as usual’ changes or enhancements or maintenance or refreshes common infrastructure solutions including voice and data communications, Public Services Networks (PSN) whether fixed or mobile. Discovery - explore user need validity, nature of problem and solution approaches Iterate - iterative development of alpha, beta solutions, progressively gaining further insight into live solution Live - live solution, and refinement through iterative changes and feedback from usage Strategic Outline Case is developed once the discovery phase has provided insight into the problem, solution approaches, risks and benefits. It contains:     total budget envelope, including subset proposed for alpha solutions       evidence that agile is optimal approach      total budget envelope, including subset proposed for alpha solutions evidence that agile is optimal approach Outline Business Case can be completed based on information gathered during the development of early alpha solutions. It contains:     activities proposed for beta solution       subset of budget for beta solution development      activities proposed for beta solution subset of budget for beta solution development Full Business Case – The development of beta solutions will provide sufficient certainty to complete a Full Business Case. It will contain:     activities for live build       activities for post-live refinement and management information       proposed budget for live and post-live development      activities for live build activities for post-live refinement and management information proposed budget for live and post-live development Post Implementation Review – outcomes and performance report, supplier assessment, lessons learned and shared. Organisations should follow the rules set out in Managing Public Money which sets out the overriding principles for dealing with resources used by public sector organisations in the UK. The HMG Spend Controls supplement those rules with specific controls for spend in the following areas: Advertising and marketing and communications; Strategic Supplier Management, including disputes; Commercial models; ICT; Digital Service Delivery (including ID Assurance); External Recruitment; Consultancy; Redundancy and Compensation; Learning and Development; Property and Facilities Management. A request for spend approval is likely to require a number of controls - most Digital and IT spend requests will also require Commercial Approval to ensure they are aligned to government procurement policy. Each department has a GDS account manager who will ensure that other areas of Cabinet Office are engaged as needed when considering a case. An online controls tool has been introduced to support this process and give full visibility on case progress. The purpose of the IT and digital controls is to ensure that spending on IT is proportionate and directed at programmes and projects that meet the commonly agreed Digital and ICT strategies. It is an independent confirmation that the department has undertaken thorough consideration of the user need and value for money solution options. The controls process has changed over time to ensure: GDS will examine and challenge all technology-related spending over a certain threshold - no public commitment or expenditure should be made above these thresholds without prior approval. The thresholds are: These thresholds cover all technology expenditure, including: They also cover programmes that are broken into smaller chunks or projects, which individually are below the thresholds, but which in aggregate are above them. Intentionally breaking down a programme into smaller elements to avoid the controls process is itself a serious breach of the controls. Departments should engage early with GDS to agree the appropriate points for approval, before the first approval is needed (usually after the discovery phase, at Strategic Outline Case or before a Prior Information Notice is issued).  This early engagement will avoid departments proceeding too far without approval and reduces the risk of irregular expenditure. Full details of current requirements are detailed in the Cabinet Office ICT Spend Control Form (currently V.2.18).  You can start the process by e-mailing GDSspendapprovals@digital.cabinet-office.gov.uk. If your request contains ‘Restricted’ information it should be sent to ictspendapproval@cabinet-office.gsi.gov.uk. If your project cost exceeds your department’s main delegated authority set by Treasury it will be classed as a Major Project and you will also need to engage with Cabinet Office’s Major Projects Authority (MPA). A Major Project is defined as “a central Government funded project or programme that requires HM Treasury approval during its life, as set out in Delegated Authority letters”. The guidance describes the Treasury Approval process and Major Projects Assurance process including creation of an Integrated Assurance and Approval Plan (IAAP), which will document the approvals needed through the lifecycle of the project. Digital projects will also be assessed for compliance to the service standard – as described in the flowchart below:  The controls process will have slight differences if your project is following an iterative approach or a waterfall approach. All digital projects will follow an iterative approach, and you will need to engage early with GDS to define the approvals your project needs. Below is an example of how this might look:  The approach to agile delivery consists of three key phases: The key evidence documents are:","description":"Organisations should follow the rules set out in Managing Public Money which sets out the overriding principles for dealing with resources used by public sector organisations in the UK.","link":"/service-manual/agile/spending-controls.html"},{"title":"What agile looks like","indexable_content":"Understand your users “What do you want next Friday? What have we learned last week?” Small, agile teams Fail fast Continuous Planning Bad smells releasing working software to your users often allows you to get feedback quickly and hear or see what they think.  If the product is wrong you can easily change direction and iterate. if your software is rarely released to production you are not demonstrating value to your sponsor. You run the risk of creating a ‘too-big-to-fail’ service that isn’t fit for public consumption but must be released anyway. That means another press headline!  Ship! Ship! Ship! if your teams’ velocity is consistently volatile, beyond the initial 4-6 sprints, then this is indicative of something that needs fixing.  Perhaps there is hidden complexity or poor estimation. Test Driven Development (writing tests in code before you develop the features) has a wealth of metrics that highlight quality issues early.  Establish what these are early on, baseline and monitor throughout the project. at the release level, they identify and prioritise the features we must have, and would like to have by the deadline.   at the iteration level, they plan for the next features to implement, in priority order. If features are too large to be estimated or delivered within a single iteration, they break them down further. Your team is not full time. If your core team of product manager, scrum master, and key members of your multi-disciplinary team are not on the project full-time and spread over many projects then expect difficulties.  The team is the unit of delivery and you need focus.  Push back on managers and stakeholders if this is happening. You don’t have a dedicated team area. Your team should be sat together, preferably in your own room, with space on the walls to draw ideas and stick up cards and post-its.  As the project gets going, consciously ‘hack the environment’ to create a working environment conducive to team working.  You might upset a few people and challenge some long-standing working practices. But this is so, so important, and really should not be a big ask. There’s no continuous integration environment. Start right: with a continuous development environment.  If your teams are not insisting on this from the outset then you’ve probably got the wrong team.  So much about iterative software development is contingent on the ability to continuously deploy and run automated tests as you do. You have a separate QA department. If your team’s attitude to quality is to throw the software they’ve developed over the wall to a QA department, then they’ve got the wrong attitude to delivering production-ready software.  You need to embed a quality culture into the team.    releasing working software to your users often allows you to get feedback quickly and hear or see what they think.  If the product is wrong you can easily change direction and iterate.     if your software is rarely released to production you are not demonstrating value to your sponsor. You run the risk of creating a ‘too-big-to-fail’ service that isn’t fit for public consumption but must be released anyway. That means another press headline!  Ship! Ship! Ship!     if your teams’ velocity is consistently volatile, beyond the initial 4-6 sprints, then this is indicative of something that needs fixing.  Perhaps there is hidden complexity or poor estimation.     Test Driven Development (writing tests in code before you develop the features) has a wealth of metrics that highlight quality issues early.  Establish what these are early on, baseline and monitor throughout the project.       at the release level, they identify and prioritise the features we must have, and would like to have by the deadline.       at the iteration level, they plan for the next features to implement, in priority order. If features are too large to be estimated or delivered within a single iteration, they break them down further.       Your team is not full time. If your core team of product manager, scrum master, and key members of your multi-disciplinary team are not on the project full-time and spread over many projects then expect difficulties.  The team is the unit of delivery and you need focus.  Push back on managers and stakeholders if this is happening.       You don’t have a dedicated team area. Your team should be sat together, preferably in your own room, with space on the walls to draw ideas and stick up cards and post-its.  As the project gets going, consciously ‘hack the environment’ to create a working environment conducive to team working.  You might upset a few people and challenge some long-standing working practices. But this is so, so important, and really should not be a big ask.       There’s no continuous integration environment. Start right: with a continuous development environment.  If your teams are not insisting on this from the outset then you’ve probably got the wrong team.  So much about iterative software development is contingent on the ability to continuously deploy and run automated tests as you do.       You have a separate QA department. If your team’s attitude to quality is to throw the software they’ve developed over the wall to a QA department, then they’ve got the wrong attitude to delivering production-ready software.  You need to embed a quality culture into the team.    Agile is a liberating way of working.  It does not preclude the use of existing skills and knowledge. But it does require teams, users and stakeholders to adopt new ways of working together.   This short guide lists a few of the behaviours common to agile projects that support successful delivery and learning.   Prioritise features for them over everyone else – including your big, scary stakeholders, and seek their feedback early and often.  Really listen to them.  Even when they tell you things you don’t want to hear or disagree with.  If possible, use data from real people using your product to influence the direction of the project. Your focus on the user should be relentless.  Iterate often. Build something focused on the next most valuable user need and show it to them; listen to their feedback and improve it. Keep doing this until you have something so useful that they would not be without it.  It perhaps sounds like over-simplifying the complexity of software development and project management, but at its heart this is what agile development is all about:  “What do you want next Friday?” The process of delivering incremental, production-ready software allows a team to deliver value to their users and stakeholders regularly.  It shortens the feedback loops that might otherwise have been longer using a waterfall methodology.  An iterative delivery cycle also forces the team to think about what the most important features are to deliver next and focuses the mind on useable software. At the end of each delivery cycle, or sprint, teams should run a retrospective to review ‘what worked, what could be improved’ in the next sprint.   The software and the team continue to learn through delivery and iterate and improve throughout the project.  Small teams of between five to ten people are often more productive and predictable than larger teams. Forget man-days and think about the team as the unit of delivery.   A good team includes members with all of the skills necessary to successfully deliver software. A fully-functioning team has three key roles embedded into them, usually full-time: Product Manager - responsible for delivering return on investment, usually by creating products that users love.  The team delivers the Product Manager’s vision. Delivery Manager (aka Scrum master or Project Manager) – is the agile expert that is responsible for removing blockers (things slowing a team down).  They also usually act as a facilitator at team get togethers. Team member - Self organising, multi-disciplinary team that delivers prioritised user stories. Responsible for estimation. You help each other and work together toward delivering your sprint goals.  It’s common to encourage team members to pair. It sounds counter-intuitive to have two people work on one thing, but this is not so.  Working together closely produces better software solutions, promotes better quality controls and spreads knowledge across the team. A good team can estimate their output, or velocity, very effectively and consistently.  This allows for much more accurate planning.  Releasing little pieces of code often improves quality and visibility and reduces cost to market, but using agile techniques does not guarantee success. You can still fail!  What agile methodologies do allow you to do is to spot problems earlier and resolve them.   Here’s a few examples of how: Don’t be afraid to fail or experiment.  Learn to fail, and create a culture that learns from failure.  It’s a myth that you don’t plan on agile projects.  The freedom of agile projects does not come free: you have to plan.  You just plan differently and continuously. Agile planning is based as much as possible on solid, historical data, not speculation. The plan must continuously demonstrate its accuracy: nobody on an agile project will take it for granted that the plan is workable. Typically teams plan together, usually on at least two levels: These plans are usually reviewed after every sprint and adjusted based on ‘the weather yesterday’, new facts and requirements that will inevitably be uncovered along the way.  Teams new to agile should be wary of these familiar situations and reactions to doing things differently.  They have a bad smell about them and undermine your project and its chances of success. This is by no means an exhaustive list, but these are most common things to watch out for.","description":"Agile is a liberating way of working.  It does not preclude the use of existing skills and knowledge. But it does require teams, users and stakeholders to adopt new ways of working together.  ","link":"/service-manual/agile/what-agile-looks-like.html"},{"title":"Writing user stories","indexable_content":"Story cards Working outside-in using goals Taking a rain check — the promise of a conversation Stories only work in an agile team Where stories come from References story writing workshops - more commonly at the start of a project, the development team and stakeholders will get together to write stories user interviews with real users - ideally, you will set up a user panel to which the dev team have ongoing access user proxies embedded within your team - this may include the service manager or product owner observation - watch real users using your service Mastering the Requirements Process, 3rd Ed, Suzanne Robertson & James Robertson, 2012 Agile Alliance, “Agile - What is it?”, http://www.jconne.com/agile1whatisit/, accessed 7/1/2013 Twelve Principles of the Agile Manifesto - http://agilemanifesto.org/principles.html User Stories Applied, Mike Cohn, 2004. Free chapter on “Writing User Stories” available at http://www.mountaingoatsoftware.com/books/user-stories-applied User stories are an essential part of the agile toolkit, a way of organising work into manageable chunks that each deliver concrete value, which may be then discussed and prioritised independently of each other. User stories only work in the context of an agile team with embedded user representatives.  A user story is represented by a story card with a title and a few lines of text. Story cards can be virtual as well as actual cards. On a large product/service you’re likely to keep your stories in a digital format, and then turn them into physical cards as part of sprint planning. Story cards follow a standard structure – title, actor, narrative and goal. They do not capture every detail. Rather, they are a promise of further discussion at the appropriate time. Building useful software systems is hard. How can we make sure we’re solving the right problem? Developers love solving problems and playing around with technology, so it can be tempting to dive in to solutions before really understanding the problem.  Agile methodologies emphasise an outside-in approach – what outcome is your service user trying to achieve? If we dive into the solution without a good understanding of our users, we risk solving the wrong problem, or coming up with solutions which don’t really work for our users in the real world. That’s why the most important part of a user story is the GOAL.  You can also use this goal to help you decide whether the story is “done” or delivered. ie Does the work that’s been done meet the goal?  As a service manager writing stories with your development team, always start by thinking about and discussing your users’ goals. Why do they want to use your service? What are they trying to achieve? What need has motivated them to seek out your service? In what context do they use it? At home? At work? On a mobile phone? Whilst caring for a child? How often? Suzanne and James Robertson have excellent advice on this in Mastering the Requirements Process (reference 1). Being specific about the ACTOR can help you to break down interactions into logical chunks. Sometimes the actor will be a user of your service. Sometimes the actor will be an administrator, technician or manager within your organisation. Hopefully you already have a good understanding of your users from preliminary project work or existing research. If not, make sure you take the time to develop that understanding. Finally the narrative should serve as a reminder of the main flow of interaction which needs to be addressed. However the story card does not need to spell out every detail. Agile teams prefer face-to-face conversation over detailed documentation. Face-to-face is faster and more accurate than written documentation and allows developers to build up a detailed mental model of the user goals, workflows, constraints and all of the myriad issues which must be taken into account when building a software system.  The story card is just a placeholder, a promise to have a conversation when the time is right. We can use the story card and some brief initial conversations to estimate a story and fit it into an agile backlog. When development work actually starts the users or user proxy can be consulted to fill out the details. The user story is the sum of all of these conversations, sketches and whiteboard diagrams, not just the card. These conversations need never be written down or archived, instead they are translated directly into automated tests and working code. Using user stories in this way allows us to avoid ‘analysis paralysis’, the painful condition of trying to speculatively detail some far-future goal. User stories are dependent on regular face-to-face communication between developers and user representatives. Your service manager and other user representatives need to be available to developers every day, and have sufficient time to think through and answer questions. Don’t underestimate how time-consuming this work can be! Stories can come from many places, but the most common sources include, See Chapter 4 of User Stories Applied.","description":"User stories are an essential part of the agile toolkit, a way of organising work into manageable chunks that each deliver concrete value, which may be then discussed and prioritised independently of each other. User stories only work in the context of an agile team with embedded user representatives.","link":"/service-manual/agile/writing-user-stories.html"},{"title":"Accessibility","indexable_content":"Accessibility standard Accessibility testing Accessibility statements and policies Assistive technologies Accessible formats Accessible content Further reading The services we provide are for the benefit of all citizens of the United Kingdom. No user should be excluded on the basis of disability. To do so would breach the Equality Act 2010. Your services must also comply with any other legal requirements, including providing services in accordance with your Welsh Langage Scheme, if you have one. As a starting point, your service should aim to meet Level AA of the Web Content Accessibility Guidelines (WCAG) 2.0. Your service should be tested by disabled people, older people, and people who use assistive technologies. You should aim to do this at least twice as your service is developed. Find out more about how to conduct accessibility testing We work hard to make our sites and services as accessible and usable as we can for everyone who needs to use them. The GOV.UK website does not include a separate accessibility statement, however, as we are not comfortable with a statement that draws a distinction between accessibility and any other aspect of best practice development. This blogpost by GDS accessibility expert Léonie Watson explains in more detail why we took this decision. Your service should be usable by recent versions of Jaws, NVDA, VoiceOver, Window Eyes and Supernova screen readers, ZoomText, MAGic and basic operating system screen magnifiers, as well as speech recognition software including Dragon Naturally Speaking, and native operating system speech packages. HTML is quicker, easier and more widely usable/accessible than PDF, but where no other option is possible the following PDF guidance should be followed. There is more information on chosing appropriate formats Accessibility is more than checking the boxes of standards compliance. When writing content, consider what information would be useful to people with access needs. For instance, in a ‘find my nearest’ service, consider user needs like: Is there disabled parking? How far is it from the entrance? What’s the terrain like? Uphill? Downhill? Will I have to cross any roads? etc. If you want to read more about the accessibility testing we’ve carried out while building GOV.UK, this blog post by GDS Accessibility Lead Joshua Marshall will tell you more.","description":"The services we provide are for the benefit of all citizens of the United Kingdom. No user should be excluded on the basis of disability. To do so would breach the Equality Act 2010. Your services must also comply with any other legal requirements, including providing services in accordance with your Welsh Langage Scheme, if you have one.","link":"/service-manual/design-and-content/accessibility.html"},{"title":"Browsers and devices","indexable_content":"Guidance Verified browsers Developing universally accessible services Continuous compatibility Further reading Desktop Small screen devices Audience operating system browser browser version screen size/resolution mobile device Services should be universally accessible, regardless of how the user is choosing to access them. Due to the large range of browsers, devices and resolutions of access routes, it is to be expected that the user’s experience of a service will vary as the technical capabilities on browsers and devices vary. You must verify that your service works across a representative range of these devices and browsers, and makes accommodations for creating good experiences in all of them. These are the browsers we recommend testing on when developing your service.  This list strongly recommends testing on a range of browsers created within the last 3 years that cover the largest representation of the user base. This list is based upon usage statistics for GOV.UK.  It allows for a 95% coverage of all browsers used (the remaining browsers are individually insignificant). Browsers not listed may still work well, and it should be noted that this is not a list that intends to suggest that these are the only browsers the service will work on - this is simply a benchmark for testing against to ensure that the service will likely work for as many users as possible alongside appropriate cost-effectiveness and development overhead. Services should ensure there is a obvious way for users to report problems they may find, and additional testing and adjustments should be made upon receiving such a report. Note: An exception is made for IE6, as this is still in large-scale use in government departments. Two distinct levels of support are given and denoted next to each browser. Where ‘latest version’ is listed, it means the latest stable version plus one version back, as these browsers regularly self-update. Digital by default services must take into consideration the limitations of the browsers people use to access them. One important idea for achieving this is progressive enhancement. This recognises that different bits of technology have different capabilities. Whilst everybody gets access to core functionality, those using more sophisticated technology get an enhanced experience. Progressive enhancement is also important in delivering a consistent experience to people using mobile devices or those who may have limited bandwidth. Because mobile traffic now accounts for 13% of all internet use in the UK and around 20% of traffic to GOV.UK, this mode of access is not an optional extra to consider. Where we might previously have developed separate mobile and desktop versions of a service, or bought bespoke apps, design should now be done with one website in mind. This should be done using a responsive design approach. This means websites adapt to suit the dimension of the screen being used to view it. Don’t try to build services for every possible combination of operating system and browser. Avoid the temptation of designing for the obvious without first researching your users. Every service has an audience and you should investigate yours to see whether it has particular characteristics that you need to be aware of. Do you have existing data for the browsers and devices that your audience has been using already? If so, analyse it to see if you can identify any patterns in usage, or any combinations of: This data may sometimes support the case for deprioritising certain development work: although most of GOV.UK is designed to work across all screen sizes, the Trade Tariff team chose not to tailor their tool to the smaller screen as it is largely used by office workers between 9 and 5. Equally, if your audience is likely to include those from within the public sector there may be higher use of older, more limited browsers. Channel shift means you must also consider your potential future audience. It is anticipated that operating system, browser and device data from GOV.UK will be published as part of the GDS performance platform and this will provide a valuable insight into the audience for government services. Before launch we noted a marked difference between the existing non-government and government audiences so you should also investigate the data provided by NetMarketShare and GlobalStats who can provide UK and global trends. It is important to distinguish between those browsers and operating systems whose popularity is either increasing or holding steady and those for which the opposite is true. Although Internet Explorer versions 6 and 7 have only been used by a minority (almost 5% of the total visits to GOV.UK since launch) this still accounts for a significant number of individuals who government services must take into account. However, over time this will change. So it is important to set thresholds for abandoning support and for adopting new and emergent platforms. The iPad Mini, Kindle Fire, Windows 8 and Internet Explorer 10 highlight this dilemma - recently launched products might not appear in any data but it is likely that they will eventually enjoy widespread use. Decisions about compatibility can not be something you specify at the start of the project and then forget about. Transformed digital services need to reflect and adapt to the broader internet context of their users on an ongoing basis. James Weiner writes about the decisions made about browser support for the Beta of GOV.UK (January 2012) Ben Welby discusses the operating systems, browsers and devices supported for the launch of GOV.UK (October 2012). Tom Byers explores the practical ways in which GOV.UK has been designed for different devices (November 2012). Dafydd Vaughan with an update on browser usage on GOV.UK post-launch. The Guardian introduce their use of responsive design (October 2012). Helpful summary of progressive enhancement (October 2008).","description":"Services should be universally accessible, regardless of how the user is choosing to access them.","link":"/service-manual/design-and-content/browsers-and-devices.html"},{"title":"Choosing appropriate formats","indexable_content":"Choose the format to fit the content Don’t assume your users can read proprietary formats      For written reports, the native format of the web (HTML) should be your default option. PDF can be an excellent display format, but without additional effort it can be inappropriate for users of screenreading software. It is faster and easier to make accessible HTML that is suitable for every platform and device. If you must publish PDFs, you should provide accessible alternate formats for the document, and invest effort in accessibility tagging your PDFs.         For data, use CSV or a similar ‘structured data’ format (see also JSON and XML). Do not publish structured data in unstructured formats such as PDF.         If you are regularly publishing data (financial reports, statistical data, etc.) then your users may well wish to process this data programmatically, and it becomes especially important that your data is ‘machine-readable’. PDFs, Word documents and the like are not suitable formats for data publication. In addition, you should consider making your data available through an API if this will simplify your users’ interactions with your publications. For more information on APIs, and for more detailed technical guides on publishing data, please see our guidance on APIs and formats.         If you are publishing a written report that contains statistical tables, provide the tables alongside or in addition to your report in suitable data formats.         For textual reports, provide HTML, plain text (.txt), or PDF rather than formats that require proprietary software to view, such as Word documents (.doc/.docx).         For tabular data, provide CSV or TSV rather than Excel spreadsheets (.xls/.xlsx).         For other structured data, see our guidance on representations for the consumer. Wherever possible, choose an open format over a proprietary one.    Almost all content relating to the policies or publications of government departments should live on GOV.UK. Where exceptions to this rule are required, content and data should be provided in formats that appropriately reflect their purpose and intended audience. You should publish documents in file formats that reflect the nature of the information they contain, and the uses to which they will likely be put. For written reports, the native format of the web (HTML) should be your default option. PDF can be an excellent display format, but without additional effort it can be inappropriate for users of screenreading software. It is faster and easier to make accessible HTML that is suitable for every platform and device. If you must publish PDFs, you should provide accessible alternate formats for the document, and invest effort in accessibility tagging your PDFs. For data, use CSV or a similar ‘structured data’ format (see also JSON and XML). Do not publish structured data in unstructured formats such as PDF. If you are regularly publishing data (financial reports, statistical data, etc.) then your users may well wish to process this data programmatically, and it becomes especially important that your data is ‘machine-readable’. PDFs, Word documents and the like are not suitable formats for data publication. In addition, you should consider making your data available through an API if this will simplify your users’ interactions with your publications. For more information on APIs, and for more detailed technical guides on publishing data, please see our guidance on APIs and formats. If you are publishing a written report that contains statistical tables, provide the tables alongside or in addition to your report in suitable data formats. In summary, consider your users, and the uses to which they will put your published data and content. If in doubt, treat the native format of the web, HTML, as a good fallback option. Web browsers are available on all platforms and devices, and web pages tend to be both passably accessible and machine-readable. Wherever possible, publish in accessible, patent-free, open formats, for which software is widely available on a variety of platforms. If publishing in proprietary formats, you should always make a non-proprietary alternative available. For textual reports, provide HTML, plain text (.txt), or PDF rather than formats that require proprietary software to view, such as Word documents (.doc/.docx). For tabular data, provide CSV or TSV rather than Excel spreadsheets (.xls/.xlsx). For other structured data, see our guidance on representations for the consumer. Wherever possible, choose an open format over a proprietary one. Again, if in doubt, you should treat the native format of the web, HTML, as your best default option.","description":"Almost all content relating to the policies or publications of government departments should live on GOV.UK. Where exceptions to this rule are required, content and data should be provided in formats that appropriately reflect their purpose and intended audience.","link":"/service-manual/design-and-content/choosing-appropriate-formats.html"},{"title":"Data visualisation","indexable_content":"Introduction Telling the story Choosing your visualisation and templates Creating your visualisation Be open and honest Further reading Best Practice GDS Example Checklist Column chart Bar chart Line chart Pie chart Scatter chart Checklist Worked example Checklist Worked Example - GDS Performance Dashboard Checklist Worked example Before After Before After Who are your audience? How much detail do they need? What story does the data tell? Do you need a visualisation? Negative values below the x-axis. If needed, the target should be a single line that is visible but not too thick. Limit stacked columns to 3 segments. Arrange bars in size order, from biggest to smallest (unless there’s good reason, ie data needs to be represented alphabetically). Negative values to the left of the y axis. Limit number of data sets to four. Keep axis labels horizontal. Use line points to differentiate between data types (use line dots for projections and estimates only). The largest segment should be at 12 o’clock going clockwise. Label the chart directly and avoid text inside segments. Limit items to two to avoid confusion. Include trend line if required. This should be a single solid line. What visualisations are available? Have you chosen the right visualisation for the data? What about infographics? Too many segments make them hard to compare. Too many colours made the chart confusing. The chart includes cost recovery as a negative which cannot be represented properly in a pie. This stacked chart is much clearer. Comparisons can easily be made and sorting the data provides quick insight. The stacked chart provides additional information which could not be visualised in the pie. Start axes at zero unless there’s good reason not to (ie data is clustered at high values). Do not say too much, limit the number of data sets. If needed, put legend at the top of the chart in the same order as the data in the chart. Maximise the space available to the chart and remove chartjunk. Include units of measurement in the chart title or directly on the axis, avoid doing both. Keep colours simple, do not repeat/alternate or use opposites. Use the GDS Colour palette. Use the same colour when reporting a single data set 3D effects borders unnecessary axes lines random colours or backgrounds unnecessary text Have you removed the chartjunk? Have you got the right amount of supporting information? Have you got the right amount of data? Have you used the GDS colour palette? Will the colours work for people with colour blindness or greyscale? Are your colours appropriate for the data? Have you referenced data with a URL? Have you provided contact details (eg a mailto link)? Is it clear whether data is internal or public? Have you been open and transparent with data? Chart only shows a select few data points The small range on y-axis has exaggerated the fluctuations in data Y-axis starts at 60 but chart suggests data has reached lowest possible value Y-axis has been formatted to show the full range of data The data fluctuations can be seen in the context of the wider data series.    “We want transparency to become an absolutely core part of every bit of government business.” - Francis Maude  As we surface more data about government services, we need to make sure that the visualisations of it are easy to understand, visually compelling and drive action. To do that, we need to have a consistent visual grammar, for use both within GDS and across government. This guide sets out four principles of good data presentation, with easy to follow checklists to help you achieve this. For context, we’ve added examples of how the principles have been employed at GDS. The principles and examples found in this guide are likely to evolve over time, as we find new challenges and applications for them. There are many examples of best practice style guides already in place. For example, The Economist has a clearly defined house style that allows its readers to readily identify and understand their visualisations. They publish a new visualisation every day in their Graphic Detail. This guide attempts to build on the best practice from a range of organisations. The GOV.UK Performance Platform helps the Government make decisions based on data, often presented through innovative visualisations (built using D3.js). The example below compares weekly visitors to GOV.UK with the two main websites it replaced.  To effectively tell the story behind the numbers, you need to understand both your audience and the data. Only use visualisations if they make the story clearer. In many cases, a good table or words may communicate better. If there are very few data points (eg top rate income tax down 5%, all other rates unchanged), it’s clearer to write a sentence than draw a picture. If every item must be read precisely (to several decimal places) then a table is best. A good table will be clear and uncluttered. The data should be easy to read with the same decimal places or rounding and sorted into a logical order. Don’t use too many different types of font, and make sure your data is referenced. But visualisations often are the right answer and the data is the most important feature. It should tell its own story and it is best to not try to say too much in one go. Keep charts simple, cutting down on unnecessary items and jargon. Explanatory text will be needed in some cases, but it should not simply repeat the story being told in the visualisation. A well written chart title can reinforce the story of the data and reduce the amount of additional text needed. Choosing the right visualisation will help the data tell its own story and give powerful insight. There are many ways of displaying information visually. This guide focuses on charts. GDS has produced a guide to infographics. Most computer programmes come with a range of visualisations. There are also visualisation tools available online, this blog showcases some free ones. Each chart has its own strength. Below are the core 5 with templates, a google spreadsheet of these is available  Strengths - comparing items, or a small number of time periods.  Strengths - comparing items, especially if they have long names or many items.  Strengths - comparing over time or between variables for a single item (eg site traffic vs site performance)  Strengths - simple share of total. Use with caution, column or bar charts are often better. Limit to two segments to avoid confusion.  Strengths - relationships between variables where there are many items (eg volume vs cost for numerous transactions) There is more help on choosing the right chart here. It is important to not confuse your audience. Choosing the correct visualisation is important and at GDS we reviewed what was being used in the performance dashboard. As the example below shows, Pie charts with many items are not clear. We used a stacked bar chart to better represent the data.   Keep in mind these useful tips when creating your charts. Keeping your visualisation simple will help the data tell its own story. Chartjunk is anything in your visualisation using ink that actively reduces clarity. Avoid: Know your audience so you give the right amount of supporting information. External or non-technical audiences will need more explanation but internal or expert audiences may find this tedious. Do not use the text to simply repeat what is being said by the data. Visualisations should avoid too much data. Only include what is relevant. If the trend is obvious, don’t include a trendline. Sometimes it may be more effective to focus on high value items only (if you are being selective, be open and clear about this). Poor colour choice can change how the data is perceived in a visualisation. For example, red is strongly associated with negative performance so is best avoided for positive/normal figures. Colour blindness makes it difficult for a user to differentiate between data sets. Labelling charts directly and different line styles can help. If your visualisations are likely to be printed it is important the colours work in greyscale as not all users will have high quality printers. The example below from GDS’ senior management dashboard shows how avoiding chart junk and limiting the number of datasets can enhance your visualisation.  The legend accounts for a quarter of display space. The Y axis quotes £ and not £m. The segments are profiles and proportionate for each time period, so the bright colouring adds no extra detail. The mix of bar and line is confusing with so much information in the chart.  The stacked column gave a level of detail which was not needed. This has been rationalised to best suit the audience. Axes have been standardised. The legend has been relocated giving the chart more space. Heavy grid lines and axes have been removed to give a clearer display. “We want transparency to become an absolutely core part of every bit of government business.” - Francis Maude Being open and transparent supports the Open Data white paper agenda. Similarly, our Open Public Services agenda is built on transparency. Sourcing data builds trust and credibility. Providing contact information shows ownership but also helps collaboration and information sharing. When presenting data be aware of axes and scales. Data can be misrepresented by only showing a selection if it is not clear why an extract has been chosen. Consider where the visualisation might be published. For example, if published alongside other visualisations the reader is likely to assume the scales are consistent. This might change how your data is perceived.   For more information on the GDS Performance Platform see this blogpost from Richard Sargeant, GDS’ Director of Performance & Delivery. This chart chooser from Andrew Abela builds on the work of Gene Zelazny’s classic book Saying it with Charts. This interactive tool from Juice Analytics helps guide your chart choice through filters. Brain Suda’s A Practical Guide to Designing with Data provides a comprehensive understanding of how to best engage the audience with your data. Here is a video of Brian Suda presenting on a section of his book at the 2012 DIBI conference. Dona M. Wong’s The Wall Street Journal, Guide to Information Graphics details the do’s and don’ts of presenting data. Edward Tufte’s The Visual Display of Quantitative Information is a seminal work on data visualisations and introduces the concept of chartjunk. Here is a video of Edward Tufte discussing his theories on visual thinking and analytical design. This article from the Peltier Tech blog covers the ten chart design principles. The Flowing Data blog is a source of data visualisation news.","description":"As we surface more data about government services, we need to make sure that the visualisations of it are easy to understand, visually compelling and drive action. To do that, we need to have a consistent visual grammar, for use both within GDS and across government.","link":"/service-manual/design-and-content/data-visualisation.html"},{"title":"How users read","indexable_content":"Reading Reading age Lowercase Plain English Context Learning disabilities Why we do this Further reading The style guide is set in best practice and relates to how users read. This is an explanation of some of our guidance and the reasons behind the rules. Users only really read 20-28% of a web page. With services, where users just want to complete the task as quickly as possible, you have added user impatience so you may find users skim words even more. The style guide and how we write give guidance on how to write. This page details why we do it. All of this guidance is based on the learning skills of an average person in the UK, who has English as a first language. You don’t read one word at a time. You bounce around. You anticipate words and fill them in. By the time you are 9 years old, your brain can drop up to 30% of the text and still understand. Your vocabulary will grow but this reading skill stays with you as an adult. You should also be confident in sounding out words and blending sounds. You may not know the word, but you have the skills to be able to learn it. We talk about the reading age being around 9 years old - this is why.  When you learn to read, you start with a mix of upper and lower case but you don’t start understanding uppercase until you are around 6 years old.  At first, you may sound out letters, merge sounds, merge letters, learn the word. Then you stop reading it. At that point, you recognise the shape of the word. This speeds up comprehension and speed of reading. So we don’t want people to read. We want people to recognise the ‘shape’ of the word and understand. It’s a lot faster.  Caps are reputed to be 13-18% harder for users to read. So we try to avoid them. Also, in modern usage it sounds like we are shouting. We are government. We should not be shouting. By the time you are 9, you are building up your ‘common words’. Your primary set is around 5,000 words in your vocabulary; your secondary set is around 10,000 words. These are words you use every day. They are a lot of your ‘plain English’ words. Which is why we should be obsessed with them. These are words so easy to comprehend, you learn to read them quickly and then you stop reading and start recognising.  We explain all unusual terms on GOV.UK. This is because you can understand 6-letter words as easily 2 letter words - if they are in context. Sometimes, you can read a short word faster than a single letter - if the context is correct. Not only are we giving users full information - which is obviously what we are meant to be doing - we are speeding up their reading time. By giving full context and using common words, we are allowing them to understand in the fastest possible way.  In tools and transactions you need to give people context. By giving them information they are expecting, you help them get through it faster.  This is a huge subject, with many different nuances. But one thing we can do is remember that people with some learning disabilities read letter for letter. They don’t bounce around like other users. They also can’t retain the comprehension of the sentence as a whole if it is too long. People with moderate learning disabilities can retain comprehension of 5 to 8 words. Now, we can’t go that far but if we concentrate on common words, we can get to the standard retention figure of around 25 words. Quite frankly, we all get a bit lost if you have a 72 word sentence. Again, why would we make it hard, when it can be so easy and we don’t lose the usability?  Our audience is potentially anyone living in the UK. We need to be able to communicate in a way that most users understand. Government can’t afford to be elitist and use language only those with a very good education can understand. We need to open up our information and services to everyone. That means using common words and working with natural reading behaviour. Nielsen: For more detail on why 20-28% of text is read.","description":"The style guide is set in best practice and relates to how users read. This is an explanation of some of our guidance and the reasons behind the rules.","link":"/service-manual/design-and-content/how-users-read.html"},{"title":"Buttons","indexable_content":"Button styles Button colours Disabling buttons Button sizes Types of button Writing button text Example HTML Sass Example HTML Sass Example HTML Example Primary actions Secondary actions Warning actions Launch button Common actions Compound actions Primary actions move the user on to the next part of the transaction Avoid having multiple primary actions on a single page Secondary actions modify the current view They don’t move users to the next step There can be multiple secondary actions per page They should be less prominent than the primary action Actions that have irreversable effects should look ‘scary’ Keep them away from the other actions Make the action reversible / ‘undo’-able If that isn’t possible to implement, use an alert to check that the user really wants to do this Use to initiate a transaction Let users know if they’ll be taken to a different website verbs and an active voice clear, informative and succinct language sentence case technical terms - eg. use ‘delete’, not ‘form reset’, use one of the common actions below instead of ‘submit’ lots of words - eye tracking shows users are less likely to read long labels Buttons should be used to signify actions that the user can perform. Here’s how to create buttons in the GOV.UK style. If you’re using Sass in your project the GOV.UK button Sass mixin will help. The button mixin styles can be applied to links, inputs and button tags, like this:      Button tag     Link tag      The default button colour is $green, but different colours can be assigned. You need a good reason to do this though.       Primary action      Secondary action      Warning action    The button text colour automatically switches from light to dark, depending on the background colour. Use the ‘disabled’ attribute or class, depending on which kind of element you’re styling.      Button tag     Link tag      Buttons will inherit the font size of their parent elements. Use the standard paragraph text size wherever possible. More complex interfaces may occasionally require smaller buttons.      Primary action      Secondary action      Warning action         Primary action      Secondary action      Warning action         Next step         Save         Delete account         Get started       on the HMRC website    Do use: Don’t use: Many of these can be used in place of ‘Submit’, which is a technical term to be avoided. Sometimes you want a single button to perform more than one action. For example, ‘Save and quit’. It’s worth trying to avoid this situation but if you can’t, use common sense. If one of the actions is obvious or not important to know, don’t mention it. For example, if a button saves the current state and moves the user to the next screen, don’t use ‘Save and next’, just use ‘Next’, because users will assume the former. When in doubt, test with real users.","description":"Buttons should be used to signify actions that the user can perform. Here’s how to create buttons in the GOV.UK style.","link":"/service-manual/design-and-content/resources/buttons.html"},{"title":"CAPTCHA","indexable_content":"What are they? Why shouldn’t I use one? Alternatives to CAPTCHA      Usability - they put the burden of detecting bots on the user rather than the system. As CAPTCHAs are designed to be hard to read and understand, this makes the service much more difficult to use.         Accessibility - they are inaccessible by design. This effectively makes the service unusable by people with certain disabilities. Even CAPTCHAs that provide audio versions do not completely resolve this issue.    Privacy - 3rd party CAPTCHA services set cookies, collect analytics and can track users across multiple sites. This introduces significant privacy concerns. Performance - use of a 3rd party CAPTCHA service ties your performance to theirs. If their service goes offline, so does access to your service. Security - the security of your service is tied to that of the 3rd party. If they are compromised, so is your service and its users. rate and connection limiting use of honey pots protective monitoring CAPTCHA stands for Completely Automated Public Turing test to tell Computers and Humans Apart. These are usually images of jumbled up text that a user needs to decipher and enter before submitting a form. They are usually used to prevent bots (automated software) from completing a form or accessing a system. CAPTCHAs introduce significant problems to online services: Usability - they put the burden of detecting bots on the user rather than the system. As CAPTCHAs are designed to be hard to read and understand, this makes the service much more difficult to use. Accessibility - they are inaccessible by design. This effectively makes the service unusable by people with certain disabilities. Even CAPTCHAs that provide audio versions do not completely resolve this issue. Additionally, if a 3rd party CAPTCHA service is used, there are further problems to consider: Many of the risks that CAPTCHAs are aimed to mitigate can be addressed in other ways: It’s important to note that even with a CAPTCHA in place bots will still get through due to advances in computer imaging and the use of CAPTCHA farms. A combination of different approaches generally gives the best results. Further reading: * In search of the perfect CAPTCHA * CAPTCHA and the BBC * Ticketmaster ditches CAPTCHA for something simpler","description":"CAPTCHA stands for Completely Automated Public Turing test to tell Computers and Humans Apart. These are usually images of jumbled up text that a user needs to decipher and enter before submitting a form. They are usually used to prevent bots (automated software) from completing a form or accessing a system.","link":"/service-manual/design-and-content/resources/captcha.html"},{"title":"Colour palettes","indexable_content":"Semantic colour names Standard colour palette Greys Government department colours Text Backgrounds and borders Purple Mauve Fuschia Pink Baby Pink Red Mellow Red Orange Brown Yellow Grass Green Green Turquoise Light Blue HM Government Treasury Cabinet Office Department for Education Department for Transport Home Office Department of Health (NHS) Ministry of Justice Ministry of Defence Foreign and Commonwealth Office Department for Communities and Local Government Department for Energy and Climate Change Department for Culture Media and Sport Department for Environment Food and Rural Affairs Department for Work and Pensions Department for Business, Innovation and Skills Department for International Development Government Equalities Office Attorney General's Office Scotland Office Wales Office $text-colour ($black) $secondary-text-colour ($grey-1) $link-colour (#2e3191) $link-visited-colour (#2e3191) $link-active-colour (#2e8aca) $link-hover-colour (#2e8aca) $border-colour ($grey-2) $panel-colour ($grey-3) $canvas-colour ($grey-4) $highlight-colour ($grey-4) $page-colour ($white) Sass: $purpleHex: #2e358b Sass: $purple-50Hex: #9799c4 Sass: $purple-25Hex: #d5d6e7 Sass: $mauveHex: #6f72af Sass: $mauve-50Hex: #b7b9d7 Sass: $mauve-25Hex: #e2e2ef Sass: $fuschiaHex: #912b88 Sass: $fuschia-50Hex: #c994c3 Sass: $fuschia-25Hex: #e9d4e6 Sass: $pinkHex: #d53880 Sass: $pink-50Hex: #eb9bbe Sass: $pink-25Hex: #f6d7e5 Sass: $baby_pinkHex: #f499be Sass: $baby-pink-50Hex: #faccdf Sass: $baby-pink-25Hex: #fdebf2 Sass: $redHex: #b10e1e Sass: $red-50Hex: #d9888c Sass: $red-25Hex: #efcfd1 Sass: $mellow-redHex: #df3034 Sass: $mellow-red-50Hex: #ef9998 Sass: $mellow-red-25Hex: #f9d6d6 Sass: $orangeHex: #f47738 Sass: $orange-50Hex: #fabb96 Sass: $orange-25Hex: #fde4d4 Sass: $brownHex: #b58840 Sass: $brown-50Hex: #dac39c Sass: $brown-25Hex: #f0e7d7 Sass: $yellowHex: #ffbf47 Sass: $yellow-50Hex: #ffdf94 Sass: $yellow-25Hex: #fff2d3 Sass: $grass-greenHex: #85994b Sass: $grass-green-50Hex: #c2cca3 Sass: $grass-green-25Hex: #e7ebda Sass: $greenHex: #006435 Sass: $green-50Hex: #7fb299 Sass: $green-25Hex: #cce0d6 Sass: $turquoiseHex: #28a197 Sass: $turquoise-50Hex: #95d0cb Sass: $turquoise-25Hex: #d5ecea Sass: $light-blueHex: #2b8cc4 Sass: $light-blue-50Hex: #96c6e2 Sass: $light-blue-25Hex: #d5e8f3 #0B0C0C, $black #6F777B, $grey-1 #BFC1C3, $grey-2 #DEE0E2, $grey-3 #F8F8F8, $grey-4 #FFFFFF, $white HM GovernmentSass: $hm-governmentHex: #0076c0 TreasurySass: $treasuryHex: #af292e Cabinet OfficeSass: $cabinet-officeHex: #0078ba Department for EducationSass: $department-for-educationHex: #003a69 Department for TransportSass: $department-for-transportHex: #006c56 Home OfficeSass: $home-officeHex: #9325b2 Department of Health (NHS)Sass: $department-of-healthHex: #00ad93 Ministry of JusticeSass: $ministry-of-justiceHex: #231f20 Ministry of DefenceSass: $ministry-of-defenceHex: #4d2942 Foreign and Commonwealth OfficeSass: $foreign-and-commonwealth-officeHex: #003e74 Department for Communities and Local GovernmentSass: $department-for-communities-and-local-governmentHex: #00857e Department for Energy and Climate ChangeSass: $department-of-energy-climate-changeHex: #009ddb Department for Culture Media and SportSass: $department-for-culture-media-sportHex: #d40072 Department for Environment Food and Rural AffairsSass: $department-for-environment-food-and-rural-affairsHex: #898700 Department for Work and PensionsSass: $department-for-work-and-pensionsHex: #00beb7 Department for Business, Innovation and SkillsSass: $department-for-business-innovation-and-skillsHex: #003479 Department for International DevelopmentSass: $department-for-international-developmentHex: #002878 Government Equalities OfficeSass: $government-equalities-officeHex: #9325b2 Attorney General's OfficeSass: $attorney-generals-officeHex: #9f1888 Scotland OfficeSass: $scotland-officeHex: #002663 Wales OfficeSass: $wales-officeHex: #a33038 This is the standard GOV.UK colour palette. We recommend you use the Sass variables where possible in case the colour values are updated. The variables are defined in ‘colours.scss’ in the GOV.UK Front-end Toolkit. $text-colour ($black) $secondary-text-colour ($grey-1) $link-colour (#2e3191) $link-visited-colour (#2e3191) $link-active-colour (#2e8aca) $link-hover-colour (#2e8aca) $border-colour ($grey-2) $panel-colour ($grey-3) $canvas-colour ($grey-4) $highlight-colour ($grey-4) $page-colour ($white) Sass: $purple Hex: #2e358b Sass: $purple-50 Hex: #9799c4 Sass: $purple-25 Hex: #d5d6e7 Sass: $mauve Hex: #6f72af Sass: $mauve-50 Hex: #b7b9d7 Sass: $mauve-25 Hex: #e2e2ef Sass: $fuschia Hex: #912b88 Sass: $fuschia-50 Hex: #c994c3 Sass: $fuschia-25 Hex: #e9d4e6 Sass: $pink Hex: #d53880 Sass: $pink-50 Hex: #eb9bbe Sass: $pink-25 Hex: #f6d7e5 Sass: $baby_pink Hex: #f499be Sass: $baby-pink-50 Hex: #faccdf Sass: $baby-pink-25 Hex: #fdebf2 Sass: $red Hex: #b10e1e Sass: $red-50 Hex: #d9888c Sass: $red-25 Hex: #efcfd1 Sass: $mellow-red Hex: #df3034 Sass: $mellow-red-50 Hex: #ef9998 Sass: $mellow-red-25 Hex: #f9d6d6 Sass: $orange Hex: #f47738 Sass: $orange-50 Hex: #fabb96 Sass: $orange-25 Hex: #fde4d4 Sass: $brown Hex: #b58840 Sass: $brown-50 Hex: #dac39c Sass: $brown-25 Hex: #f0e7d7 Sass: $yellow Hex: #ffbf47 Sass: $yellow-50 Hex: #ffdf94 Sass: $yellow-25 Hex: #fff2d3 Sass: $grass-green Hex: #85994b Sass: $grass-green-50 Hex: #c2cca3 Sass: $grass-green-25 Hex: #e7ebda Sass: $green Hex: #006435 Sass: $green-50 Hex: #7fb299 Sass: $green-25 Hex: #cce0d6 Sass: $turquoise Hex: #28a197 Sass: $turquoise-50 Hex: #95d0cb Sass: $turquoise-25 Hex: #d5ecea Sass: $light-blue Hex: #2b8cc4 Sass: $light-blue-50 Hex: #96c6e2 Sass: $light-blue-25 Hex: #d5e8f3 #0B0C0C, $black #6F777B, $grey-1 #BFC1C3, $grey-2 #DEE0E2, $grey-3 #F8F8F8, $grey-4 #FFFFFF, $white Sass: $hm-government Hex: #0076c0 Sass: $treasury Hex: #af292e Sass: $cabinet-office Hex: #0078ba Sass: $department-for-education Hex: #003a69 Sass: $department-for-transport Hex: #006c56 Sass: $home-office Hex: #9325b2 Sass: $department-of-health Hex: #00ad93 Sass: $ministry-of-justice Hex: #231f20 Sass: $ministry-of-defence Hex: #4d2942 Sass: $foreign-and-commonwealth-office Hex: #003e74 Sass: $department-for-communities-and-local-government Hex: #00857e Sass: $department-of-energy-climate-change Hex: #009ddb Sass: $department-for-culture-media-sport Hex: #d40072 Sass: $department-for-environment-food-and-rural-affairs Hex: #898700 Sass: $department-for-work-and-pensions Hex: #00beb7 Sass: $department-for-business-innovation-and-skills Hex: #003479 Sass: $department-for-international-development Hex: #002878 Sass: $government-equalities-office Hex: #9325b2 Sass: $attorney-generals-office Hex: #9f1888 Sass: $scotland-office Hex: #002663 Sass: $wales-office Hex: #a33038","description":"This is the standard GOV.UK colour palette. We recommend you use the Sass variables where possible in case the colour values are updated. The variables are defined in ‘colours.scss’ in the GOV.UK Front-end Toolkit.","link":"/service-manual/design-and-content/resources/colour-palettes.html"},{"title":"Creating Accessible PDFs","indexable_content":"Overview In Microsoft Word In Adobe Acrobat Before publication Acknowledgements Use headings Use lists Create a table of contents Use readable body text Use good colour contrast Use data tables Provide text descriptions Set the document language Check the tag tree Check the tab order Check the reading order Check the reflow order Check text descriptions Remove empty tags Set decorative content Check data tables Check active links Check high contrast Display document title Full Adobe accessibility check Quick screen reader check Use NVDA Use VoiceOver from the top of the PDF (with the Numlock off), use Numpad 0 + Numpad 2 to read the PDF from top to bottom and check the reading order; use the tab key (repeatedly) to move through the PDF and check the tab order; use the h key (repeatedly) to move through the PDF and check the heading structure; use the g key (repeatedly) to move through the PDF and check for text descriptions. NB: These commands will also work with the Jaws screen reader from Freedom Scientific. from the top of the PDF use a double finger down swipe, or Control + Option + a to read the PDF from top to bottom and check the reading order; use the tab key (repeatedly) to move through the PDF and check the tab order. NB: VoiceOver does not provide shortcut keys for navigating by headings or graphics. The best way to create an accessible PDF is to create an accessible source document. Well structured Microsoft Word documents make good source documents for conversion to PDF. When a source document is converted into PDF it is tagged. The PDF tag tree reflects the structure of the document, and it’s this structure that assistive technologies like screen readers use to navigate the document. Use the styles and features available in Word to format your content and give it structure. This will make it easier to convert your source document into PDF because it lays the groundwork for the PDF tag tree. Use the heading styles in Word to create a logical document structure. Don’t increase the size of text or make it bold to create the appearance of headings. Treat your document like a book: It should have one title (level one heading) and multiple chapters (level two headings). Within each chapter there may be multiple sections (level three headings) and sub sections (level four headings). Use the list styles in Word to group together related items. If the items follow a specific sequence, use a numbered list instead. Don’t use punctuation or other markers to create the illusion of a list. If your document is longer than a few pages, use Word to automatically create a table of contents based on your heading structure. Don’t use lists and links to manually create a table of contents. Use left aligned text (unless the language of your document is read right to left). Don’t use justified text in your document. Choose a san serif font and use the styles in Word to set it as the default, with a minimum size of 12pt. If you need to include footnotes or other text of a smaller size, increase the size of the body text to 14pt, rather than reduce the size of text below 12pt. Don’t use chunks of italicised or capitalised text, and don’t underline text unless it’s a link. Use foreground/background colours for text that have a good contrast ratio. The 4.5:1 ratio recommended by the Web Content Accessibility Guidelines 2.0 is a good minimum. Don’t use colour or shape as the only way to identify something in your document. Use text labels or descriptions instead. Use tables with column headings to display data. Don’t use tables to make cosmetic changes to the layout of the document. Use Word to add text descriptions to all important images in the document. Make sure the text description includes all the information contained within, or conveyed by, the image. Use Adobe Acrobat Pro to convert your Word document into PDF. Use the Convert to PDF option under the Adobe menu in Microsoft Word to do this. This will ensure that Acrobat picks up the accessibility you have built into your source document. Set the language of the document. Go to File > Properties > Advanced and select a language from the Language menu. If the PDF is written in Welsh, type CY into the box. All content must be tagged, marked as an artefact (background content), or removed from the tag tree. Use the Tags panel to review and edit the tag tree. If the PDF was converted from a well structured Word document, the tag tree should require little editing. If the PDF contains form fields, use Advanced > Accessibility > Touch up reading order to check they can be navigated with the tab key in a logical order. If the tab order needs improving, use the Order panel to drag and drop the fields into the correct order. Use the Tags panel to review and edit the reading order of the PDF. Don’t rely on the visual order of the PDF. The reading order is based on the structure of the PDF tag tree, which may not match the visual content order. Use View > Zoom > reflow then check that the PDF still has a logical reading order. Note: It can sometimes be difficult to guarantee a logical reflow order for PDfs with complex content. Go to Advanced > Accessibility > Touch up reading order and check that all images have text descriptions. If the text descriptions were present in the source Word document and the Convert to PDF option was used, the text descriptions should already be present in the PDF. Remove empty tags from the tag tree. Use the Tags panel to highlight and delete any empty tags from the tag tree. Tag decorative content elements as artefacts. Use Advanced > Accessibility > Touch up reading order to select a decorative element, and use the Background button to make the element an artefact. Use the Tags panel to check the structure of data tables. The <table>, <tr> and <td> tags should be used to give data tables the proper structure. Use the Tags panel to check that links are active. Active links should be tagged with the <link> tag. Use File > Preference > Accessibility to set a high contrast colour scheme, and check the PDF remains readable. Note: It may not be possible to make high contrast mode work in all PDFs, in which case you should be prepared to make a high contrast version available on request. Display the document title instead of the file name. Go to File > Properties > Initial view and select Document title from the Show drop down box. Once all the above steps have been taken, the PDF should be checked before it is published. Go to Advanced > Accessibility and select Full check. The PDF should pass the full check for WCAG 2.0 Level AA without any warnings. Ask a screen reader user to read through the PDF. If no-one is available to do this, use one of the following options instead. Non Visual Desktop Access (NVDA) is a free open source screen reader for Windows. It can be installed to the desktop or run from a portable USB thumb drive. With NVDA running, open the PDF and use the following commands to check the PDF: VoiceOver is the integrated screen reader with Mac OS X and all iOS devices. In Mac OS X turn VoiceOver on (or off again) using Command + F5. With VoiceOver running open the PDF and use the following commands to check the PDF: Thanks to the Department for Work and Pensions (DWP) for enabling us to incorporate its accessibility best practice guidance into this document.","description":"The best way to create an accessible PDF is to create an accessible source document. Well structured Microsoft Word documents make good source documents for conversion to PDF. When a source document is converted into PDF it is tagged. The PDF tag tree reflects the structure of the document, and it’s this structure that assistive technologies like screen readers use to navigate the document.","link":"/service-manual/design-and-content/resources/creating-accessible-PDFs.html"},{"title":"Forms","indexable_content":"Please check the form Cross browser support Putting it all together Rationale Styling form elements Basic structure Radios and checkboxes Aligning controls in a row Pre-checked radios and checkboxes Fieldsets and legends Hints Hidden labels Buttons Validation messages Text input fields Label positioning Validation messages Sass Example HTML Example HTML Example HTML Example HTML Nested fieldsets Example HTML Example HTML Example HTML Example HTML Example HTML Example HTML we already know the answer because it was given previously there is a good business reason to steer users towards a particular answer, for instance ‘Contact me by email’ may be preferable to ‘Contact me by phone’ to help manage callcentre workload there is a strong ‘common case’ bias towards a particular answer selecting none is a valid option (to be avoided for radios only, as they can’t be unchecked) we want an unbiased opinion without leading the user there is a legal requirement for the user to make a choice Re-type your email address Select at least one area of interest Chrome: No problems IE 8: V-aligned - all good IE 8: H-aligned - slightly ragged alignment IE 7: Nested fieldsets - legends are hidden in H-aligned forms IE 7: Validated option groups - lots of extra left padding IE 6: Option groups are aligning horizontally in vertically-aligned forms IE 6: Nested fieldsets layout is broken and legends are hidden IE 6: Labels with nested controls need ‘for’ attributes to work Light grey background: To make them stand out equally on a white page or coloured panel Inset border style: By convention people type into ‘holes’ cut into the interface Forms should be styled as per the examples on this page. If you’re using Sass in your project the GOV.UK forms mixin provides a configurable framework for styling your forms in this way. Use it in your Sass files like this: Check out the ‘create an account’ form example to see the different layout options in action. Wrap each control in an element with a class of ‘group’.          Label          Wrap your set of options in an ‘option group’ element.           Job offers          Networking          Business opportunities        Use nested inputs… or use a list… You might occasionally need to arrange form controls in a row, for instance if they have short labels and there are only a few options. To do this, wrap the controls in an ‘inline group’ element.               Male              Female            You may want to pre-check radios if: Do not pre-check radios if: Use these to break up forms into logical sections              First name                           Last name              There are times when you might want to treat a set of form controls like they were a single, compound control  (a date-of-birth selector for example). One way to do this is with a nested fieldset. On GOV.UK, when you nest a fieldset inside another, the legend is styled like a label. Note - if you're planning on doing this with left or right aligned form labels you'll need to wrap your legend text in a span. Blame inconsistent and generally poor support for legend positioning in browsers.            Full name                           Day               Day                Month               Month                Year               Year Hints can be placed above or below the relevant control.          Telephone         Include your country code                 Code         The three numbers on the back of the card                 Password         Make it at least six characters long          Use the ‘visuallyhidden’ class to hide labels. You need a really good reason to do this though.          Street                   Street line two                   Town/City                   Postcode          Buttons should be horizontally left-aligned beneath the form inputs (not necessarily left aligned with the labels, and not right aligned on the page). Nest rows of buttons in an ‘action group’ element. The primary action should be the first button in the group.            Full name                        See the seperate page on buttons for detailed guidance on how to style and word them. Summarise any validation errors at the top of your page like this: Each link should jump the user down to the corresponding form control. Add a ‘validation’ class to the control group and insert a ‘validation-message’ element.          Re-type your email address         Re-type email *          To see all the examples above in a single form, check out the registration form example. The framework provides support for top, left or right alignment because there are valid cases for the use of all three. The table below (from a great article on form design in Smashing Magazine) outlines the relative advantages of each approach: When a form is submitted, any validation messages are summarised at the top of the page. The messages link down to the part of the form they relate to. This helps users of assistive technology navigate around the form. The red bar connects the summary to the messages in the form and aids quick scanning of the form for errors.","description":"Forms should be styled as per the examples on this page.","link":"/service-manual/design-and-content/resources/forms.html"},{"title":"Grids","indexable_content":"Guidance Using the mixin Simple example Regular grids Irregular grids Cross browser support Don’t use this: HTML Sass Example 5,3 ratio example 2,2,1 ratio example 2,1 ratio example When a simple linear layout will work When a data table is more appropriate For full page layouts (it’s not that kind of grid) Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Item 7 Item 8 Item 1 Item 2 Item 1 Item 2 Item 3 Item 4 Item 1 Item 2 Item 3 Item 4 Item 5 Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Item 7 Item 8 Item 1 Item 2 Item 3 Item 4 Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Item 1 Item 2 Item 3 Item 4 Chrome, FF, Safari, IE9: All good IE 7,8: Regular grids are fine. Irregular grids use first-child rather than nth-child. For multiple rows you’ll need to pass in a $max-rows variable representing the maximum number of rows in the grid. IE 6: All grid elements display 100% width Use this mixin if you need to arrange content in a grid, or split part of a page into columns. You might want to do this for an image gallery, product catalogue or home page layout for example. It’s particularly useful if you don’t want to explicitly represent rows or columns in the markup. The mixin accepts the following arguments: $columns : The number of columns in the grid, or an array representing the relative width of each column. $min-height : An optional minimum height for grid elements. Useful if your grid elements contain varied amounts of content. $max-rows : Adds IE7,8 support for grids with varied column widths. See below for details. The mixin is tag-agnostic, so the elements can be list items, divs, paragraphs etc. Avoid applying border effects to the elements as this will throw out the widths. Instead, style the contents of those elements. At mobile screen sizes the grid elements switch to being full-width. Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Item 7 Item 8 You can create grids of equally-sized elements by passing in a single value representing the number of elements in a row.  The following examples are for demonstration purposes only, and not ones we’d ever recommend. Item 1 Item 2 Item 1 Item 2 Item 3 Item 4 Item 1 Item 2 Item 3 Item 4 Item 5 Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Item 7 Item 8 You can create grids of unequally-sized elements by passing in an array representing the relative widths of the elements in a row.  Item 1 Item 2 Item 3 Item 4 Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Item 1 Item 2 Item 3 Item 4","description":"Use this mixin if you need to arrange content in a grid, or split part of a page into columns. You might want to do this for an image gallery, product catalogue or home page layout for example. It’s particularly useful if you don’t want to explicitly represent rows or columns in the markup.","link":"/service-manual/design-and-content/resources/grids.html"},{"title":"Form example - Registration","indexable_content":"There was a problem submitting the form Example Enter your first name Enter your last name Re-type your email address Select at least one area of interest  Email  Telephone  Post This example form incorporates most of the basic form elements and lets you play with different label alignments. For a detailed breakdown of each element and how to code and style it, see our forms design pattern page. Click the label alignment options in the Sass snippet below to see how they affect the layout.      Label alignment:      top |      left |      right    Please try the following:              Title             Mr.Mrs.MissMs.Dr.Other              1. Enter your first name             First name *                                   2. Enter your last name             Last name *                               Day                 Day                  Month                 Month                  Year                 Year               Male              Female                         Enter email *                           3. Re-type your email address             Re-type email *                           Telephone             Include your country code                         Street                           Street line two                           Town/City                           Postcode                           Write a few short words about yourself                            Make this biography public                         4. Select at least one area of interest              Job offers              Networking              Business opportunities                       ","description":"This example form incorporates most of the basic form elements and lets you play with different label alignments.\nFor a detailed breakdown of each element and how to code and style it, see our forms design pattern page.","link":"/service-manual/design-and-content/resources/registration-form.html"},{"title":"Sass repositories","indexable_content":"Categories of Sass mixins Typography and Colours Responsive Design Cross Browser Further reading GOV.UK Typography and Colours Mixins for responsive designs Mixins for cross browser CSS    GOV.UK Typography and Colours     Mixins for responsive designs     Mixins for cross browser CSS    Sass lets us share blocks of code and techniques. GOV.UK has a collection of Sass files which are bundled up into a gem that enable us to quickly build pages that conform to our styles. Within the govuk_frontend_toolkit gem we have a collection of Sass which is designed to enable you to easily add GOV.UK styles. They can be categorised into three different things: The first is the key bit which makes GOV.UK projects look the same. There are a collection of pre-defined font-sizes that we use on GOV.UK. There is a mixin for each one, for example heading-26. These also include a standard amount of whitespace around the text to help with vertical rhythm on the page, spacing things out nicely. The second is a way to develop responsive sites while not giving older browsers a bad experience. That is to still deliver a desktop stylesheet to older versions of IE which don’t understand media queries, and serve the correct media queries to modern devices. As a side effect of this approach we also have a very easy way of writing IE specific CSS in the middle of our stylesheets without using hacks. The third is a way to keep browser specific styles out of our projects. We encapsulate new or non-standardised CSS into mixins. In this way we can easily update all the instances of a new CSS property without having to do a search and replace across all of our projects. For a full list of the different Sass techniques we have available look at the readme on the govuk_frontend_toolkit gem. Some of the typography mixins we have available are: heading-36, heading-24, copy-19. They can be used as such: It is generally advised to write your markup with a mobile and up attitude. That is, add desktop styles to an otherwise narrow screen stylesheet. In this way you only add styles for desktop and don’t reset desktop styles for a mobile device. This can be done as such: There are two types of cross browser technique. There are some which are just for encapsulating vendor prefixes. Then there are some for using different methods to achieve a consistent effect. An example of these are: The border-radius line here is designed to use the different border-radius implementations to create a standard border-radius. The contain-floats however, uses a cross-browser techinque to ensure that the element wraps all of the floated elements within it. It is not a property that normally exists in CSS but is something we often need to do and don’t want to use different techniques everywhere. For more information check out the Readme on the govuk_frontend_toolkit gem","description":"Sass lets us share blocks of code and techniques. GOV.UK has a collection of Sass files which are bundled up into a gem that enable us to quickly build pages that conform to our styles.","link":"/service-manual/design-and-content/resources/sass-repositories.html"},{"title":"Shared asset libraries","indexable_content":"Why we do this Where to find our code Linking to shared assets Keeping shared assets up-to-date Static Frontend govuk_frontend_toolkit Single serve assets are recommended by Yahoo! as a performance best practice All used libraries are kept at known versions, which guarantees compatibility and reduces the risk of security vulnerabilities through external server compromise. Static Frontend govuk_frontend_toolkit Shared asset libraries are helpful for using the same frontend and branding on multiple services. When building services around patterns and consistency, it’s important to share your frontend assets so that they can be easily reused as required. There’s are two additional benefits to this approach: The templates on GOV.UK are constantly changing as we react to user feedback and evolving best practice, so the best place to find them is on our open source frontend libraries - more explanation of these to follow: The static repository contains our wrapper templates, our basic CSS, and our basic Javascript. Anything added to this repository is built to be used across the entire gov.uk website and is used to provide a consistent look and feel. The frontend repository contains the wrapper templates and views for many of the various pages used across gov.uk. It gives a good indication as to how to structure HTML and assets together. Please see Sass repositories for more information on this repository. The template code contains direct links to CSS and JavaScript assets hosted on the GOV.UK domain. We recommend that you leave these links as is whilst you develop your service (as opposed to linking to your own copies of these files). That way, you’ll always be using the latest version of the assets and when they change you can identify and resolve any conflicts immediately. Once the service is ready for production we’ll need to decide whether you should continue to link to the assets in this way or whether you should now use your own copies of them. Please contact GDS to discuss this at the appropriate time. GOV.UK is continuously being improved, which means that template and asset code changes regularly. All services on GOV.UK are expected to keep their templates and assets up-to-date. How you do this will depend on how you implement the templates and where your service is hosted. Please contact the GDS team to discuss options.","description":"Shared asset libraries are helpful for using the same frontend and\nbranding on multiple services.","link":"/service-manual/design-and-content/resources/shared-asset-libraries.html"},{"title":"Typography","indexable_content":"The GOV.UK typeface Using New Transport Colour contrast Type size Further reading Why we’ve chosen Transport. Shared asset libraries Sass Repositories Colour palettes Accessibility requirements Services should use clear, easy to read type, with consistent styles and a clear hierarchy of information. GOV.UK uses the typeface New Transport, cut especially for Government use. This typeface is embedded in the GOV.UK CSS and is served to browsers via a WOFF file (or an EOT file for Internet Explorer 8). The font is hinted to display well on all browsers. Older browsers do not receive the typeface. We currently use two weights of New Transport: Light and Bold. Italics should not be used. The number of different type sizes on a page should be kept to the minimum, and only one typeface/font should be used on each website. New Transport is not licenced for use outside of the GOV.UK domain. When your service goes live you’ll be given access to the typeface. If the service uses numbers in columns or tables, you should change these to use the tabular number version of New Transport. This replaces the standard numbers with new versions that have a fixed width. The main noticable difference is a base on the character 1. GDS has used this on the Performance Platform and Trade Tariff. Text must have enough contrast against the background colour to be readable. This should be tested to conform with our Accessibility requirements. Generally we use type in #0B0C0C against a white or light grey background. Links should be blue and underlined - see Colour palettes. Type should be large enough to be easily read. This is generally larger than many current websites: 36px for headlines, 19px for body text. This can be included using default styles in scss from the Frontend Toolkit. These include line height spacing that works across browsers.","description":"Services should use clear, easy to read type, with consistent styles and a clear hierarchy of information.","link":"/service-manual/design-and-content/resources/typography.html"},{"title":"Writing for transactions","indexable_content":"Writing microcopy Writing help text Transaction start pages Transaction end pages Further reading General guidance Asking for personal details Inline help Progressive disclosure Pop-up help window Describe the service Set expectations Use sentence case Address the user directly Follow the style guide Don’t use ‘please’ on labels - but give polite, clear, short instructions Don’t use colons after labels Don’t add ‘your’ to labels, for example: ‘Your name’, ‘Your address’, unless you have a page with multiple people where you need to differentiate - for example: ‘your name’, ‘partner name’ ‘First name’ not ‘Christian name’ ‘Middle names’ ‘Last name’ not ‘Family name’ ‘Age’ ‘Date of birth’ (not ‘DOB’) that they have successfully completed the transaction what further actions they need to perform, and when what further actions they can expect from the service, and when who they should contact with any queries or complaints about any related information and services Microcopy is the term given to the short words or phrases used during transactions, for things like buttons, form labels, help text, alerts and questions. Your first strategy when it comes to help text is to design a service that’s so intuitive it doesn’t need any. For this reason it helps to stick to interface design conventions where possible. Avoid innovation for its own sake - the real innovation is an easy to use government service. Sometimes though, users need a little help. Here are some ways of providing it.          Telephone         Include your country code        Use this to provide examples for unfamiliar information requests or formats. This refers to help that appear on a page when the user interacts with a link, but remains hidden otherwise. It’s useful for delivering important help to some users, without distracting or confusing everyone else. For this reason it’s particularly useful for dealing with edge case user scenarios. This is the nuclear option and should only be considered as a last resort. Popups or lightboxes should ONLY be used for delivering help relating to the concepts or terminology involved in a service or transaction. If you’re using one to explain how to USE a service then you need to go back and make the interface more intuitive. The start point for any GOV.UK transaction should be a page on the GOV.UK domain. Users should not be able to jump to a later page in the service via some other means (eg Google). The design of the start page will be determined by the nature of the service and its audience. All start pages should meet the following goals: The page should include the name of the service, expressed as an action if possible (‘Renew your passport’, Claim for disability allowance’, ‘Book a driving test’ etc.). If you need to, include a very brief description of the service. People will tend to base their expectations of what a transaction involves on their experience of other digital transactions, for example, online shopping and banking. If your service has features that do not match these expectations then you should inform your users of this as early on as possible, ideally on the start screen. Users should be told about any financial costs or long waiting periods involved. If they’ll be asked to provide relatively obscure information let them know so they can get it ready. If there are specific eligibility requirements for the service let people know. If the eligibility requirements are complex you should consider using the Smart Answer format to help people understand whether or not they are eligible. It’s better to ask a few questions up front (and explain why you’re doing this) than to let people invest time and effort in a transaction only to discover part way through that they’re not eligible to use it. The end point of any transaction should be a page on the GOV.UK domain. These pages should let the user know: Information on designing forms that work on the formsthatwork.com site","description":"Microcopy is the term given to the short words or phrases used during transactions,\nfor things like buttons, form labels, help text, alerts and questions.","link":"/service-manual/design-and-content/resources/writing-for-transactions.html"},{"title":"Working with prototypes","indexable_content":"Building prototypes Ideas can be ugly The best way to understand a product is to try to build it. Prototyping is an essential process to get a feel for the shape and edges of a product, to begin to estimate the work involved and to provide something you can quickly test with real users. This is a vital part of a process often known as ‘product discovery’: understanding your users and their needs, developing a sense of how you might serve those needs, and estimating the effort involved in building and running a service to do so. We built alpha.gov.uk as a prototype of what would later become the single domain www.gov.uk. It was built quickly without much concern to scalability, resilience, or any of the other considerations of a ‘real’ product, because none of those matter unless the core concept is sound. That allowed us to get feedback early and also understand some of the trickier concepts we would have to grapple with such as the fuzzy lines between different audiences, the operational processes that would be required, and so on. Prototyping can start on paper with sketches. Hand-drawn sketches of what a service might involve are a good way to begin thinking things through. We encourage everyone to get to running code as quickly as possible. It’s only when you start working in the same medium your users will be using (for online services that’s generally a web browser, but it may also be via an API) that you can really understand the experience you need to provide. The smart answer format for GOV.UK began as a series of paper sketches refined over a week by a small team. That process gave them a good sense of the boundaries of the problem they were trying to solve. As quickly as possible we prototyped the format using HTML and javascript so that it could be experienced in a web browser. That revealed more constraints, such as the fact that users might expect to be able to go back and amend an answer without realising that would change their whole journey through the format. This allowed us to quickly adjust the user interface to be clearer for its users before we started the work of building out the full system. Running code also forces you to think about your integrations with other services and how they might work – do you need to send email? integrate with an existing database? and so on. A prototype will rarely actually include these integrations but having a clear picture of them is vital if you’re going to understand the real effort involved in building and operating the service.","description":"The best way to understand a product is to try to build it. Prototyping is an essential process to get a feel for the shape and edges of a product, to begin to estimate the work involved and to provide something you can quickly test with real users.","link":"/service-manual/design-and-content/working-with-prototypes.html"},{"title":"Writing government services","indexable_content":"Writing terms and conditions How to write Guidance Tone and style Guaranteed success Why we do this Guidance/Tool Why we do this Further reading Introductions Service titles Page titles Questions Don’t use jargon Spin Subheads Inclusive Responsibility How users read Style guide This section gives details on naming your service, tone, style, questions and why we write in this way. You may want to read: how users read this will tell you more about user reading behaviour - which will help when designing the content for your service. All services should follow the GOV.UK style guide. The way we talk to users is the same on all GOV.UK products. The only difference is the format. Services should be intuitive and government services should provide an exceptional user experience. You shouldn’t need many words at the top of the page and none of it should be instructions on how to use the service. If you need to manage a user’s expectations, tell them on the pre-transaction page, not on the service page. If you do have to add text, keep your sentences very specific, short, active (keeping the subject and verb close) and in plain English. Users won’t want to read much on a tool or transaction. They will want to click, answer questions and get to the end as quickly as possible. It’s unlikely they will read much at all, so only tell them what you need to. Don’t use terms like ‘my benefits’ etc. This will mean different things to different users. Some will think it is a list of all the benefits they have had, some will think it is an online account to manage benefits and others won’t know what to think. Don’t use puns or clever terms. Keep the service title clear, short and specific. Keep page titles specific to the questions on the page. If the page is just about the user’s address, call it ‘your address’. Don’t call it ‘about you’. However, if you are covering a number of different elements of ‘about you’ on the page - you can. Make sure you need any question you include in your service. Don’t include questions that you think you might need later or for another part of your organisation. Keep the transaction as specific as possible to the task the user is trying to complete. Jargon is used differently by different people, so you will be opening up the language to misinterpretation. We lose trust if we use spin or try to ‘convince’ a user of something. Give them the facts they need and don’t try to encourage. The facts should speak for themselves - if the information is clear enough, the user will make their own decision. You use fewer eye muscles to look down than you do across. That might be why users prefer to scan down a page and not across. By providing clear, specific subheads you are helping the user to scan the page and find the information they are looking for. In tools and transactions, it’s unlikely you will have a lot of information to break up but if you do, use subheads. The only way you will know if your service works, is to test it with users. Then modify and test it again. GOV.UK is to open up government information and services to anyone who is interested or needs to interact with government. As government we need to be inclusive - we can do this through our design and language. By making the design open and easy to read, the code clean and accessible and the words easy to understand, we are opening up government to all. Citizens of the UK can’t go to anyone else for many of our services. Or if they do, to get a better, clearer experience, they usually have to pay for it. If we make the information hard to read or the design so distracting or difficult that the user doesn’t understand what we are trying to say - they could end up doing it incorrectly or not doing it at all. This could lead to a fine. Or in very extreme cases, jail. Good design and words isn’t a desire or an ‘aim’ - it is our responsibility. The terms and conditions of your service must be understandable to the majority of users. GOV.UK’s terms and conditions were written to conform both the legal terms defined by the Treasury Solicitors Department (TSol) and to the style guide of GOV.UK. These form a template for other services to use, and cover many of the conditions that operational services published as part of GOV.UK will require. If your service needs additional terms or conditions added to this list then these should be written clearly, in a way that most users will be able to understand. In practise, this means unpicking lots of the legal language and giving users concrete examples to help them understand what a specific term or condition means. Adding that term or condition should be done in consultation with GDS. Directgov proved to be a good model for this, as their terms and conditions were clearly written and easy to understand. GOV.UK continued this, with additional pieces of information added as transactions and services were incorporated into the site.","description":"This section gives details on naming your service, tone, style, questions and why we write in this way.","link":"/service-manual/design-and-content/writing-government-services.html"},{"title":"Awarding the standard","indexable_content":"Assessment throughout development Go Live panel Approve: The service should be awarded the standard, and is ready to be launched on GOV.UK. Resubmit: The service is nearly ready, but there are some outstanding evidence gaps. The panel will agree a date to reconvene (ideally within 3 weeks) to consider new evidence or updates. Reject: The service is unable to demonstrate evidence for criteria seen as essential by the panel. The process by which services achieve and keep the standard is intended to maximise knowledge sharing, ensure fair and consistent assessment, and avoid ‘one size fits all’ tickbox-style exercises. In order to achieve the standard and have their service launched on GOV.UK, the responsible service manager will ultimately have to prove their service meets the criteria of the standard to the unanimous satisfaction of a Go Live panel including experts from within and outside government. The panel will apply common sense and a degree of flexibility to their assessments. However, all services within the scope of the standard will be assessed against the same set of criteria. The Go Live panel will make their assessment on the basis of the written evidence contained in the service’s public blog, which is a regularly updated record of how the service has been designed and built, and a live demonstration of the public beta service. The department or agency that owns the service is formally responsible for ensuring it achieves and maintains the standard, irrespective of whether it is designed, built and operated by in-house, external or mixed teams. For complex services, we expect the process will take around 18 months to two years, but there are no fixed deadlines for how long it should take a service to reach the standard. As a result, having feedback throughout the process is really important, reducing the risk of lengthy projects going off-track. To enable this, and support an agile approach to design, progress against the standard will be monitored as part of existing spending control processes. Departments currently need Cabinet Office approval for digital spending. To simplify this process, a dedicated account manager will work with each department in order to help prioritise their projects. When a department makes a submission to their account manager for spending approval on services that fall within the scope of the standard, GDS will assess whether the work completed so far is in line with it. If the service redesign or build process is at an early stage, GDS will make approval conditional on the proposed service being built to meet the standard. If the service redesign or build process is at a more advanced stage, GDS will make recommendations for additional spending on the basis of the evidence available for a service being on track to meet the standard. This evidence will be taken from the team’s public blog. GDS will also explicitly state when the team should return for further approval. The point of having multiple loops through this process is to effectively support an iterative approach to service design. Relying on the public blog for evidence of progress removes the need for additional paperwork. It will also provide departments with targeted support and feedback on whether they are on track to meet the standard far in advance of a Go Live panel, in order to take any corrective actions earlier. The number of loops a project will go through will vary, though GDS will seek to minimise wherever possible. A Go Live panel will make the final decision on whether a service should be awarded the standard and be launched. The panel will convene within 2-3 weeks of a request being made by the responsible service manager. It will be chaired by GDS, and include a Digital Leader and a service manager (not from the presenting department) on the panel. It will also include other independent experts if suitable and available. Other Digital Leaders and service managers will be free to attend as observers. The panel will ask questions about the service itself and the evidence set out in the team’s public record. At the conclusion of the meeting, the panel will:","description":"The process by which services achieve and keep the standard is intended to maximise knowledge sharing, ensure fair and consistent assessment, and avoid ‘one size fits all’ tickbox-style exercises.","link":"/service-manual/digital-by-default/awarding-the-standard.html"},{"title":"Failing to meet the standard","indexable_content":"Failure during service design Failure to pass the Go Live Panel Failure of a live service to meet performance goals during the service’s design, prior to going live rejection at a Go Live panel a live service falling below the performance targets approved at launch A service may fail to meet the standard at three points: If there is evidence that a service is being designed in a way which is not in line with the standard, or there is no public written record of progress, GDS will raise the issue with the responsible service manager and Digital Leader and suggest corrective action. Service progress towards meeting the standard will also be assessed at every spending control point the service passes through. If the department cannot provide sufficient evidence that the work completed so far is in line with the criteria and evidence requirements of the standard, further spending on the project will not be approved. If the business case is rejected, GDS will stipulate what the service must provide evidence for in order for funding to be released. If the Go Live panel does not produce unanimous approval, the service will not be awarded the standard and will not be linked to from GOV.UK. If the panel does not award the standard, the Chair will provide feedback to the service manager and Digital Leader on what needs to be rectified. The service manager and Digital Leader will then be invited back to present a second time to the panel on an agreed date. If the panel’s verdict demanded relatively minor changes or a small amount of additional evidence, this second assessment can be completed through correspondence. For more significant changes, a second meeting will be convened. If the service fails to pass the Go Live panel on two occasions, the Cabinet Office will write to the responsible Minister explaining why the service has not yet been awarded the standard, and what remedial actions are required. If performance levels consistently fall below those set out in the evidence presented to the Go Live panel over a 3 month period after a service has gone live, GDS will a) request a note from the service manager which gives evidence against the criteria above, and b) convene a Performance Panel. The Performance Panel will be chaired by GDS and include representatives from other departments and external experts when suitable and available. The responsible service manager and Digital Leader will present to the panel, explaining why they believe performance levels are below levels expected at launch and set out what remedial actions they intend on taking to rectify the issues within the next 3 months. The panel will approve this plan, or suggest additional actions. It will approve changes to the performance targets set at launch only if there is compelling evidence that the user needs have demonstrably changed. It will also request monthly updates against the actions. If after a further three months the performance issues still persist, the Cabinet Office will write to the Minister responsible for the service, explaining that the service is failing to meet the standard, and that a ‘health warning’ will be placed on the start page of the transaction explicitly stating that the service does not meet the standard, apologising to users, and requesting their feedback. Once performance returns to the levels expected and agreed at launch, this warning will be removed. If there is still no improvement a month after this point, GDS will recommend whether the service should be taken offline, have no link from GOV.UK, and be rolled back to an assisted digital contingency that does not incur significant unintended expense for the taxpayer.","description":"A service may fail to meet the standard at three points:","link":"/service-manual/digital-by-default/failure-to-meet-the-standard.html"},{"title":"Maintaining the standard","indexable_content":"they continuously update and improve the service on the basis of user feedback, performance data, changes to best practice and service demand they contribute to best practice developed across government, and share knowledge through the service manual high levels of user satisfaction are consistently maintained in the digital and assisted digital service high levels of transaction completion are consistently maintained in the digital and assisted digital service cost per transaction is decreasing in line with plans submitted ahead of the service’s launch digital take-up is increasing in line with plans submitted ahead of the service’s launch and assisted digital support is targeted at the people who really need it all new source code is open, reuseable and published under appropriate licenses (or else there is a convincing explanation of why this cannot be done for specific subsets of the source code) The launch of a service on GOV.UK is only the beginning. Once it has been published, users are the arbiters of its quality. Having designed the service to be iteratively developed using performance data and user insight, service teams will have all the tools and techniques they need to continuously improve what they offer. Performance against the four key indicators will be tracked and publicly displayed. To keep the standard, the service team must demonstrate that:","description":"The launch of a service on GOV.UK is only the beginning. Once it has been published, users are the arbiters of its quality. Having designed the service to be iteratively developed using performance data and user insight, service teams will have all the tools and techniques they need to continuously improve what they offer. Performance against the four key indicators will be tracked and publicly displayed.","link":"/service-manual/digital-by-default/maintaining-the-standard.html"},{"title":"Providing evidence","indexable_content":"How to get a blog How to write a blog post Writing for the right audience Having high quality, regularly updated and publicly available evidence to demonstrate how services have met the standard is really important. It provides the whole of government with a repository of information to use in other similar service transformations, and an easy way of sharing ideas within and across departments. We expect most teams to generate this information in the form of a public blog, published through the GOV.UK blogging platform. Publishing this information on a public blog means that people from across (and outside of) government can follow the progress of a service, allowing teams to quickly get advice and test their assumptions with a wider community. It also means that there is published audit trail of progress that can be used to support the decisions of the Go Live panel. GDS is setting up a GOV.UK blogging platform to help services provide evidence in this way. It will be ready from the beginning of May. More details about how to set up a blog will be available soon. If your department or team already has a blog, there’s no need to start an additional one. Let us know where it is, and GDS will make sure it is linked to from the GOV.UK platform – so there is one place that hosts all the service team blogs in government. The manual has plenty of useful resources explaining how to write effectively for an online audience. The guides on how government should write and how users read are a good place to start. To get sense of the style and tone, look at the GDS or Ministry of Justice blogs. Service team blogs will be read by lots of different people. First, they will be read by the service’s users, the public. Amongst other things, that means resisting the use of acronyms and jargon as much as possible. Following this rule will also help senior internal stakeholders to use the blog for a quick overview of the team’s progress. They will also be read by the Go Live panel to help determine whether a service is ready to be launched. Clarity on what has been done and why, and pointing to evidence for taking decisions on service design will be what they look for in their assessments. Woolly words and unsubstantiated assertions will not help. Other teams in government will read the blogs to find out how people going through similar challenges overcame them. Blog posts should therefore be written with some consideration of any broader application an approach, tool or technique may have. That applies as much to things that didn’t work as things that did.","description":"Having high quality, regularly updated and publicly available evidence to demonstrate how services have met the standard is really important. It provides the whole of government with a repository of information to use in other similar service transformations, and an easy way of sharing ideas within and across departments.","link":"/service-manual/digital-by-default/providing-evidence.html"},{"title":"Scope of the standard","indexable_content":"completely new or going through a redesign? processing (or likely to process) more than 100,000 transactions every year? the responsibility of a central government department, agency or non-departmental public body? being launched in April 2014 or after? The Government Digital Strategy explained that the scope of the service standard would not cover all of the 650-plus transactional services government provides to citizens and businesses. Government services cover a vast variety of activity, from the mainstream to the highly specialised. Applying the same standard to services dealing with a handful of transactions every year that was applied to those handling millions was unlikely to be helpful. To establish whether your service needs to meet the service standard, answer the questions below. Is your service: If you have answered yes to all of the questions above: The service must meet the standard before it can go live on GOV.UK. If you have answered no to one or more of these questions: Your service does not have to meet the standard, although it will still be a useful guide to development. You should also try to answer the same questions that would apply to any service transformation (‘Is the project cost-effective?’, ‘Should it be a priority for action now?’ etc)","description":"The Government Digital Strategy explained that the scope of the service standard would not cover all of the 650-plus transactional services government provides to citizens and businesses. Government services cover a vast variety of activity, from the mainstream to the highly specialised. Applying the same standard to services dealing with a handful of transactions every year that was applied to those handling millions was unlikely to be helpful.","link":"/service-manual/digital-by-default/scope-of-the-standard.html"},{"title":"Accessibility testing","indexable_content":"Carrying out accessibility testing When not to use it Accessibility audits Types of participants Cost Timescales cognitive and learning disabilities eg dyslexia or attention deficit disorders visual impairments eg total and partial blindness, colour blindness, poor vision  auditory disabilities which can also affect language  motor skills impairments eg those affected by arthritis, strokes, RSI Accessibility testing is very similar to usability testing, in that it is about ensuring that a product or service is easy to use for its intended audience. That audience includes users who access the service via a range of assistive technologies, such as screen readers, voice recognition software, trackball devices and so on. It’s important to consider a range of disabilities when you are testing any product or service, including those with; Section III of the Disability Discrimination Act (DDA), also states that websites should be accessible to blind and disabled users. The Code of Practice for this section of the DDA was published on 27th May 2002. The elements most relevant to website designs are set out in this blogpost. Most accessibility testing is typically conducted after an accessibility audit has been conducted. Accessibility testing with participants with a range of needs is best conducted in the participants’ own homes. This is because they will often have things set up to suit their individual needs and the whole process is less stressful for them eg travel, environment. It is often difficult to conduct accessibility testing early on in the process of service design. The service must be fairly robust in order for it to be evaluated by people using assistive technologies eg a screen reader will read out the contents of a web page so the code needs to be well structured.  For accessibility testing to be worth doing, real content needs to be in place rather than ‘dummy text’ if it is to be assessed by those with any cognitive or learning difficulties. Interactive elements such as Calls To Action, hyperlinks, forms etc must be in place if motor skills are being assessed. Full lab-based accessibility testing is not necessary for every project. An accessibility audit may be a more efficient and cost-effective way to review a service, depending on its typical user needs. Accessibility audits are an alternative to standard accessibility testing. An accessibility audit involves an accessibility expert reviewing the site or service, highlighting all accessibility issues and making recommendations for fixing them.  They would typically use assistive software used by disabled web users (eg a screen reader) to effectively carry out the audit. See the W3C accessibility guidelines for further information. Accessibility audits are cheaper and quicker than accessibility testing but rely primarily on the expertise of the person conducting them. Disabled participants should be included as part of a wider user testing recruitment process. The numbers will be small, but should aim to capture a range of disabilities and assistive technologies. This is a harder to reach audience so the cost of doing so can be relatively expensive. Recruitment is best conducted through specialist organisations or agencies eg RNIB, etc Additional costs can be incurred if these participants are travelling to your testing location and/or require specialist assistance with carers or travel. Recruitment via an agency can take up to 2 weeks, depending on the target audience. Conducting testing sessions can take between 2-3 days depending on the number of participants. This may vary depending on whether the sessions are lab-based or structured sessions in a ‘home environment’. Analysis and reporting should take up to a week. These estimates are dependent on the project’s scope, and the availability of ‘robust’ testing assets.","description":"Accessibility testing is very similar to usability testing, in that it is about ensuring that a product or service is easy to use for its intended audience. That audience includes users who access the service via a range of assistive technologies, such as screen readers, voice recognition software, trackball devices and so on.","link":"/service-manual/making-software/accessibility-testing.html"},{"title":"Analytics tools","indexable_content":"High level requirements Privacy Vendor comparison Configuring analytics tools Further reading the total cost of ownership as well as cost in comparison to turnover of service the volume of data being sampled who owns the data (it should be your organisation!) the cost of additional profiles and/or custom variables the admin system users have access to whether it is hosted by the vendor or in-house whether it tracks offline channel usage whether it provides a comprehensive set of standard reports (including social interactions and multimedia capturing) it must provide an open API with no export restrictions if it can measure transactions through funnel analysis and measure goals support and training the cookies it requires do not collect and process any personal information (the terms and conditions of your analytics provider will probably expressly forbid you from doing this) turn off any data sharing (some suppliers may collect data anonymously for internal benchmarking) anonymise IP addresses that your analytics provider collects, by removing the last octet of the address obtain and review your vendor’s privacy and security policy you should own and be able to export analytics data (pay attention to terms and conditions for any free products) does the solution meet the EU privacy directive and the European Commission’s Directive on Data Protection? where is collected data held? do data centres meet EU/British data security standards? how long is data held for? what will happen to the data on termination of the contract- can you export it? data aggregation and sharing (does the vendor mine your data for cross-customer benchmarking/trends or to provide usage data to any advertising channels) what access your vendors employees have to your data (make sure there are adequate administration tools to control appropriate access for your own staff) have you installed web analytics software? have you configured your web analytics software with the appropriate conversion funnels? do you have the capability to run user satisfaction surveys? do you have the capability to do A/B testing and multivariate testing? About analytics Web Analytics Tools Comparison: A Recommendation Old, but thoughtful Analytics tool comparison Enterprise Web Analytics: A Buyer’s Guide Occam’s Razor by Avinash Kaushik has a wealth of useful, easily digestible information on analytics Web Analytics Demystified and the Digital Analytics Association have free whitepapers. Conversion Funnels What is a Conversion Funnel? Blog article by Morgan Brown with a good discussion on user flows and conversion funnels There are various web analytics tools available to help you measure how people are using your service. You will need to assess how well a particular tool meets your needs before deciding which one to use. This guidance describes some of the criteria you should consider and reviews some of the main analytics tools against them. When deciding which analytics tool is most appropriate for your service, you should consider the following: For each of these criteria, you should identify which are fulfilled as part of the standard quoted package and what is charged for any additional features. The privacy and security of data is of the utmost importance. Make sure your analytics solution and processes take the following into account: There are a range of digital/web analytics vendors in the market-place, together with open source solutions. A search for Analytics Tools Comparison provides a number of useful resources where you can compare the capabilities and strengths of different services. (See some examples in Further reading below). Install and configure analytics tools that meet your needs. Where possible, use platforms that enable the data to be piped automatically into other systems. Using APIs (Application Programming Interfaces) will stop you having to input data manually and allows for aggregation across multiple platforms. You will need to answer the following: A selection of sites that provide vendor comparison information: For information on digital analytics: For transactions, it’s important to understand funnels:","description":"There are various web analytics tools available to help you measure how people are using your service. You will need to assess how well a particular tool meets your needs before deciding which one to use.","link":"/service-manual/making-software/analytics-tools.html"},{"title":"APIs","indexable_content":"Guidance Consuming and using APIs Further reading Build an API by building with the API Just use The Web Give each thing a bookmarkable URI Use HTTP methods as Tim intended Representations are for the consumer Names reinforce conventions Document by discovery … and example Explicitly set expectations Be public by default Practice service evolution: Code Integration Testing Service Agreements and Resilience JSON for convenient processing in most programming languages JSONP and JSON with CORS for client-side JavaScript CSV for importing into spreadsheets Atom for feeds. iCalendar for events vCard for name and addresses KML and geoRSS for geographical data m3u for playlists build for forwards compatibility by gracefully handling content that is unexpected (The robustness principle — Postel’s Law explains the ability for The Web and Internet to evolve, though you shouldn’t ignore protocol errors, corrupted, or invalidly formatted content) preserve backwards compatibility with existing consumers of your API, by sending expected fields and employing sensible default values for missing fields. Eschew changes to the semantics of content, eg don’t change a title field from meaning the title of the page, to the meaning the prefix for a name to the person’s job title. The API Craft Group is a reasonably active public forum for discussing publishing APIs. The Open Web Application Security Project (OWASP) maintains a large repository of security information applicable to building APIs, a including a REST Security Cheat Sheet. The WhiteHouse are developing API standards which are largely compatible with this guide. Martha Lane Fox’s report called for government to act as a “wholesaler, as well as the retail shop front, for services and content by mandating the development and opening up of Application Programme Interfaces (APIs) to third parties.”  This section is a set of guiding principles for exposing a digital service as an API. When building an API there is always a danger of building the wrong thing in the wrong way for the wrong people. This is especially a risk in the absence of a developer community driving the needs behind the API. The simplest way to ensure your API is useful and consumable is to build a website using your own API. Building a Website leads to considering how to best model content and data in terms of bookmarkable resources, and ensures data is presented in human as well as machine readable representations.  Becoming a consumer of your own APIs not only validates your API, but exposes services on The Web. Consider an API to be a part of a Website. Provide links to machine-friendly formats from human readable pages, and enable agents to easily construct URLs which link to human-friendly representations of pages. Use standard formats for content, and follow established Web patterns for authentication. Building a service to enjoy mass adoption and support from a wide disparate community of developers and programming environments whilst being able to reach a world-wide audience is difficult. Whilst proprietary and open technologies abound for machine-to-machine communication, none combine the interoperability, reach and ability to scale to compete with The Web. Standards are powerful agreements, and nowhere are agreements more quickly established and adopted than on The Web. Using HTTP and URIs, the core technologies of The Web, together with emergent standards such as JSON and OAuth changes a Website from a retail shop window into a wholesaler, meeting our design principle to Build digital services, not websites. Expose data as a set of resources, offering a clean URL for each thing, and each collection of things. Only use query strings for URLs with unordered parameters, such as options to search pages. Consider creating URIs for different granularity of resources. For example, /members.json could return a list of names, whilst /members.json?detail=full could return detailed information about each member in a list. These principles enable network effects which arise through linking and allow information published beyond the Web, sent in alerts email, SMS, XMPP and other messages to link back to the canonical content, on The Web. Ensure all HTTP GET requests are safe, and actions which change state are conducted using a POST, PUT or DELETE method. Use PUT and DELETE with caution, as they are commonly blocked by firewalls, intranet proxies, hotel Wifi and mobile operators; always offer a POST alternative. Avoid HTTP methods which are not well defined, such as PATCH. Offer content for each thing as a human-readable HTML, with links to content in alternative machine-readable representations: Where possible, also offer other formats most suited to a specific domain, such as: This advice builds on our more general guidance on data and content publication formats. Include hyperlinks to alternative representations as link headers as well as in content. Consider also encoding meta-data inside HTML content using semantic markup: Microformats. RDFa or schema.org. The representations supported by an API for input will vary depending upon the complexity of the action, but where possible should include application/x-www-form-urlencoded to allow the construction of simple POST forms. Use names for fields, formats and path segments in a URI path consistently across your API. Establish conventions others may easily follow, and anticipate. Where possible, reuse names widely used elsewhere on The Web, as with the Microformats naming policy. Building a Website which exposes the data through links, and services through HTML forms encourages exploration and leads to discovery through hypertext. Provide documentation for your API using examples. Collect how people are using your API, especially link to any open source projects for projects, wrappers and programming language libraries. Provide simple ways to experiment, as with The Guardian API explorer. Be clear in Web pages and other documentation as to the security, availability, rate-limiting, expected responsiveness of the platform and the provenance of data, so consumers may plan their commitment to using your API. Lower the barriers to others using your data; don’t demand registration or API keys for public data. Open data increases the number of people able to use your data and service, and leads to feedback loops where consumers become motivated to resolve issues at source, feeding back issues and correction to your service and the data within. Where content is sensitive, or requires authentication, use encryption (HTTPS) and a standard authentication such as Basic Authentication or OAuth, depending upon the sensitivity of your content. Where a revolutionary change is unavoidable, communicate a breaking change by changing the URL. When changing URIs, continue to honour old consumers, possibly use a redirection. Cool URIs don’t change. Don’t do everything yourself (you can’t). Sometimes the functionality your service needs will be provided by other parts of your organisation, other government departments or by reliable third parties via APIs. Most modern digital services are built on top of a wide range of APIs. This allows each part of the service to focus on its core responsibility rather than constantly reinventing the wheel. When consuming APIs you should be careful to keep the integration with your code clean and distinct. This is important to ensure that you can swap between providers or update to new versions of an API without making substantial changes to your core code.  At GDS we encourage the use of adapter code that is entirely focussed on interfacing with the system and mapping code that will provide the linkage between your code’s domain model and the concepts and services provided by the API. You should consider carefully how you intend to test your integration with the service. In day to day development you will want to be able to test your code without making (computationally or potentially financially) costly calls out to third party services so you should come up with a way of providing mock versions of those APIs. For full system tests, however, you will want to test the full flow including the third-party service so an automated mechanism should be built for that. Many of the GOV.UK publishing applications send emails to provide alerts for content designers. When running tests we don’t want to send lots of fake emails so we swap the normal email adapter for one that logs the emails it would have sent. This lets us test our code is doing the right thing without depending on external services. Our ‘data insights’ code involves significant interactions with Google Analytics. It wouldn’t be practical to test this by sending events to Google, waiting for them to be processed, and then reviewing the results. Our developers therefore built a mock service that can be run alongside tests and provides a dummy version of Google’s API that lets us check the right data is being sent. Our publishing systems make use of a single sign-on service. In most of our tests the interaction with that service are mocked so the applications’ tests can be run in isolation, but we also have a suite of smoke tests that run in our preview environment and use dummy accounts to ensure that the full authentication and authorisation flow is working. The Licence Application Tool integrates with a number of third-party payment services. It makes use of test accounts with those services to verify it is able to communicate with them and is sending the right data to complete payments. By depending on a third party API you could very easily be tying your service’s availability to that of the third party. In some cases that may be acceptable, but often you will want to ensure that you have a fallback plan in place. The details of that fallback will vary according to your service. It may be that you will need to offer the user the opportunity to use an alternative service, or queue the action to take place later. That could be an automated queue with software that monitors it and retries transactions, or it could be a manual queue where someone follows up to collect further details. You should be clear with your users about what is happening. If a third party payment provider isn’t available you might queue the transaction to try again later. That will mean you can’t offer users the same guarantee that their payment will be processed correctly and you should tell them so.","description":"Martha Lane Fox’s report called for government to act as a “wholesaler, as well as the retail shop front, for services and content by mandating the development and opening up of Application Programme Interfaces (APIs) to third parties.” ","link":"/service-manual/making-software/apis.html"},{"title":"Choosing technology","indexable_content":"You can change your mind Start with capabilities, not implementations Cost Consider people Testing and deployment Lock-in When to make new software versus using existing software Level playing field Coding in the open Why we do this Further reading Reasons not to share software maximise developer productivity minimise total cost of ownership avoid lock-in make it easy for the government to share software that it creates    Please note, this is for guidance purposes only, and should not be taken as legal advice.     In some cases you might want to store the ‘master’ version of your software on an internal source code control system and replicate the latest version to a public repository.     You should ensure that any decision you make to use existing software, whether open source or proprietary, doesn’t stop you from sharing any new software that you create (or your suppliers create for you) under a permissive, GPL-compatible open source licence.     Keys, passwords and other secrets must always be stored safely and securely away from source code following Kerckhoffs’ principle. This separation of project code from deployed instances of a project is good development practice regardless of whether or not the software itself is shared in public.     For projects with a high impact level, particularly with a small number of participating developers, it is advisable to have a private space to discuss security issues and develop a patch rather than risk flagging a vulnerability before a fix has been deployed.  At different points in your project you’ll have to choose one technology over others. That might be a programming language, database, library, operating system or some small tool that helps the development team work more efficiently. In some cases you may also have to choose between proprietary and open source software. Please note, this is for guidance purposes only, and should not be taken as legal advice. The most important consideration is to work on the assumption that most of your technology choices can change, especially during the early stages of development. You might select a programming language that you know to be easier and quicker to prototype in for the early stages of the project, and then move to another one that is easier for large teams to use for the final product. Or you might start out with an open source product to allow you to get started quickly, before going on to buy a commercial (proprietary) product which provides some required feature (or vice-versa). On day one of your project you simply won’t know enough about the domain or the user need to select the right technology. It’s OK to make an educated guess at this stage, as long as everyone understands that is what is happening. Then find time to challenge the selection as you learn more about the problem at hand. It’s very easy to immediately jump to a specific product when making technology choices. This tends to be based either on past experience or on fashion. Try and take a step back and think about the capabilities of the technology you’re after. Are you looking for a relational database? Or a document database? A key/value store? Or maybe a graph database? Argue first about the capabilities, rather than any specific implementation. Once you have defined a set of capabilities, work out how you will test solutions against those capabilities. You should aim to test any software that appears appropriate in an environment that is very similar to your production environment, ie at production scale under real-world conditions (including worst-case user load). This will allow you to make sure you understand its specific characteristics, confirm that that its claimed capabilities are genuine, and identify any trade-offs or potential issues to consider with a given piece of software such as conceptual fit with your domain model vs. performance under heavy load. When choosing technology make sure you consider the total cost, as well as any upfront fees. Try and take into consideration costs for things like staff, support or licensing costs (where applicable), the productivity of ongoing service improvement work, and any exit costs (especially around migration of data to a future replacement system) that might be caused by the use of non-open standard formats or protocol extensions. Ensure that you understand the cost implications of any unusually high user loads in production systems. Try and involve the whole team in technology choices. That doesn’t mean no-one owns the decision making but that you want the development team (including web ops people) to share their insights into the options available and how they will affect the overall system, and thereby get their ‘buy in’ to the technology choices made. Technology preferences vary, and technology choice can divide opinion. All things being equal, picking technologies that developers and operations staff like will typically result in improved productivity. The services that we write will need to be deployed, early and frequently. Any components that we choose should be easy to deploy and upgrade as part of an automated pipeline. Frequent, automated testing is essential in agile development. Software that makes testing difficult should be avoided. Technology lock-in happens when previous decisions regarding technology limit future decisions, possibly so that only one real choice exists. For example, if you select a database that only runs on one operating system you have no choice about the operating system you will use. If the costs of that operating system jump you have no simple way of reducing that cost quickly or cheaply. Over time, and after many decisions, you can find yourself in a situation where all your technology decisions are tightly coupled and you are locked-in to one vendor, or one way of doing things. This can have unforeseen financial costs (for example an overnight cost increase) and might also limit how quickly you can iterate on your product in the future (if, for instance, the ideal technology choice isn’t compatible with your current vendor or technology). Aim to have a clear understanding of the cost or implications of moving away from a technology when you commit to it, and avoid technology lock-in whenever possible. This may sometimes mean choosing not to use certain features of a particular piece of technology, such as non-standard extensions to protocols, APIs or programming languages, in order to avoid lock-in and preserve the ability to move to another technology at a later date. In general, you should avoid making long-term commitments to any particular technology, product or supplier until you fully understand the problem you’re trying to solve - and even then, you should ensure you maximise your future development options and avoid technology lock-in if at all possible. Where there is an existing software solution which solves your problem, you should certainly consider using it. You are more likely to use existing software than to make new software when you have a commodity need. You may even be facing a niche problem that’s peculiar to government which has already been solved by another part of the government - or indeed another government - and released as open source software.  Development tools, build tools, utility libraries, databases and monitoring tools are all examples of software where many projects will have the same need, and it makes little sense to reinvent the wheel. For software that serves a rare or niche need you are less likely to find a tool which serves and will continue to serve your needs. In this situation you will likely have to create new software. Software that is developed to meet the needs of the government - whether it’s developed by government employees, contractors or by a supplier - should be shared wherever possible under a permissive, GPL-compatible open source licence (eg MIT/X11 or 3-clause BSD) so that it can be widely used and improved. This allows the software to be used and improved by anyone in the world who has a similar need. It’s important that other governments in particular have the opportunity to re-use the software you’ve created, because everyone deserves to have digital services so good that people prefer to use them. For example GovSpeak and unicorn herder are small components which were developed as a part of GOV.UK. They are now used by several different organisations, and have received a number of public contributions. You should always share software that has been written by the government and/or its suppliers (this includes source code and documentation) unless doing so would: a) create an unacceptable risk to the security of our systems or processes that cannot be mitigated with reasonable efforts b) contravene existing contractual arrangements c) directly threaten our national security In practice, sharing usually means uploading the source code and documentation to a public source code repository, keeping it updated with subsequent changes that you make (or accept from other people), and putting in place appropriate information security assurance to reduce and mitigate the risk of an exploit appearing in publicly-viewable software. In some cases you might want to store the ‘master’ version of your software on an internal source code control system and replicate the latest version to a public repository. Sometimes it’s not possible to share software that was developed for the government by a third party because the third party retains ownership of the ‘intellectual property’ (IP) embodied in that software. Contracts that allow third parties to retain ownership of IP in software that’s been developed for the government, and/or that restrict the government’s ability to share this software under a permissive, GPL-compatible open source licence, should be avoided. On other occasions the team may take a risk-based decision not to share some of the software they have created, for instance to avoid exposing in public the details of a particular risk-assessment algorithm or process. It’s good engineering practice in any case to encapsulate software, and so often in this situation a large portion of the software for a given system or service can still be shared in public. The default assumption should be in favour of coding in the open and sharing software widely, but if you have serious concerns about sharing source code in public, then CESG can provide you with advice based on your specific situation. See also the joint Cabinet Office / CESG statement on Open Source Software and Security. With the growth of free/open source software, many high quality technology products (databases, operating systems, programming languages, development tools, etc) are freely available for government and its suppliers to use and improve. But a large market still exists for commercial software products, and the availability of open source software doesn’t automatically mean that you can’t choose a proprietary technology if it meets our needs. However, it remains the policy of the government that, where there is no significant overall cost difference between open and non-open source products that fulfil minimum and essential capabilities, open source will be selected on the basis of its inherent flexibility. For more information on how to ensure a level playing field between proprietary and open source software, please see the Open Source Procurement Toolkit and the section of this manual that covers use of open standards. You should ensure that any decision you make to use existing software, whether open source or proprietary, doesn’t stop you from sharing any new software that you create (or your suppliers create for you) under a permissive, GPL-compatible open source licence. A successful open source project will garner contributions from a large number of sources, both inside and outside of a single organisation. Allow developers time to review contributions, and answer issues and discussion raised by others using the software. Larger open source projects often evolve an extension model to enable others to continue to use the service in a variety of often unexpected and possibly undesirable ways whilst keeping the core project coherent under the editorship of a small, trusted group of committers. Ensure developers have the ability to install and experiment with open source software, have environments to easily publish prototype services on The Web, have convenient access to a wide variety of network connected devices for testing Web sites, and have unrestricted access to collaboration tools such as GitHub, Stack Overflow and IRC. Take every opportunity to contribute back to open source projects you use. Contributions may be in the form of source code, patches, bug reports, feature requests, sponsorship of developers and support staff, engaging in community discussion groups, and giving public attribution to projects. Cite the open source code you use, as in the GOV.UK colophon - you can read more about this approach on the GDS blog entry about coding in the open. Keys, passwords and other secrets must always be stored safely and securely away from source code following Kerckhoffs’ principle. This separation of project code from deployed instances of a project is good development practice regardless of whether or not the software itself is shared in public. For projects with a high impact level, particularly with a small number of participating developers, it is advisable to have a private space to discuss security issues and develop a patch rather than risk flagging a vulnerability before a fix has been deployed. Choosing technology is important, but it’s probably not quite as important as you think. What is important are the users of that technology and being able to deliver quality at a sustainable pace and suitable cost. When making technology choices, and importantly as you develop your product and constantly reassess your selections, try and make decisions that: Open standards considerations","description":"At different points in your project you’ll have to choose one technology over others. That might be a programming language, database, library, operating system or some small tool that helps the development team work more efficiently. In some cases you may also have to choose between proprietary and open source software.","link":"/service-manual/making-software/choosing-technology.html"},{"title":"Testing code","indexable_content":"Types of testing When to write tests Test early and often Acceptance testing Unit testing We use automated testing to ensure that our code does what is intended, to protect against mis-use of that code, and to provide assurance that iterating that code for better design or new features doesn’t break existing behaviour.  We also add manual testing as an extra check where appropriate. Any code written for your service should have a suite of tests operating at two levels: Requires broad tests that run through high-level functionality end-to-end, making sure that the pieces of the system come together to provide the right service.  A developer should be able to describe the steps in any acceptance test to the product/service manager in a way that makes sense to them and matches how they expect the service to be used (or abused!) Focussed on the specific details of the code ensuring that each discrete unit of code does what is expected of it. They allow the developers to verify that complex calculations are performed correctly, to ensure that code handles bad input properly, and that optimisations to the code don’t break its behaviour. We aim to write a first set of tests at the start of working on a feature. An acceptance test that describes the end-to-end behaviour ensures that everyone involved understands the objective of a piece of work, and can demonstrate progress through the story at hand. Unit tests can then be written to understand the implementation of the code. Tests are often described as ‘happy path’ or ‘sad path’. Happy path tests verify that the system can be used as intended, while sad-path tests verify that it handles errors (whether bad input from a user, a vital API being unavailable, or some other issue) gracefully. We start with happy path tests and a few simple sad path tests and then add more sad path tests as our understanding of the code and its dependencies develops. Tests should also be written whenever a bug is discovered. A test to reproduce the bug should be written before it is fixed, allowing you to verify that the bug has been fixed and ensure that it isn’t reintroduced later. Developers are expected to run tests regularly, especially before sharing new code, they are verified as part of the code review process, and they are also run regularly in a shared continuous integration system to ensure the whole team has a chance to see how they’re performing.","description":"We use automated testing to ensure that our code does what is intended, to protect against mis-use of that code, and to provide assurance that iterating that code for better design or new features doesn’t break existing behaviour. ","link":"/service-manual/making-software/code-testing.html"},{"title":"Configuration management","indexable_content":"Management tools Why we do this Further reading Infrastructure as code Build for portability Use the same tools for development and production testability reusability executable documentation common and constrained language to describe a problem domain Infrastructure as Code CFEngine Chef Puppet Your system is likely to be much larger than a single application, relying on other supporting infrastructure components. Even a simple application probably requires some configuration, to provide database credentials or a web service endpoint for instance. In order to build robust, scalable and portable systems this configuration data should be well managed. Configuration management tools help with documenting and maintaining the configuration and dependencies of a software system. Although this could be done using hand-made software, it’s common to use existing tools. Three examples of existing open source configuration management tools are CFEngine, Chef and Puppet. One approach to managing configuration is to describe the configuration and the software dependencies in code. This brings with it all the advantages of programming in general, including: Once described in code the infrastructure configuration is executed against the servers, networks and software in question. Moving software systems between providers can be difficult and time-consuming. Even with compatible providers and simpler procurement rules it’s possible to lock yourself in through technical inertia alone. Configuration management encourages a deep understanding of the configuration of the system and this can be used to move software easily between providers. A common problem in software systems is seen when code written by a development team works on their machine or a test environment but not on the production environment. A common cause of this is differences in configuration – different versions of software, different types of database or application server. This can be avoided by using the same tools for both development and production environments. Existing approaches to managing configuration are often manual, process heavy, slow and error prone. Ultimately people are bad at carrying out detailed monotonous tasks. And installing and configuring software across tens or hundreds of servers (if done by hand) is definitely monotonous. Even if this could be done to provide everything correctly configured on day 0, over time configuration drifts if not kept in check. One traditional approach to this problem is to make configuration changes hard, thereby limiting the number of them. When trying to build agile and flexible software systems rapid change is needed and manual processes break down.","description":"Your system is likely to be much larger than a single application, relying on other supporting infrastructure components. Even a simple application probably requires some configuration, to provide database credentials or a web service endpoint for instance.","link":"/service-manual/making-software/configuration-management.html"},{"title":"Cookies","indexable_content":"What are they? Privacy and Electronic Communications Regulations Using cookies Types of cookies Cookie information and warnings Cookie scoping and attributes Further reading First party cookies Third party cookies Exempt cookies    “GOV.UK uses cookies to make the site simpler. Find out more about cookies.”  This short guide tells you what to keep in mind when including cookies into your services, and how and why you must notify users about cookies on your service. Cookies are small data files that are sent from a website and stored on a user’s computer. They are used to store information that can be retrieved later in the visit or in future visits to the website. Many uses of cookies are harmless, but sometimes they are used to track users and their browsing habits across multiple websites and target them with relevant advertising. In May 2011, the Privacy and Electronic Communications Regulations were updated to require website operators to gain consent before storing or retrieving data from a user’s computer (or other device). This change directly affects the use of cookies and other similar technologies such as HTML5 local storage. Before using cookies the website operator needs to either: - get explicit, informed consent from the user before storing cookies on a user’s computer - be satisfied that the user understands that their actions will result in cookies being stored (implied consent) - be satisfied that the cookie is “absolutely essential” to the operation of the website (eg cookies used for operating a shopping cart) Responsibility for complying with these regulations lies with the website operator. This guide covers how to use cookies on government services, but the principles also apply to other technologies such as HTML5 local storage. You should minimise the use of cookies on services, store as little information as you require for as short a time as necessary to deliver a good service to users. If your service requires cookies to be stored then you need to ensure that they can be explained simply and clearly, in a way that the majority of users can understand. You must notify users that cookies are being stored. These are cookies that are set by the website that the user is currently viewing. They are under the control of the website operator and can only be accessed by the website. Data stored within the cookie is not shared with other websites. Examples of first party cookies include: - cookies for storing logged in status - cookies for storing user preferences - some types of analytics cookies These types of cookies are minimally intrusive as the website owner has complete control over what data is stored within them, how long the data is stored for and what the data is used for. These are cookies set by external services used on the website. The cookies are under the control of the third party service and can be accessed on any website that makes use of the service. These cookies are not controlled by the website operator and can be used to track a user from one site to another. Examples of third party cookies include: - cookies from social media sharing services - cookies from advertising campaign management services - cookies from embedded document sharing services - cookies from some analytics services These types of cookies are intrusive as the website owner usually has no control over what data is collected or how it is used. A number of uses of cookies are exempt from the requirement to gain consent. These include cookies that are used for load balancing or cookies that are “absolutely essential” to the use of a website (eg used to store shopping cart contents). While these cookies are exempt from the Privacy and Electronic Communications Regulations, you should still notify users that these cookies are in use. All services on the service.gov.uk subdomain must include a cookie information page. This page must contain information about the cookies used throughout the site, followed by an explanation of each cookie’s purpose and how long it stored for. You can see an example of how to do this on the GOV.UK cookies page. Each service must include a link to this page on the footer of the website. The information page must also include a link back to the main GOV.UK cookies page. Services must also tell users on their first visit that cookies are used and regularly remind them of this. This is particularly important when the service relies on implied consent. GOV.UK does this with a blue information banner that is displayed at least once every 3 months with the following message: “GOV.UK uses cookies to make the site simpler. Find out more about cookies.” Where explicit consent is required, services must notify their users before the cookie is set. You should do this with the sets a cookie text linked to the appropriate details on the cookie information page. Cookies must be scoped to their originating domain name only eg www.servicename.service.gov.uk not .gov.uk. Cookies should not be used on domains that host only static assets (they introduce a browser overhead that slows down the response time for users without providing any benefit) Cookies must be sent with the Secure attribute and should, where appropriate, be sent with the HttpOnly attribute. These flags provide additional assurances about how cookies will be handled by browsers. The ICO’s latest guidance This blog post by GDS Developer Dafydd Vaughan explains how cookies were used on the beta version of GOV.UK.","description":"This short guide tells you what to keep in mind when including cookies into your services, and how and why you must notify users about cookies on your service.","link":"/service-manual/making-software/cookies.html"},{"title":"Development environments","indexable_content":"Required Desired Current availability Internet connectivity Self service provisioning Suitable range of virtual machine options Run own operating system EU-based data centres Service Level Agreement Development team access Provisioning API Create virtual machine templates Firewall and load balancer service Configurable private network Virtual Private Network test software choices to prove they are valid experiment quickly with new approaches produce and test software in a production-like architecture develop rapidly and iteratively continuously test and monitor software during development deploy updates to the system rapidly and iteratively (ie at least daily) continuously test and monitor software in production As software developers, the environments we use every day matter greatly. Below are a set of guidelines for development environments to enable the exemplar projects (service transformations committed to in the Government Digital Strategy) to: Although this document does not describe the capabilities and characteristics of a production environment, there is a general presumption that any production environment should enable the exemplar project development teams to: The essential capabilities of the development environment without which the development team will not be able to operate. A service that is already operational and able to onboard customers very quickly (typically within 5 working days). Both incoming and outgoing internet connectivity. This should also facilitate remote management. We should be able to remotely provision new machines ourselves to meet our needs as they arise, without the need to phone, fax or email anyone, and therefore require a self service method of provisioning virtual machines and storage. Support for 64 bit architectures and a range of virtual machine sizes at least up to 4 cores, 16GB RAM and 300GB disk The flexibility to run whatever operating system is deemed suitable for the project, rather than just a limited subset of those supported by a vendor. We would prefer to store data in the EU, and ideally within the UK, therefore we require development environments to be hosted only in EU-based data centres. A suitable SLA should be in place with the service provider (whether internal or external), with at least a 99.5% uptime guarantee. Approved development team members should have root access to manage virtual machines (eg to install & configure software). Optional capabilities which would make a marked difference to the production of the services. The provisioning of virtual machines, storage, load balancing, etc to be available via an API. Any API should have a suitable authentication mechanism in place, and should be accessible to development team members via the Internet (optionally through a VPN). To speed up provisioning we would like to be able to store virtual machine templates from which new machines can be launched. If available a managed firewall and/or load balancer service may be used. We require the ability to manage internal networks, each consisting of specific groups of virtual machines. This should allow for some virtual machines not to be internet accessible. We may choose to expose parts of the service via a Virtual Private Network. The infrastructure service should at a minimum not prevent this and may ideally provide a suitable managed service.","description":"As software developers, the environments we use every day matter greatly. Below are a set of guidelines for development environments to enable the exemplar projects (service transformations committed to in the Government Digital Strategy) to:","link":"/service-manual/making-software/development-environment.html"},{"title":"Information security","indexable_content":"Introduction to information security Information security in government Roles Business Impact Levels Agile Design Good Practice Guides (GPG) Risk Management Document Set (RMADS) IT Health Check (ITHC) Ongoing Tools Risk management Further reading Physical controls: walls, locked doors, guards Procedural controls: managerial oversight, staff training, defined emergency response processes Regulatory controls: legislation, policy, rules of conduct Technical controls: cryptographic software, authentication and authorization systems, secure protocols For confidentiality: the potential impact if the information is seen by those who should not see it For integrity: the potential impact if the accuracy or completeness of the information is compromised For availability: the potential impact if the information becomes inaccessible GPG13 – Protective monitoring GPG8 – Protecting External Connections to the Internet GPG12 – Use of Virtualisation Products for Data Separation Identify the SIRO Work with an accreditor to identify the Business Impact Levels Confirm with the SIRO the target Business Impact Levels Confirm with the SIRO whether a formal Accreditation is required Procure a CLAS consultant if needed for the Accreditation work If possible establish a contact at CESG who can offer assistance and some technical oversight Produce supporting documentation; for example architecture documentation, risks and mitigations, operating processes, references to GPGs, controls Work with the CLAS consultant on completing the RMADS is required Arrange the ITHC Present to the SIRO to get final sign-off Security Engineering — Ross Anderson: a comprehensive textbook covering the theory and practice of building secure systems. HMG IA Standard No. 1 – Technical Risk Assessment: the CESG guide to assessing risk in information systems. G-Cloud Impact Level Guidance: a brief introduction to Business Impact Levels. Business Impact Level Tables: Business Impact Level Tables.    Assurance is the broad set of activities involved in assessing and managing the risks associated with the system under development, while accreditation refers to a subset of the assurance work, involving a formal and independently verified process similar to ISO27001.  When building your service, you will need to ensure that appropriate steps are taken to ensure its security. Information security is a topic both broad and deep, drawing from fields ranging from economics and psychology through to mathematics and probability, and this document cannot claim to provide a thorough review of the field. Instead, it aims to provide you with the briefest of introductions to information security, and will explain the communities and processes that exist to help you build world class secure services. The term information security refers to the theory and practice of defending data or information systems against unauthorized or unintended access, destruction, disruption or tampering. Security professionals frequently refer to three key concepts: In government, much is made of these three “key concepts of information security,” as will be explained below. Security systems typically attempt to address one or more of these concerns through: Not every system requires a full battery of security controls. Indeed, ‘completely secure systems’ do not exist, and overly secure systems are often prohibitively expensive or thoroughly inconvenient for their users. You should aim to build services that are appropriately secure, and in practice you will be guided by an assessment of the risks associated with a lapse in the confidentiality, integrity, or availability of your service. Within government, there is an established set of assurance and accreditation processes. These provide a structure and a shared language within which to discuss, analyse and address security considerations. If the processes work correctly, managers should have a clear and accurate understanding of what risks they are accepting, and those delivering the service should know what controls they are going to employ to mitigate those risks. Assurance is the broad set of activities involved in assessing and managing the risks associated with the system under development, while accreditation refers to a subset of the assurance work, involving a formal and independently verified process similar to ISO27001. The important thing to note about building trustworthy and secure systems is that it is a team game. Assurance and accreditation should not be a completely separate strand of work, or be seen as a hurdle to be jumped over (or sidestepped). Only by engaging with risk and making decisions based on a range of expert opinion will you end up with the best product. The rest of this document will introduce you to assurance and accreditation in government. The content will use quite a lot of acronyms; unfortunately these are in common usage and it’s very hard to engage with the existing documentation and processes without speaking the lingo. We include them here in the hope that they will provide a helpful reference which can be used when reading existing documentation. It’s important to understand the different roles involved within the process detailed below. One of the first things you should do on your project is to establish who plays each of these roles. Note that all of them require formal training and specialist skills. All projects, however small, should involve some level of assurance. This may be as simple as documenting the limited risks and proposing to the SIRO that the project does not require a formal accreditation. For anything involving sensitive data or of interest to lots of people an accreditation stage will be required, and this process is likely to include representatives from all of the above groups. Business Impact Levels, often shorted to Impact Levels (IL) are a set of numbers used to guide discussions of risk in Government projects. Specifically they are numbers between 0 and 6 for each of the three key concepts mentioned above, and measure: More details about identifying these numbers can be found in this extract from HMG IA Standard No. 1. The role-holders listed above will work with the wider team to bring the appropriate concerns to bear in the process of designing the service. The team as a whole will need to make a range of decisions about topics such as what information needs to be captured, how it is processed, whether it is stored, and so on which will have a direct impact on the assurance/accreditation process. A close working relationship will be essential to ensure that business impact levels and other details are kept up to date as designs evolve and that risk management plays an appropriate role as a constraint in the design process. The Good Practice Guides (GPG) are documents published by CESG on specific topics of interest to various types of projects. These can act as a good starting point when looking to identify risks and put in place mitigations. Unfortunately many of these documents are Restricted. It is advisable to establish a working relationship with CESG early on in the project to make sure you can access these documents. Examples include: The Risk Management Document Set or RMADS are the result of the formal accreditation work. This is likely a large set of documents, including the Baseline Control Set (BCS), system overview and supporting evidence, presented to the SIRO for sign-off as part of go-live conversations. The IT Health Check (ITHC) forms part of the formal Accreditation. In essence it is a penetration test carried out by a CESG approved supplier (specifically a CHECK certified individual). Read the guide about penetration and vulnerability testing for more details. The assurance and accreditation work described above is not just about getting a project to launch. It also covers the running of the resulting service. Over time, new threats may emerge, systems and processes may change, and assumptions may become invalid. Documentation should be kept up-to-date and additional penetration tests organised on a regular or as-needed basis. It is important to start understanding risks and engaging with the assurance and accreditation process as early in a project as possible. The following is a good starting place for milestones to add to a project plan: It’s important to understand the assurance and accreditation processes and tools are all about managing the risk associated with the running service. Security is part of this, but just one part. Nearly everything brings with it risks: technology choice, staffing, processes, access to restricted documents, data aggregation, etc. It is important to understand those risks and put in place sensible and suitable mitigations. It is unrealistic in most cases to aim for a system with no risks, and ignoring them is a recipe for future exploits. The aim is a system where the risks are known and the team, working with risk professionals, have made careful decisions about how to deal with them.","description":"When building your service, you will need to ensure that appropriate steps are\ntaken to ensure its security. Information security is a topic both broad and\ndeep, drawing from fields ranging from economics and psychology through to\nmathematics and probability, and this document cannot claim to provide a\nthorough review of the field. Instead, it aims to provide you with the briefest\nof introductions to information security, and will explain the communities and\nprocesses that exist to help you build world class secure services.","link":"/service-manual/making-software/information-security.html"},{"title":"User accounts and logins","indexable_content":"Find alternatives Where there aren’t alternatives Examples are you providing a login service for a small number of agents (administrative users, accredited partners, etc) or for a broad range of citizens or businesses? do you already have all the data you need in order to establish trust with those users or will you need to match them against other services (online or offline)? specifically monitor use of the system for attempts to gain access, with identifiers such as unusually high number of failed login attempts over a short period of time, or a sequence of failed logins on a given account over a long period of time segment user data from other data you hold to avoid aggregating a large amount of identifiable information swap to a new identity system such as the Government ID Assurance scheme without invasive changes to the rest of your codebase Our advice is that teams do not build login systems. Building a login system is a significant undertaking. While there are numerous open source libraries that make it trivial to add login functionality to your service, the moment you add that feature you’re significantly increasing your user support overhead (people forget how to sign in, lose their passwords, etc), you’re accruing personal data that you will need to constantly review and protect, and you’re adding a relatively complex interaction for users to complete. Many features that are often implemented using login systems can be completed in other (and potentially more useful) ways.  Saving search results, for example, doesn’t require a login but just a way of helping users remember a specific URL. Instead of having them log in you could provide a tool to help send the URL to an email address or instructions on creating a bookmark in their browser. Or perhaps you could just take their email address and let them know if the search results change?  The precise details will vary according to what users need from your service, but if there’s an alternative to a login system that should be preferred. If after careful review and design work there is no option but to build a login system you will need to consider a few questions: If building a service for a small number of clearly identified agents then it is probably safe to proceed. You should ensure that any authentication and authorisation code written for your system is carefully separated from the application in such a way that you can: If you need to build a system for a broad range of citizens and businesses, or you need to do sophisticated matching with other systems in order to build trust in the identity of your users then you should explore the advice published by the ID Assurance team. The ELMS license application system on Business Link required a login to complete an application. In building a new version of the system for GOV.UK we removed that requirement and usage rates have increased considerably. There is still a login system for approved users in local authorities who need to process those applications.","description":"Our advice is that teams do not build login systems.","link":"/service-manual/making-software/logins.html"},{"title":"Open standards and licensing","indexable_content":"What is an open standard? Building on open standards Choosing which open standards to use Why we do this Guidance Further reading We place the needs of our users at the heart of our standards choices Our selected open standards will enable suppliers to compete on a level playing field Our standards choices support flexibility and change We adopt open standards that support sustainable cost Our decisions on standards selection are well informed We select open standards using fair and transparent processes We are fair and transparent in the specification and implementation of open standards user and functional needs security and legal requirements economic efficiency of government as a whole interoperability preventing lock-in improving our flexibility and the ability for government to deliver services based on users’ needs and avoid digital exclusion based on the technology choices we make; putting in place a level playing field for open source and proprietary software, giving us the ability to move between different technologies without the risk of lock-in; making it easier to share appropriate data across and beyond government boundaries to provide efficient services for users and for our delivery partners making the cost of our digital services more sustainable by reducing complexity and encouraging reuse. Standards Hub - go here to get involved in the debate about which open standards we should choose and to find out about which ones we’re adopting. Open Standards Principles Open Standards: Open Opportunities consultation outcome    Please note, this is for guidance purposes only, and should not be taken as legal advice.  Considerations for using open standards and why they matter. Please note, this is for guidance purposes only, and should not be taken as legal advice. We define open standards for software interoperability, data and document formats, as those which demonstrate all of the following criteria: Collaboration - the standard is maintained through a collaborative decision-making process that is consensus based and independent of any individual supplier. Involvement in the development and maintenance of the standard is accessible to all interested parties. Transparency - the decision-making process is transparent and a publicly accessible review by subject matter experts is part of the process. Due process - the standard is adopted by a specification or standardisation organisation, or a forum or consortium with a feedback and ratification process to ensure quality. Fair access - the standard is published, thoroughly documented and publicly available at zero or low cost. Market support - other than in the context of creating innovative solutions, the standard is mature, supported by the market and demonstrates platform, application and vendor independence. Rights - rights are essential to implementation of the standard, and for interfacing with other implementations which have adopted that same standard, are licensed on a royalty free basis that is compatible with both open source and proprietary licensed solutions. These rights should be irrevocable unless there is a breach of licence conditions. There are 7 open standards principles that you should follow when thinking about which open standards to use: We describe the reasons for these principles and their implications in the Open Standards Principles, published in November 2012. The Open Standards Board will be selecting some compulsory open standards using the Standards Hub process. Where these standards have been identified you should use them. If you are looking for an open standard and we’ve not set a compulsory one in that space, you should carry out a thorough assessment of the existing standards and choose a standard that meets your needs and is consistent with our definition. You should also consider how the standard fits with: If you are considering use of a standard that doesn’t meet our definition of an open standard, you’ll need to apply for an exemption. You’ll also need to apply for an exemption if you want to use an alternative standard to one that performs the same function if we’ve already selected compulsory standards for that purpose. By implementing open standards for software interoperability, data and document formats, we are: Build component-based digital services, based on open standards, to provide a flexible design to give you greater choice and enable your digital services to evolve. Expressing your user needs in terms of required capabilities, which are in turn based on open standards, helps you to make better choices for service delivery. It also means that there is no unintentional lock-in built into government digital services. Whether designing and building in-house or outsourcing, you must require solutions that comply with open standards, for software interoperability, data and document formats, where they exist and meet functional needs. If there is a reason why you think using open standards is inappropriate, on an exceptional case-by-case basis an exemption may be agreed in advance by the Government’s Chief Technology Officer (or through Departmental Accounting Officer procedures for cases below the Cabinet Office’s spend controls threshold for IT).","description":"Considerations for using open standards and why they matter.","link":"/service-manual/making-software/open-standards-and-licensing.html"},{"title":"Releasing software","indexable_content":"Releasing software Why we do this Regular releases reduce risk Further reading your approach to testing the quality of low level code – approaches like continuous integration, where code is tested constantly, and test driven design, can be helpful using the same tools and release processes for both the development and production environments - this way the software and tools will be well understood and will have been run thousands of times before the first public launch the people using your service don’t get new features and improvements quickly bundling up lots of new features you make the release more complicated by releasing smaller chunks regularly it’s much easier to see what is going to change, and if something goes wrong it’s much simpler to roll that change back and undo it doing something regularly makes the case for investing in automation easier, removing much of the potential for human error and making each release the same if you’re doing something several times a day you tend to get better at it Regular Releases Reduce Risk Blog post about the approach to releasing software onto GOV.UK Constantly improving online services means releasing changes to the underlying software. How often you want to do this will affect how you design and build the applications and presents a number of challenges that this guide hopes to address. It is important to think about how you release changes to a running application as early in the products development as possible. This is because it affects how software is developed and tested and how a product may be supported. Being able to release software on demand is important. 6 monthly or longer release cycles are dangerous. Not only do new features rarely see the light of day but fixing known problems have to fit within a rigid release schedule.  Note that it’s important to make the distinction between releasing regularly and the ability to release all the time. The application should always be in a state where it could be released, that means quick changes can be made when needed. As an example changes to the software running GOV.UK are made on average 5 times per day. In order to do that you have to consider: Although tools, potentially including commercial tools, are required to aid rapid releases the discussions should not start with what tools should be used or procured but with the needs of the service and the product team. In some organisations, people fear releasing new applications or new versions of software. Lots of websites, especially large applications within large traditional organisations, don’t change very often. Many will have fixed release schedules which might mean one release every six months or so. This means bundling up lots of changes into a single release, which is bad in at least two ways: It could be weeks or months before an improvement that only took a few days to finish is actually released for people to use, and the complexity means there are lots of different ways the release can go wrong. The combination of complexity, risk and the infrequent nature of releases makes for a stressful event for all involved. No wonder most people don’t like release day! Releasing software comes with risks, so trying to minimise those risks is prudent. We do that in a number of ways: As well as reducing risk, being able to release early and often also helps products improve quickly, by reducing a potential barrier to quick experiments and rapid iteration. Finally consider the following two measures of a system; mean time between failures and mean time to recovery. A very traditional approach involves focusing completely on reducing the time between any failures happening, by hopefully improving the quality of the overall system. But problems will always happen at some point, so focusing some effort on reducing the time taken to fix problems that do occur can often be much more cost effective as well as improve the overall system uptime.","description":"Constantly improving online services means releasing changes to the underlying software. How often you want to do this will affect how you design and build the applications and presents a number of challenges that this guide hopes to address.","link":"/service-manual/making-software/release-strategies.html"},{"title":"Sandbox and staging servers","indexable_content":"Shared context Example Why we do this Further reading everyone on the team should be able to understand progress to date by using running software people working on the service should be able to understand the impact of their work by seeing it working in context the team should be confident that the service as a whole works before shipping those changes to the public Regular Releases Reduce Risk Everyone working on design, development or maintenance of a service should have a clear, easily accessible place to review the latest version of the software. Those working hands-on building the software for the service should be able to run their own reasonable replica of the entire service.  There should be a clear staging environment where changes are reviewed and tested in the context of the entire end-to-end service before they are deployed. Everyone working on a service should be able to see progress and understand their work in its full context. That means a shared environment where any team member can see the current state of the service and where stories can be signed off, and individual sandboxes where more experimental or early stage work can take place and be reviewed. In addition to those environments it can be helpful to have a separate staging environment where final quality assurance and testing can take place before changes are deployed to the live/production environment. This should be identical to the production environment so it can be used effectively for performance testing. For those working on GOV.UK we use the Vagrant tool to provide all developers with a development environment configured similarly to the production environment.  We then have a preview environment that is updated by our Continuous Integration system whenever tests have passed on a change. There is then a staging environment for review of specific changes before they go to the production environment. It is updated and reviewed as part of the release process.","description":"Everyone working on design, development or maintenance of a service should have a clear, easily accessible place to review the latest version of the software. Those working hands-on building the software for the service should be able to run their own reasonable replica of the entire service. ","link":"/service-manual/making-software/sandbox-and-staging-servers.html"},{"title":"Standalone mobile apps","indexable_content":"What is the government’s position on apps? Brief background on apps landscape Rationale for the government’s position Exceptions Further Reading What is a native app? What is responsive web design? Have you met the necessary conditions? More questions The process Pros Cons Pros Cons revenue (download and buy) persistent presence on device can access all functions on a device snappier performance in general can be used offline, in some cases expensive to develop and maintain needs several different versions (Android, iPhone, iPad, Blackberry etc) service iteration more complex (at least 3 types of app to deploy) can only be downloaded via gatekeeper app stores (Apple, Google) most apps are rarely downloaded, and even then hardly used it is your website, so costs are minimised and service iteration simplified uses open standards (HTML5) no gatekeepers to constrain access performance still good mobile web outstripping mobile app reach clear winning strategy for ‘utility’ services which do not require complex device  features or persistence not persistent on device some device features unavailable (camera, address book) requires internet connection not snappy enough for some complex services (eg Spotify, Facebook, Skype) no ‘download and buy’ revenue stream What’s the user need? Please provide supporting evidence Which 3rd-party native/hybrid apps have already been developed to meet this user need? If  there are none and condition 2 has been met, please provide your thoughts on why this might be the case. If there are 3rd-party alternatives, please state why you believe a government-developed app is required. Is this user need of sufficient importance to (your users to) justify the lifetime cost of your proposed app? If you believe it is, how have you determined this? You might find it useful to review articles within the service manual such as, Know your users and Writing user stories. Is there evidence of demand for this type of app amongst your target users? If you believe there is, please provide supporting evidence e.g. examples of similar apps that have proven popular with your target audience and evidence of their popularity. Is there evidence to justify building an app for the platform you’re proposing to do this for? If so, please provide supporting evidence e.g. analytics data that shows proportion of visitors to your content/service that currently access it using relevant devices. Government approach to apps presentation Tom Loosemoore’s blog post about standalone apps    “Stand-alone mobile apps will only be considered once the core web service works well on mobile devices, and if specifically agreed with the Cabinet Office”     NOTE: If these conditions are not in place, it is unlikely that your app proposal will be approved. If you believe there are compelling reasons why these conditions have not been met, please set them out in your proposal.  The government’s position is that native apps are currently rarely justified. At the October 2012 Digital Leaders’ meeting, the position was clarified: native apps could not be developed without Cabinet Office approval. The November 2012 Digital Strategy says: “Stand-alone mobile apps will only be considered once the core web service works well on mobile devices, and if specifically agreed with the Cabinet Office” Ensuring your service meets the Digital by Default Service Standard means it will work well on mobile devices. Making your data and API available for re-use will stimulate the market if there is real demand for native apps. So-called ‘apps’ come in several different flavours, therefore confusion is understandable. When people are talking about ‘apps’, they can mean device-specific ‘download and install’ apps (aka native apps) or websites that respond to various screen sizes (aka responsive websites, web apps or HTML5) or even various hybrids of the two. Native apps are downloadable software applications that run using the device’s operating system code and APIs. They persist on the device and can access all the hardware features (camera, storage, phone capabilities, etc). Because they run using native code, different versions must be created for each operating system. Examples of native apps include Spotify, Angry Birds, Instagram and Skype. Responsive web design is a design approach that optimises users’ viewing experiences across a wide range of devices. When a responsive website is accessed via a mobile phone, it is sometimes referred to as a ‘mobile web app’. Responsive websites are built using open web standards (HTML, CSS, javascript, etc) and they run inside a device’s web browser. Examples are GOV.UK, PM’s dashboard, FT webapp, BBC Sport. If there is a market for native apps, why should the government monopolise it? There is a vibrant market of 3rd party native app developers using government data and APIs. Government’s position is that native and hybrid apps currently rarely justified. We are backing open standards rather than risking proliferation of parallel versions of services as devices proliferate. And while people spend as much time using apps as using mobile web the vast majority of app use is for gaming and social networking. For ‘utility’ needs, such as those met by government services, the mobile web is preferred to native apps We recognise that there’ll be a few exceptions. To help you assess whether your case is likely to be considered an exception, consider the following: Condition 1: Your web service is already designed to be responsive Condition 2: The service or the content you’re looking to build an app for is already open to third-parties via APIs or as open data NOTE: If these conditions are not in place, it is unlikely that your app proposal will be approved. If you believe there are compelling reasons why these conditions have not been met, please set them out in your proposal. In addition to the evidence requested above, all digital spend for the development of standalone mobile apps is subject to the GDS spend approval. Guidance (including details about response times) on the process can be found on GOV.UK. If you have any queries, please contact GDS.","description":"The government’s position is that native apps are currently rarely justified. At the October 2012 Digital Leaders’ meeting, the position was clarified: native apps could not be developed without Cabinet Office approval. The November 2012 Digital Strategy says:","link":"/service-manual/making-software/standalone-apps.html"},{"title":"Testing in an agile environment","indexable_content":"Building quality in Everyone is responsible for quality Fast Feedback Tests are an asset of the product Faster delivery into production Clear and consistent view of testing Optimise value Types of testing Code Testing Exploratory Testing Load & Performance Testing Penetration Testing Accessibility Testing Crowd Sourced Testing Test Your Ideas Fundamentally, the basics of any testing approach still apply in the Agile world. However, the focus of testing can be quite different.   It is important to recognize why we are testing in the first place, and that is to build the best quality system we can, that does what the customer requires, at a cost that everyone agrees we can afford  (cost being money, business change, risk etc.).  Too often, the focus of testing is to validate what has been produced and that alone, when in actuality it should be more about the following 7 concepts: You cannot test quality at the end, which is the mistake many teams make. Expend the vast majority of your effort building quality in at the start instead.  When you write user stories, ensure that you define acceptance criteria against which you can test. Once past that point, testing should primarily be a verification of what we already know and understand to be true, there should be no surprises in the latter stages. Service quality isn’t just a testing issue. The quality of a system is defined by the people who create it. If there is a problem in the quality of the system being produced, then it should be evident to everyone involved, and every person on the project should be taking action to increase quality and fix issues. Agile is reliant on fast feedback loops, so that we can actually be agile and change when we need to change. Testing should be about giving that fast feedback, at the time when it is useful. Agile test techniques (eg Behaviour driven development, Acceptance test driven development) have their place and we may well use them, but they are not the primary focus of the test approach. By this we mean that testing is built with reuse in mind. It takes a lot of effort to do testing correctly, we don’t want it to be a throwaway exercise that has to start from scratch each time there is a new release, or a new project. Automated tests need to be written with the same care and rigour as production code. While testing is necessary and valuable to the programme as a whole, any time it takes for that code to go live once written is essentially wasted time. Testing should be a tool that is used to get the fastest possible confirmation that it is as expected, or that it isn’t and needs to be reworked. Testing doesn’t always need to be exhaustive at every level, it needs to be applicable to the situation at hand. It should be the job of the team to agree on the necessary testing at each level, based on the appetite for risk of the product owner and the likelihood of risk in the application. Everybody in the programme needs to understand and agree the approach to testing, and everybody needs to understand where they fit in and what they are required to do. Testing, done well, will inform the best way forward and get the best ‘bang for buck’ in terms of effort expended in various functional or non-functional areas.  It will help make the tough decisions, and drive the development effort based on the risk of each choice of story.  It will help the prioritisation based on the understanding of the complexity of the system. The most noticeable difference with testing in an Agile world is that the majority of your  test effort will be focussed on automated tests.  These tests run in Continuous Integration (C.I.) which means that they form part of your code base and every time you make a change to your code, your tests are automatically run. This gives you immediate feedback on the quality of your code and helps prevent bugs being found at a later stage when they are expensive and complicated to resolve. Read the guidance about testing code.   Exploratory testing is a term commonly used to describe unscripted manual testing whereby the tester uses his or her knowledge, experience and intuition to navigate through the software and identify bugs. A scripted test can only ever test a predetermined outcome. Exploratory testing aims to find and test the less obvious outcomes. A good way to think about it is that automated tests prevent bugs whereas exploratory tests find them.   Exploratory testing is normally time-boxed and has a specific purpose - eg ‘I will spend x hours exploring y and z aspects of the system (though my explorations may take me elsewhere and it may take more or less time, I’ll use my judgement as I go)’.  The term does not imply that the tester has not prepared for the testing. They will have given the testing some detailed planning in advance, thinking for instance about the specific aspects they want to explore, and any data or other system set-up that they will need.   Automation may still play a part - not to run the tests themselves but, for instance, to set up the data or to get a set of transactions into predetermined states. In a team where you have a one or more dedicated ‘quality analysts’ or ‘testers’ this type of testing will normally be part of their role. In a developer-only team time will need to be put aside for them the developers themselves to do this type of testing. As a developer has been deeply involved in writing the code, it is sometime difficult for them to step far enough from the system to see paths through the system that they hadn’t previously envisaged. To help with this it’s ideal if they can be assigned to exploratory testing for a full day to allow the appropriate amount of context switching. It is also preferable if they are exploring parts of the system that they have been less involved in developing. When a manual test uncovers a defect, it is important to always add an automated test to catch it going forward and hence prevent any reoccurrence. Read Cem Kaner on exploratory testing Read the guidance about load & performance testing Read the guidance about penetration testing Read the guidance about accessibility testing Crowd sourced testing is a good way of speeding up your manual testing and/or achieving better coverage.   There are external companies who provide this as a service, but at GDS we do it internally. We simply put out a call for as many volunteers as possible across the organisation to put aside a few hours on a particular day for testing. We then give them some guidance on what we need testing and a central place for them to log bugs and hey presto! Sometimes we incentivise people by creating a ‘leader board’ showing who has tested the most things.   Examples of where we have used this effectively include for pre-release testing of additional devices/browsers and for the detailed checking of hundreds of pieces of content on GOV.UK back to old content on DirectGov and BusinessLink. Don’t forget, don’t just test the product itself - test your ideas.   For information on how to do this read the guidance about user research.","description":"Fundamentally, the basics of any testing approach still apply in the Agile world. However, the focus of testing can be quite different.  ","link":"/service-manual/making-software/testing-in-agile.html"},{"title":"Version control","indexable_content":"Commits Version control systems Not just code All software development projects must use a version control system. Version control allows you to track changes to code over time, meaning that you can quickly step back to an earlier version where necessary and you can annotate your changes with explanatory details to help future developers understand the process. Version control will also provide tools to audit who has made changes to the code and what has changed. Those updating the code should make small, discrete ‘commits’ of changes that are grouped according to their intention. They should be committed with a clear message explaining what the intention of the change was and (where appropriate) providing links to any supporting information such as development stories, bug reports, or third-party documentation. At GDS we prefer to use a distributed version control system. This means that everyone involved in the process has a full copy of the code and of its history. This makes it easier for developers to create ‘branches’ in their code to explore new features or approaches without treading on the toes of those working on different aspects of the service. We use Git, which is one of the highest profile options. It also provides extra resilience; if the network is unavailable the developers can continue to work and make small incremental commits, merging their changes back with everyone else’s at a later date. It’s a good idea to also use version control for other aspects of your work, not just code. We use the same version control tools to manage this document as we do our code, and the Government Digital Strategy was also produced that way.","description":"All software development projects must use a version control system. Version control allows you to track changes to code over time, meaning that you can quickly step back to an earlier version where necessary and you can annotate your changes with explanatory details to help future developers understand the process. Version control will also provide tools to audit who has made changes to the code and what has changed.","link":"/service-manual/making-software/version-control.html"},{"title":"Completion rate","indexable_content":"What you will be measuring How to measure completion rate When to measure completion rate Before the transaction starts Start and end points Drop-outs Saving or resuming progress during a transaction Multiple endpoints Offline fulfilment How frequently should I measure task completion rate? How can I test the completion rate before launch? What about post launch? during the discovery phase you     ensure all transaction pages have unique URLs       develop a plan to measure completion rate throughout product development       assess the available analytics tools      ensure all transaction pages have unique URLs develop a plan to measure completion rate throughout product development assess the available analytics tools in your alpha you     benchmark task completion rate via usability testing and establish reasons for failed transactions       procure digital analytics tool      benchmark task completion rate via usability testing and establish reasons for failed transactions procure digital analytics tool during your beta you     conduct another round of usability testing to ensure that task completion rates improve      conduct another round of usability testing to ensure that task completion rates improve when a service is live you     analyse task completion rate to continually improve the service       carry out further usability testing to continually identify any usability problems and feed into service design      analyse task completion rate to continually improve the service carry out further usability testing to continually identify any usability problems and feed into service design When users are unable to complete a digital transaction it can lead to avoidable contact through other channels. This in turn leads to low levels of digital take-up and customer satisfaction, and a higher cost per transaction. Measuring end-to-end completion rates helps identify whether users have problems completing a transaction; subsequent analysis of drop-out rates at each step of a transaction can then pinpoint the specific processes that users fail to complete. The completion rate measures the proportion of people who start a transaction and are able to complete it. A transaction is a self-contained process that the service manager has defined in relation to the service. Typically this will be completing an entire transaction from end to end but where a transaction can be completed only partly online, it may be completing a discrete process within the transaction: booking an appointment or completing a part of an application, for example. The end-to-end completion rate can be calculated as the number of completed transactions divided by the number of started transactions; it is expressed as a percentage.  Users should be told clearly what the outcome of the transaction will be, who can use it, how long it is likely to take, and what they will need to complete it (eg a reference number or credit card) before the transaction has started. They will also need to be provided with the eligibility criteria and the costs to complete the transaction. This will help to reduce dropouts later in the transaction. Typically this information will be given on a single page. In some cases, there may be a set of pages that checks a user’s eligibility based on information they provide. It should not be possible to bypass start pages via links or search engine results. Users who try to access another transaction page directly should be referred back to the start page, unless they are resuming a previously saved transaction. Transactions will begin and end on GOV.UK to allow GDS to monitor completion rates.  A transaction is considered to have started only when the user proceeds from the start page. A user then has to reach the end page before the transaction is counted as complete.  Data on the number of started and completed transactions will be shared with service owners.  Service managers will be responsible for measuring and monitoring drop-out rates within transactions which are not hosted on GOV.UK. You should analyse this data and use it to improve your service. You should build your service with unique URLs for each step / page. This will make your service much easier to measure. Some services allow users to save a transaction mid flow and to resume it another time. Ideally it should be possible to match saved transactions with resumed transactions so that, for the purposes of completion rate, they are treated as one continuous process. Service managers could consider applying a nominal time limit to saved transactions after which, if they haven’t been resumed, they are classed as failed. Alternatively, saved transactions could be set to expire after a given length of time.                           Some services have complex flows and there may be several points at which a transaction can be successfully completed. These will need to be defined by service managers and should point to appropriate end pages on GOV.UK so they count towards the completed transaction total. Some transactional services have parts which are digital and others which are non-digital. For example, when granting a lasting power of attorney, users can start and finish the transaction online, but are required to print, sign and post a form in the middle of the process.  In these situations the second online part of the transaction should be treated as a resumption of the first part. Where it is not possible to match the two, the discrete digital parts of the service should be treated as separate tasks, with the measure completion rate measured for each.  Offline parts of the process can still be measured but this is likely to be done through qualitative feedback (e.g from surveys, diary studies, focus groups). In order to successfully measure your service completion rate, we recommend that: Completion rate should be measured continuously. Once the service is live this will be done on GOV.UK. Before launch completion rates can be measured with usability testing. This should be iteratively tested with at least five people.  This should identify over 85% of usability problems. Users will be given a pre-determined set of tasks that reflect what needs to be done to use the service. These tasks will include all aspects of using the service that apply, such as registering, applying, submitting, verifying, amending and unsubscribing. If users are having difficulty completing tasks, further development should be followed by further rounds of testing. Digital analytics will be the primary method for measuring task completion rates post launch. Please note that this relies on extra configuration in the analytics tool. It will not be available by default. The focus of the service team’s activities will be to continually improve this by monitoring where users are dropping out of the transaction process and testing out new designs for those pages. End to end completion rates will be piped automatically from GOV.UK’s digital analytics into the Performance Platform and will be publicly available from the point of launch. Further usability should also be carried out once a service have gone live to measure use of the service and identify any issues and improvements that can be made. ","description":"When users are unable to complete a digital transaction it can lead to avoidable contact through other channels. This in turn leads to low levels of digital take-up and customer satisfaction, and a higher cost per transaction.","link":"/service-manual/measurement/completion-rate.html"},{"title":"Measuring cost per transaction","indexable_content":"What you will be measuring How to measure cost per transaction What costs should be included How frequently should I measure cost per transaction? Cost per digital transaction accommodation, including capital charges for freehold properties fixtures and fittings maintenance utilities office equipment, including IT systems postage, printing, telecommunications total employment costs of those providing the service, including training overheads, eg (shares of) payroll, audit, top management costs, legal services, etc raw materials and stocks research and development depreciation of start up and one-off capital items taxes: VAT, council tax, stamp duty, etc capital charges (if they were not met separately when the service was established) notional or actual insurance premiums fees to sub-contractors distribution costs, including transport advertising bad debts provisions enforcement costs replacement costs of items notionally insured start up costs (those which can be capitalised in the accounts) Cost per transaction is an important measure of a service’s efficiency. As services become more efficient, the cost per transaction will fall. Cost per transaction is a measure of the total cost to the government of providing each completed transaction. You will also want to measure the difference in the cost of the transaction through each available channel. Understanding these costs will help you to accurately forecast savings and build a strong business case for making services digital by default. The average cost per transaction is calculated as the total cost of providing the service divided by the total number of completed transactions. The total cost includes all fixed and variable costs of the transaction through a given channel, including overheads. It does not include start up costs. Where resources (eg call centres) are shared with other services, costs should be apportioned. For example, if half of all calls received relate to a specific service, then 50% of the call centre costs should be apportioned to that service. The cost per digital transaction is the total cost of providing the digital service divided by the total number of transactions completed digitally, including assisted digital transactions. Where processes and costs are common to more than one channel (eg processing wet signatures for passports, or printing driving licences), they should be apportioned. For example, if half of all transactions are completed digitally, then 50% of the common costs should be apportioned to the digital channel. The full cost of the transaction should include: The following should be excluded: Cost per transaction is measured on a quarterly basis. It should cover the last twelve months to eliminate seasonal fluctuations. Cost per transaction should be measured for the existing service - if there is one - to create a baseline against which future cost per transaction can be compared. When the digital service is exposed to real users (whether in alpha or beta) it should be included in the reported cost per transaction.","description":"Cost per transaction is an important measure of a service’s efficiency. As services become more efficient, the cost per transaction will fall.","link":"/service-manual/measurement/cost-per-transaction.html"},{"title":"Digital take-up","indexable_content":"What you will be measuring How do I measure digital take up? What level of digital take-up should I aim for? What about services for users who are more or less than 82% online? When should this level of take-up be achieved by? What about assisted digital? Digital take-up is a long term strategic measure of how well digital by default service is working. You will monitor this on a monthly basis to track that it is on course with the desired performance trajectory. Digital take up is the proportion of people completing your transaction online, including Assisted Digital users. A digital transaction is one where the primary interaction between the user and the service has been through a digital user interface. Where it is possible to complete only part of a transaction online,  such transactions should still be classified as digital. Digital take up is calculated taking the number of completed digital transactions in a calendar month divided by the total number of transactions in the same month, expressed as a percentage. The total number of transactions will be made up of all non digital transactions including call centre transactions and paper based transactions. This data will need to be recorded and collected to ensure your digital take up figure is accurate. The Digital Landscape research found that 82% of adults in the UK are online. It therefore seems sensible to aim for something in that region. However, about a third of those online have never accessed government information or services online so this will involve a significant channel shift for most services. The extent to which people are online varies by age, gender and socio-economic status. The digital landscape research has a useful breakdown that should act as a guide. Digital take-up is a long term strategic measure and you should be looking to achieve the target level within five years of launch. Some users will never use the digital service but will still have to have access to the same level of service as those using the digital service. This is called assisted digital and departments will need to determine the appropriate mix of channels to support these users. For more information on assisted digital please refer to this section of the manual.","description":"Digital take-up is a long term strategic measure of how well digital by default service is working. You will monitor this on a monthly basis to track that it is on course with the desired performance trajectory.","link":"/service-manual/measurement/digital-takeup.html"},{"title":"Key perfomance indicators","indexable_content":"Understand user / stakeholder needs Decide what to measure Further reading Checklist Checklist Have you identified who your users and/or stakeholders are? Have you articulated your users and/or stakeholders needs? Have you prioritised services? the number of downloads a transaction’s drop off rate the payment success rate Are your metrics simple, actionable and collectable? Have you mapped your metrics to the relevant audience? Have you identified where your metrics will be sourced from? Do you know how frequently performance information is required by your users? In addition to the four core KPIs (cost per transaction, user satisfaction, completion rate and digital take-up) it is recommended that you consider other useful KPIs specific to your service that will help you measure and improve its performance. Different sets of users within each department will typically have their own requirements for each service. A Service Manager will need to see a range of metrics that help them make decisions about the service on a daily basis. You will need to identify the various users within your organisation, and prioritise their requirements. Technical requirements might include improving response time or server resilience; financial requirements could include reducing costs or increasing revenue. There may be a customer service requirement to improve customer satisfaction, or wider strategic aims to reduce fraud and error. These needs will typically be reflected in the organisation’s business objectives or in the business case for transforming a service. An approach that worked well for the GOV.UK was to run a brainstorming session to generate a long list of metrics which we then narrowed down by asking senior managers, ‘if you had to choose one KPI, what would it be?’ Develop simple, actionable and collectable metrics based on your understanding of user and stakeholder needs. Identify where that information will come from and how frequently it will be needed. Think especially about the functions your service is relying on and try to identify some KPIs to ensure you are constantly monitoring and improving these functions. You might want to measure things like: It’s good practice to record every event generated by the system even if it’s not currently of interest. Measure everything (where it is cost-effective and practical to do so). This maximises the flexibility to come back later and revise the chosen metrics and tailor data visualisations to different audiences. The NAO report Digital Britain One: Shared infrastructure and services for government online identified that there was a lack of information on the costs and associated benefits of digital services. Occam’s Razor is an excellent blog by Avinash Kaushik with loads of useful advice on metrics, KPIs and analytics. See for example this article on how to set good performance indicators. GDS is developing a performance platform which will allow aggregation of data from a range of sources including web analytics, survey and finance data.","description":"In addition to the four core KPIs (cost per transaction, user satisfaction, completion rate and digital take-up) it is recommended that you consider other useful KPIs specific to your service that will help you measure and improve its performance.","link":"/service-manual/measurement/other-kpis.html"},{"title":"User satisfaction","indexable_content":"What you will be measuring How to measure user satisfaction What happens if a user exits the transaction mid way through? When to measure user satisfaction What about post launch? Further reading Very satisfied     Satisfied       Neither satisfied or dissatisfied       Dissatisfied       Very dissatisfied      Satisfied Neither satisfied or dissatisfied Dissatisfied Very dissatisfied during the discovery phase you     benchmark the existing service for future comparison       develop a plan to measure user satisfaction throughout product development      benchmark the existing service for future comparison develop a plan to measure user satisfaction throughout product development in your alpha you     benchmark user satisfaction via remote usability testing and/or a satisfaction survey      benchmark user satisfaction via remote usability testing and/or a satisfaction survey during your beta you     measure user satisfaction via remote usability testing and/or satisfaction survey       identify why people are dissatisfied or not completing transactions and take steps to improve      measure user satisfaction via remote usability testing and/or satisfaction survey identify why people are dissatisfied or not completing transactions and take steps to improve when a service is live you     measure user satisfaction continually and monitor results on at least a monthly basis       carry out a more comprehensive user demographics, usage and attitudes survey every six months      measure user satisfaction continually and monitor results on at least a monthly basis carry out a more comprehensive user demographics, usage and attitudes survey every six months    ‘Please tell us why are you unable to complete this transaction.’  A good service enables users to complete tasks successfully. Satisfaction provides a qualitative measure of how satisfying the experience is. Many government transactions are mandatory and therefore not inherently enjoyable - sometimes referred to as grudge transactions - but you should endeavour to make them as pleasant as possible for users, who may be nervous or stressed when interacting with the government. Asking users how satisfied they are with a service can provide a measure of all the elements contributing to the overall user experience such as ease of use, navigation and design. Defined as the percentage of people who answered either “very satisfied” nor “satisfied” on a five-point scale in response to the question: Q: Overall, how satisfied were you with this [eg car tax] service today? GOV.UK will provide a user satisfaction survey at the end of your transactional service and make this data available. You should measure all user journeys through your transaction to understand drop off points. If a user drops out your should try and collect some qualitative data to explain why they did not complete the transaction. For example: ‘Please tell us why are you unable to complete this transaction.’ Although this survey will not be contribute to the overall measure of user satisfaction it will help you understand service drop of points and find ways to improve transactions. In order to successfully measure the user satisfaction of your service we recommend that: An exit survey will be run continuously on your service, and report satisfaction on a monthly basis. You can use this data to improve your service. You should also carry out a more comprehensive user satisfaction survey every six months. You could consider analysing the key factors driving satisfaction with the service. For example, by asking additional questions (eg on ease of use, accuracy, look and feel) you can determine which of those factors is most positively contributing to user satisfaction and hence prioritise where to focus ongoing design efforts. Survey design","description":"A good service enables users to complete tasks successfully. Satisfaction provides a qualitative measure of how satisfying the experience is.","link":"/service-manual/measurement/user-satisfaction.html"},{"title":"Using data","indexable_content":"Understand user needs/decide what to measure Install and configure platforms Establish a baseline Aggregate data Analyse and visualise data Monitor, iterate, and improve Further reading Channel used to access service: through which channel(s) did the user find out about and attempt to use the service? New vs. repeat visitors: are first time users behaving differently to those who have used the service before? Geographical region: how popular is the digital service by region and how does that compare with online penetration in general? Product type: does the user experience vary depending on the type of product or service? Value: is performance dependent on the monetary value of the product or service being sought? Dashboards: are objective-focused and will help inform decisions, often with the help of real-time data. Reports: provide regular, scheduled snapshots of data and tend to require extra - context and time to digest. Alerts: are used to inform the users about a change or an event, often using attention-grabbing delivery mechanisms. keeping charts plain: don’t use shading, 3D or other distracting effects removing clutter: don’t use trend lines, grid lines, unnecessary labelling not using pie charts: they require more space and are harder to read than bar charts using text where a chart adds nothing. Price: can the price be changed, for example to attract people to the digital channel? Product: can the user experience be improved (eg from user feedback, user testing, A/B testing, multivariate testing)? Placement: can the digital service URL be placed on printed materials and voice recordings? Promotion: can greater use of email and social media be used to promote repeated use of the digital service? Simply collecting information about how a service is running isn’t enough to make judgements about how to improve it. A process of continual iteration accompanying close measurement will help you to see what needs improvement and how to investigate ways of improving a service.  The core KPIs (cost per transaction, user satisfaction, completion rate and digital take-up) established in the service standard, and any other KPIs you choose to measure must accurately reflect the needs of your users and stakeholders.  This will allow you to measure a service’s ability to meet those needs. While building your service you should make sure that appropriate analytics tools are being used to monitor the service, collecting the data neccessary to produce accurate and timely measurements. Guidance for choosing and installing these packages is available within the manual. Establish a ‘baseline’ based on current performance trends by channel, against which changes to the service will be judged. This will help you pinpoint the effectiveness of your initiatives, and identify what worked. It is good practice to look at performance trends over time, rather than take a snapshot at a particular point in time. Peaks and dips in performance are then measured relative to this base (or trend) line which helps to identify the effect of communications or design initiatives. It also reveals seasonal variations in performance. Collect and aggregate performance information from multiple sources and across multiple channels. Make sure you understand what this will mean in terms of system requirements. Combining data often reveals useful insights, for example into service efficiency (eg cost per transaction and total cost to serve) or proportional usage by channel (eg percentage digital uptake vs post, phone etc). Communicate performance information to your users through the appropriate dashboards, reports and alerts. Highlight specific segments that you know users are interested in, and make sure that your visualisations are simple, actionable and contain minimal amounts of chart junk. Typical segments include: By making your visualisations clearly visible you maximise the likelihood that the information will be acted upon - and services thereby improved. Best practices include: Test a range of performance improvement initiatives and monitor to see which work well. These can be piloted on a subset of your users to minimise risk. Implement the best performing solutions widely and then repeat this process relentlessly: what you measure will change over the course of a product or project’s lifetime. Any service that meets user needs will include an element of user feedback. This should be monitored and acted upon so as to continually improve the service for users. A range of options are available for improving the overall performance of a service. The following examples are based on the 4 Ps of marketing: Taking an iterative approach to service development increases the pace of improvement and minimises the risk of failure. Don’t wait until the end to do this, it should happen continuously throughout the process. This article in The Guardian shows online customer satisfaction scores for retailers. These scores are based on the Customer Satisfaction Index. Great article by Mike Loukides on the role of the data scientist. Total Cost to Serve is a method (PDF, 79k) for calculating the cost of a transaction for both the service provider and the user. HMRC have developed a method for calculating the cost of users time when interacting with government. This is important because some channels may be quicker to use than others. Designing with Data is an excellent book by Brian Suda which helps you to design beautiful and powerful data visualisations. Juice Analytics is a great website with loads of useful resources on how to design and develop useful data visualisations and dashboards. Edward Tufte’s The Visual Display of Quantitative Information is a seminal work on data visualisation and introduces the concept of chartjunk. The Flowing Data blog by Nathan Yau is a useful source of data visualisation news. The D3 Gallery is a stunning collection of data visualisations. Nicely presented overview of some of the tools available for data visualisation. This article in Wired shows how A/B testing was used to good effect in Obama’s election campaign. This article in eConsultancy shows how multivariate testing was used to improve conversion rates at Lovefilm.","description":"Simply collecting information about how a service is running isn’t enough to make judgements about how to improve it. A process of continual iteration accompanying close measurement will help you to see what needs improvement and how to investigate ways of improving a service.","link":"/service-manual/measurement/using-data.html"},{"title":"Devops","indexable_content":"Why we do this Good habits Warning signs Further reading Culture Automation Measurement Sharing Cross-functional teams – working to break down silos is easiest done when teams are composed of people from different functions. This helps with the team owning the end-to-end quality of service. Widely shared metrics – knowing what good looks like across the service is important for everyone, and sharing high and low level metrics as widely as possible is a good way of building understanding. Automating repetitive tasks – using software development to automate tasks from across the service is a good way of fostering a better understanding of the whole service, as well as freeing up smart people from repetitive manual tasks. Post-mortems – issues will happen and making sure everyone from across different teams learns from them is critical. Running post-mortems with people from different groups is a great way of spreading knowledge. Regular releases – releasing software is often a bottleneck in siloed organisations, as the responsibilities of the different parts of the release are often spread out across teams. Getting to a point where you can release regularly (even many times a day) requires extreme collaboration and clever automation. devops tools (nearly always marketing) a devops team (in many cases this is just a new silo of skills and knowledge) devops as a job title (you wouldn’t call someone “an agile”) What devops means to me What is this devops thing anyway? What is devops (and the wall of confusion) There’s No Such Thing as a “Devops Team” Those interested in devops are often also interested in Configuration Management, Monitoring and Release Management Many large organisations have evolved to have very separate development, quality assurance and operations business units. In many cases the overhead of communications and the misaligned incentives of the different groups leads to slow delivery and a mountain of interconnected processes. In extreme cases these units may be geographically separated, work for different organisations or under completely different management structures. Devops is a cultural and professional movement which has grown out of these frustrations. It is not a methodology or framework, rather some high minded principles and a willingness to break down silos. Specifically devops is all about culture, automation, measurement and sharing. It is important to realise that devops requires a culture shift, towards shared ownership and collaboration across silos involved in building and managing a service. Especially for existing organisations this is by far the most important element. Many business processes are ripe for automation. Automation removes manual, error prone tasks allowing people to focus on the quality of the running service. Common areas that could benefit from automation are release management, provisioning, configuration management, systems integration, monitoring, orchestration and testing. Using data to drive change can be hugely powerful, in particular when it is done to involve people from different groups in the quality of the end-to-end service delivery. Collecting information from different teams and being able to compare it across former silos can be transformative on it’s own. People from different backgrounds (say development and operations) often have different, but intersecting skill sets. Encouraging sharing between groups helps to spread an understanding of the different areas of a successful service, making resolving issues about working together and not about contract negotiation. Without close collaboration between those building and testing software and those running it in production, the quality of the resulting service will be compromised. This happens in many ways, but the root cause is often functional silos; when one group owns a specific area (say quality) it’s easy for other areas to assume that area is no longer their concern. In areas like quality, release management or performance this is toxic. High quality digital services need to be able to adapt quickly to user needs, and this means close collaboration between different groups. A shared sense of ownership of the service and the problem is also important, as is a culture of making measurable improvements to how things work. Devops isn’t a project management methodology but you will hopefully adopt some of these good habits in your organisation. These aren’t unique to devops, but they do help with breaking down silos and with the above principles. Like agile, the term devops is often used for marketing or promotional purposes. This leads to a few common usages which are not necessarily in keeping with the above discussion. Watch out for:","description":"Many large organisations have evolved to have very separate development, quality assurance and operations business units. In many cases the overhead of communications and the misaligned incentives of the different groups leads to slow delivery and a mountain of interconnected processes. In extreme cases these units may be geographically separated, work for different organisations or under completely different management structures.","link":"/service-manual/operations/devops.html"},{"title":"Helpdesk","indexable_content":"Volume Forecast: What kind and how many contacts will we get? Handling Time: How long does it take to deal with the contacts? Service Level: How quickly must we respond to user contacts? Staffing and Scheduling: How do we need to staff and schedule to achieve this? Data Collection and Reporting: How are things going now that we’re live? Going Further In order to provide high-quality service, you will very likely want a dedicated group of specialists – or current staff dedicating some of their time – to handle user enquiries and to help direct them to the information they want. We’ll use the term ‘Helpdesk’ to refer to them. Your planning will be greatly aided by drawing on the traditional contact centre management and planning skill sets; if you do not have access to staff with these skills, you may have to work closely with other groups who do in a consultancy capacity. This may include the team at GDS, or outside specialists. You’ll need to have some idea of the volume and type of contacts that you will receive for the service you’re supporting. In many cases, you can use historical data for similar services as a baseline.  This element of your planning will also need to take into account the contact channels you intend to support (eg email, phone, chat, Twitter, Facebook, surface mail, etc.). Ideally, each of these channels will have a separate contact forecast to aid your planning.  This portion of your planning will also be informed by or will itself drive decisions about the technology you’ll use to route, handle, and store historical data from these contacts. You’ll also want to have at least some idea of the average handling time (AHT) and variance for each type of contact.  If you’re building with deep historical data, you may be able to model the AHT separately for each kind of contact. Minimally, you should use the best historical data available to calculate an average number of contacts per day that can be handled by a single agent doing a representative mix of contacts. You’ll also need to have an idea of the service level that should be maintained by your Helpdesk.   Generally, service level (SL or SLA) is expressed as x percent of contacts resolved in y time units. As an example, you might plan to answer 80% of your incoming email contacts in 24 hours.   You’ll need to know the desired service level to plan how many agents you’ll need for your Helpdesk.  Conversely, if your staffing is constrained by other factors, you may use this value as a constant and solve for the best service level that can be achieved at a certain volume level. Once you’ve planned for volume, handling time, and service level, you can finalise your demand forecast for contacts and plan to add staff as necessary to handle these contacts.  The same historical volume you used to create your contact forecast will likely give you an idea of how the contacts will be received throughout the planning period (likely a week). This, in turn, will give you good direction on how to schedule your Helpdesk staff to achieve the service level you’ve planned for. Once your Helpdesk is operational and actually supporting users, you can collect data on all the areas for which you planned. This data can then be used to improve and refine the forecasts you made previously and to create longer-term projections about the performance of your Helpdesk.   You will want to develop at least minimal reporting to allow you to evaluate how the group itself and the individuals in it are performing. Depending on the size of your Helpdesk and the details of your contact mix, this might be very detailed and sophisticated or very simple, but you’ll want to plan for how to measure these elements from the very beginning.  The points above are good starting points to consider as you plan to support new digital products and initiatives. There is a quite extensive body of online information that expands on the points made here, including some free planning tools. However, as with all areas of specialised knowledge, you should ideally access the services of an experienced analyst rather than depending entirely on online sources for guidance.","description":"In order to provide high-quality service, you will very likely want a dedicated group of specialists – or current staff dedicating some of their time – to handle user enquiries and to help direct them to the information they want. We’ll use the term ‘Helpdesk’ to refer to them.","link":"/service-manual/operations/helpdesk.html"},{"title":"Hosting","indexable_content":"Deciding how to host your application Types of provider Make your decisions carefully Further reading Ownership Co-location Shared or managed hosting Infrastructure as a service Platform as a service technical requirements of your software applications future capacity requirements user support reliance and redundancy mandated government information security requirements government network connectivity cost of service flexibility and on-demand billing different operating models, as detailed above Why IaaS? a blog post about why the Government Digital Service chose an Infrastructure as a service for GOV.UK G-Cloud the procurement framework intended for purchasing Infrastructure as a Service, Platform as a Service and Software as a Service products The software running your service will need servers to run on. This guide will help you decide how you host your applications and the things to think about if selecting a vendor. The recommended approach is to involve a small cross-functional group of people. They will quickly assess different options, shortlist suppliers, interview  and finally make a decision. This group should include people with a knowledge of the available procurement options and acceptable costs but must include people with a hands-on technical understanding of the service and underlying software. It is important to keep good notes from any interviews or deliberation sessions and to assess different suppliers equally. A scoring matrix can help here. It is worth stating that it’s very common to use multiple suppliers. This may be due to them offering different but compatible services or potentially for additional redundancy. This can be technically challenging but for larger projects can provide extra resilience. There are a number of different approaches taken by suppliers of hosting services, which can make comparing offerings difficult. The following is intended only as a brief introduction. This advice is complicated because many service providers redefine the meanings of hosting terms for marketing reasons. In particular Infrastructure as a service and Platform as a service are marketable at the moment and often used incorrectly. Always look into the details of the services being offered. For particularly large projects with very specific requirements you may decide that purchasing hardware and even running a dedicated data centre is suitable. The costs and timescales involved here are very high and this is unlikely to be the best option in most cases. Many providers offer co-location services which is where you purchase your own hardware to put into a managed data centre. This provides a great deal of flexibility but can introduce lead times and other physical constraints. It also requires a wide range of technical specialist skills.  Lots of service providers have a shared or managed hosting option. This tends to mean renting specific virtual or physical machines for fixed periods of time. Different suppliers offer different management services; some just manage the underlying machine while others will support the operating system and even specific applications running on the machines. In the last several years Infrastructure as a service has become a common approach to managing hosting and infrastructure requirements. This tends to involve a capability to rapidly add or remove capacity, often in minutes, and to be billed only for what is used. This provides a great deal of flexibility and the ability to hold costs down but also requires a degree of technical skill to manage well.  Similar to Infrastructure as a service above, Platform as a service offerings tend to allow for quickly adding or removing capacity and fine-grained pay on demand pricing. The difference is is that you are abstracted away from the underlying infrastructure completely. The unit here is the running application, not a virtual or physical machine. Using a Platform as a service places a number of constraints on the software architecture but can move the support burden for parts of the stack onto the supplier. Making a decision about your hosting supplier involves weighing up a wide range of different components, including: This is, unfortunately, a technical field with many options. Seemingly similar services can have wildly different architectures or different cost models can result in large differences in total cost of ownership. It is recommended to involve technical colleagues or trusted third parties in any discussions and decision.","description":"The software running your service will need servers to run on. This guide will help you decide how you host your applications and the things to think about if selecting a vendor.","link":"/service-manual/operations/hosting.html"},{"title":"Load and performance testing","indexable_content":"Capacity planning Test things yourself, as well as with vendors Types of testing Further reading Load testing Performance testing Matt Cutts from Google on page speed Distributed Denial of Service attacks Capacity Planning Presentation History is littered with countless Government projects which collapsed under load or which worked slowly enough to frustrate users. As a Government service it is important that your systems and applications are performant and can deal with expected (and unexpected) levels of traffic.  This means doing some capacity planning work up front but it also means doing specific load and performance testing.  Capacity planning is the process of determining what amount of infrastructure and software is required to run a live system. Importantly you should also look at how this changes over time. Will traffic or database load increase every month as the site grows, or are some days or months (self assessment deadline or bank holidays) particularly spikey.  The output should help with both estimating ongoing costs as well as setting up realistic load and performance tests. There are several companies that offer products and services around load testing. In many cases working with these can be useful, especially for final testing or testing of mature components.  However it’s important to also have some capability within your development team to do more ad-hoc load and performance testing. This is important to allow for a rapid iterative development style, otherwise scalability or performance issues may be introduced but caught late, when they are much harder to fix. Although related, and tested in similar ways, load testing and performance testing are done for different reasons. It’s worth understanding the subtle difference and making sure you consider both when testing and analysing results. We test sites and applications under realistic load to ensure that, when launched, they work for the people using them. This should involve testing in load in excess of expected traffic in order to simulate certain types of Denial of Service (DoS) attack, including a Distributed Denial of Service (DDoS) attack. Even if a site or application is able to scale out successfully it doesn’t mean it is fast. Site performance is a factor of many things, from the software running the site to the networks, proxies and caches involved in serving traffic over the internet.  Fast sites are generally much more effective to the extent that Google now includes performance in its algorithms for determining which sites to feature in search results.","description":"History is littered with countless Government projects which collapsed under load or which worked slowly enough to frustrate users. As a Government service it is important that your systems and applications are performant and can deal with expected (and unexpected) levels of traffic. ","link":"/service-manual/operations/load-and-performance-testing.html"},{"title":"Managing user support","indexable_content":"Stratifying contact data Potential dimensions for stratification Sending the data to appropriate groups Treating contacts as defects Improvement projects question problem complaint Freedom of Information (FOI) request non-actionable rant Once you have created a helpdesk, you will want to figure out how to make the best use of user feedback to improve your service and the user experience. Your ability to act quickly and constructively on user feedback will ultimately depend on the degree to which you can stratify contacts for analysis. Depending on the complexity of your contact types and the sophistication of the systems you use to handle them, this might be almost completely manual (with metadata created for the contact by the staff handling it) or largely automated (with the software you use to aid contact handling adding most of the metadata automatically). Minimally, you’ll want to stratify contacts by channel (phone, email, chat, social media, surface mail, etc.) and by the target group that can act on the feedback. For example, some feedback may be directly dealt with by your organisation, while other types may need to be sent to other departments or groups for their use. In addition to the very basic channel and target stratifications mentioned above, you will likely want to consider the following categories as potentially applicable to your contacts/feedback: Enquiry type Is the contact a:  Requester details You will want to be very thoughtful about data collection of user details, given privacy concerns, but you will almost certainly want to gather minimal detail on the requesters of your contacts. Reply type Is a reply necessary/expected or not? Enquiry status Whether a contact is open, pending some other action, solved, etc. Enquiry category or categories Some internal sectional or functional categories along which you’ll want to be able to stratify–think of separate URLs or sections on a large website as a concrete example. Service category or categories Aspects of the handling processes you use that you should capture for further analysis–support level, priority, internal resolving group, resolving agent(s), day/date/time received, and day/date/time resolved are all examples you’ll likely want to have available for analysis. Root cause category or categories The ultimate reason for the contact; for example, page failing to load, database down, forgotten password, user error, software bug, etc. As with most of these categories, you will tailor these categories based on the specifics of your product and support model. Once you have gathered data for contact stratification, you’ll need to decide how to share it. If all the data can be handled and used directly within your organisation then this step may be easier, however there will likely be different teams that will act on different types of problems, some of them outside of your department. Depending on the nature of your contact handling systems, you may be able to use automation to do most of this routing, and you should plan for that if possible. One very ambitious improvement model that you can use treats each contact from a user as ultimately due to a defect in the service itself, either in your support model for it or in the communications processes you use to handle contacts.  While this perhaps overstates the reality for some kinds of contacts–is a user’s email of thanks and appreciation genuinely a defect?–it is an excellent way to focus critical thinking on how you provide service.  Once the contact-level improvement data has been sent to the right group, you can begin doing analysis for process improvement. You may want to marry your contact level data with cost data to help prioritise which areas to target first, but you may also simply use the number (or percentage) of affected users as a prioritisation mechanism.  In any case, you will want to have access to staff with experience in process analysis and improvement, ideally with relevant contact centre or technology experience. Directly involving the individuals who handle contacts and those who built the service into improvement projects will yield better and faster results.","description":"Once you have created a helpdesk, you will want to figure out how to make the best use of user feedback to improve your service and the user experience.","link":"/service-manual/operations/managing-user-support.html"},{"title":"Monitoring","indexable_content":"Setup monitoring early Include high level checks Errors are interesting Widely available Further reading to be alerted to problems affecting the availability of the service so they can be resolved to aid with capacity planning activities by providing metrics over time to identify potential future problems to find areas of improvement, for instance badly performing systems or inefficient services to be able to identify the root cause of an outage after the fact, based on data collected during the problematic event Radiating Information gives examples of some of the monitoring dashboards used while building GOV.UK Open Source Monitoring explains some of the terminology and available open-source tools Any online application should have some tools dedicated to alerting the people running the service to problems. This might involve low level issues involving the infrastructure underpinning the service to a sudden high rate of user errors. Knowing the current state of your service and infrastructure can help identify problems before they happen, as well as alert you to issues that need immediate attention. The main goals are: Monitoring is not something that should be left to the end, to be tacked on as part of running the final production service. By talking about monitoring, and agreeing an approach, you are more likely to build useful checks as you go along. Writing tests at the same time as writing code is common, monitoring checks can be viewed as tests for the running system. Often monitoring is seen through a very technical lens, so teams may only look at web application performance, available disk space or memory usage. Although these are important it’s also essential to track these alongside more business related metrics.  For example being able to compare page loading tests with failed transactions and application errors can alert you to problems and help identify the cause at the same time. It also grounds conversations about low level problems (disk space, slow performance) in terms of the service performance.  When errors occur they should be recorded and tracked over time. Errors always contain interesting information, potentially about a user problem, attacks in progress, failing systems or just a capacity problem.  It’s important to be able to see errors both at the level of the entire system and related to a particular application or machine. The monitoring system, or rather any dashboards, interactive tools or reports, should be as widely available as possible. They should ideally be useful outside just the group responsible for the day to day operations and systems administration.","description":"Any online application should have some tools dedicated to alerting the people running the service to problems. This might involve low level issues involving the infrastructure underpinning the service to a sudden high rate of user errors.","link":"/service-manual/operations/monitoring.html"},{"title":"Operating a service.gov.uk subdomain","indexable_content":"One entry point Creating a domain Subdomains Transport Layer Security Cookies robots.txt and root level redirections Origin Servers for CDN-based provider of DDOS Protection Emails sent to service users www.servicename.service.gov.uk is for the public facing, dynamic web pages that make up your service. assets.servicename.service.gov.uk is for assets such as static images and shared javascript files needed to run your live service. Note: written content about the service, such as guides to eligibility or detailed guidance for applicants, should be on GOV.UK. admin.servicename.service.gov.uk is for features that enable non-technical staff to run the service (eg contact centre staff might use this subdomain to access and process work items where human judgement is needed).      Have a robots.txt file on the www, admin and assets subdomains asking search engines not to index any part of the site. Example content for robots.txt is given below, and more details can be found on The Web Robots Pages:      User-agent: * Disallow: /          Have an HTTP 301 redirection from the top-level index page of the www and assets subdomains to the relevant start page on GOV.UK. (Note: this means that the service start page on GOV.UK SHOULD NOT link to the root of the www domain.)    www-production.servicename.service.gov.uk admin-production.servicename.service.gov.uk assets-production.servicename.service.gov.uk the DDOS protection provider’s servers the locations where the service itself is being developed and/or managed    Note: This document is written as a ‘standard’, and as such uses the words MUST, SHOULD, MAY and MUST NOT as defined in RFC 2119.     Note: This does not apply to the set of interactive tools on GOV.UK known as ‘smart answers’ which are developed and maintained by GDS in partnership with other government departments.  Government offers a number of different digital services to citizens. While the start and end of a user’s journey will be on GOV.UK, the service itself will typically be hosted elsewhere, and will need a different domain name as a result. This page describes the use of service.gov.uk subdomains for hosting digital services. Note: This document is written as a ‘standard’, and as such uses the words MUST, SHOULD, MAY and MUST NOT as defined in RFC 2119. Every digital service offered by the UK government MUST have a single, well-known place on the Internet where users can go to when they want to use the service. That well-known place will be the relevant start page on GOV.UK – for instance, the DVLA’s tax disc service is at https://www.gov.uk/tax-disc. Service managers MUST NOT advertise any URL other than that of the GOV.UK start page as the starting point for the relevant service. This is what gets printed on literature and used in email signatures, TV adverts, etc. The start page URL for a given service will be allocated by GDS based on discussions with the service manager and analysis of user behaviour, search referrals and other relevant data. The transactional part of a service – the dynamically generated pages where users interact with the service – will typically not be hosted on the www.gov.uk domain. That means that each service needs its own domain name for the transactional part of the service. Note: This does not apply to the set of interactive tools on GOV.UK known as ‘smart answers’ which are developed and maintained by GDS in partnership with other government departments. For all new digital government services going live from 1 April 2013 GDS will create a domain name of the form servicename.service.gov.uk (where “servicename” is a plain English description of the service agreed between the relevant dept/agency and the Government Digital Service). This will introduce consistency across central government domains for digital services and remove the dependency on departmental subdomains (which are of course vulnerable to machinery of government changes) and the now-retired DirectGov and BusinessLink online brands. The process of obtaining a service.gov.uk subdomain begins either when the service manager asks a Government Digital Service product manager for a start page on GOV.UK (for services already under development at 13 March 2013) or when the service manager asks for a subdomain to be created via the GOV.UK service desks’s government contact form (for services where development starts after 13 March 2013).  Subdomains of service.gov.uk SHOULD describe the service (eg lastingpowerofattorney.service.gov.uk) and SHOULD NOT contain the name of the service owning department or agency (eg ministryofmagicwandregistration.service.gov.uk) The service-owning dept/agency will be given delegated authority to manage the domain and its subdomains, although in some cases this work will be carried out by third party suppliers. This section gives some guidance about which subdomains a service manager should create once they have been given control of servicename.service.gov.uk. Maximum number of visible subdomains The user-facing live service SHOULD be operated using at most three user-visible subdomains of servicename.service.gov.uk: You SHOULD NOT create separate domains for APIs unless there’s a really good reason to have a completely separate domain. (Really good reasons are few and far between.) Service managers should notify the Government Digital Service technical architects (via your Transformation team contact) if you intend to create user-visible subdomains other than the three listed above. We’re developing some patterns for more unusual system designs as well as for mainstream transactional services, and we’re always up for a discussion about exceptions and edge cases. Usernames and passwords If the service is a private alpha or private beta release then it should be protected by a username and password known only to the development team and the users who are testing the service. If a service, or part of a service, is a public alpha or beta releases then it should be clearly marked as such with a text label on every page (ie don’t use an image containing the word alpha or beta) and in every API response. Multiple environments It is good practice to have multiple ‘environments’ for the development, testing and live (aka production) versions of any service. The development and testing environments allow the team to assess the correctness and quality of the service before it goes live. Typically, the subdomains used to access a development or testing instance of the service are structured in the same way as the subdomains used in the live version of the service. Therefore, you MAY create other subdomains of servicename.service.gov.uk for use in testing and development, such as www-preview. and www-dev.. If there is a compelling reason to use a non .gov.uk domain for testing and/or development subdomains, that’s also acceptable. Regardless of the domain name used, web-based services on testing and development domains (including APIs) should be protected by a username and password along the same lines as private alpha and beta releases. Many services will collect personal information from users. It’s very important that this information can’t be intercepted by malicious third parties as it travels over the Internet. Therefore, all services accessed through service.gov.uk domains (including APIs) MUST only be accessible through secure connections. For web-based services this means HTTPS only (often referred to by the acronyms TLS or SSL, which both refer to the protocol underpinning these secure connections). Services MUST NOT accept HTTP connections under any circumstances. Once a service manager has verified that their HTTPS setup is working fine they SHOULD enable HSTS on the production domains (www., admin. and assets.), by setting HTTP an HTTP response header such as representing a commitment to HTTPS-only traffic for 14 days. Once the service manager is confident that HSTS is configured correctly, you SHOULD increase the commitment to months or years: Cookies used on www.servicename.service.gov.uk and admin.servicename.service.gov.uk MUST be scoped to the originating domain only. Cookies MUST NOT be scoped to the domain servicename.service.gov.uk. Cookies SHOULD NOT be used on assets.servicename.service.gov.uk (they introduce a browser overhead that slows down the response time for users without providing any benefit for the service manager). Cookies MUST be sent with the Secure attribute and SHOULD, where appropriate, be sent with the HttpOnly attribute. These flags provide additional assurances about how cookies will be handled by browsers. GOV.UK is the place for users to find all government services, so it’s important to ensure that users always start on the relevant GOV.UK page, rather than a different or duplicate start page on www.servicename.service.gov.uk. As a result, services need to ask search engines not to index pages on their domains, so that the relevant GOV.UK page and the service domain don’t compete with each other in search engine results. This can be achieved by redirecting users to the relevant GOV.UK start page if they go directly to the service’s domain name, and by asking search engines not to index pages on the service’s domain name. Therefore, every service hosted on a service.gov.uk domain MUST: Have a robots.txt file on the www, admin and assets subdomains asking search engines not to index any part of the site. Example content for robots.txt is given below, and more details can be found on The Web Robots Pages: Have an HTTP 301 redirection from the top-level index page of the www and assets subdomains to the relevant start page on GOV.UK. (Note: this means that the service start page on GOV.UK SHOULD NOT link to the root of the www domain.) If you have contracted with CDN-based DDOS-protection suppliers then you SHOULD register the following additional subdomains for use by your suppliers: Your suppliers will use these subdomains to address your www, admin and assets services. Detailed configuration advice for origin servers is outside of the scope of this document, but it is important to ensure that these ‘origin domains’ only listen for traffic from trusted source such as At present we advise against allowing DDOS protection suppliers to terminate SSL connections for transactional services carrying personal information, but this behaviour is not prohibited at present. Although SSL termination on the third party network would allow the supplier(s) to carry out additional analysis and potentially extra mitigations against certain types of attack, it would also give the supplier access to all the personal information being submitted to your service. There are obvious downsides to allowing this level of access, especially if the supplier’s network and processes have not been accredited to the same level as the rest of the service. It’s a risk based decision, but if in doubt we suggest a presumption against SSL termination on third party networks. Many suppliers offer IP forwarding DDOS protection, which does not have the same security issues as SSL termination, and is recommended in preference to SSL termination.  If your service requires transaction monitoring (which is not at all the same thing as DDOS protection) you should contact your CESG account manager for advice.  This is interim guidance and will be updated - check back in early May 2013 for an update. Emails to users of your service SHOULD be sent from a human-monitored email address that originates from the domain servicename.service.gov.uk (and not the dept/agency or any other domain name). You SHOULD enable SPF on the sending domain. You MAY also want to use DKIM on the sending domain; it can provide additional guarantees about message delivery and help recipients to more easily distinguish genuine mail from forgery.","description":"Government offers a number of different digital services to citizens. While the start and end of a user’s journey will be on GOV.UK, the service itself will typically be hosted elsewhere, and will need a different domain name as a result. This page describes the use of service.gov.uk subdomains for hosting digital services.","link":"/service-manual/operations/operating-servicegovuk-subdomains.html"},{"title":"Vulnerability and penetration testing","indexable_content":"Involve the right people Not just software Automate where possible Why we do this Further reading Liaise with CESG Use in-house expertise as well as external services OWASP Top 10 CESG CHECK provider search Fuzz testing Ensuring web based systems and applications are secure requires more than just good design and development. In order to identify vulnerabilities it is often a good idea to involve an independent body to help find potential security problems before releasing to the public. Sometimes referred to as pen testing, vulnerability and penetration testing is the act of analysing and testing a service for security problems. This is often a specialist activity done via a third party. It’s often a good idea to view security testing as an ongoing activity for any project, not as a final check. Security is important to both a product and technical audience. It’s essential that vulnerability testing reports and the risks they identify are understood by non-technical audiences as well a developer audience.  Security is rarely binary, in that it’s not generally a matter of being secure or not, rather reducing the risks of a wide range of potential issues. CESG are the National Technical Authority for Information Assurance. Based at Cheltenham they provide both standards and advice for information security.  For any sizable project it is wise to engage with them as early as possible. They can provide guidance and expertise on potential problems and help you make sure the right things are tested. Testing for security issues should be done throughout the development of a service, as well as regularly when it’s up and running. Having third parties do this testing is a good way of introducing genuine experts and getting a different view on something. However it’s also important to make sure the team building the software know that security is the responsibility of the team, and not something that is outsourced. Remember that when testing for vulnerability to look at the whole system, not just the software involved.  An obvious example would be physical security (where is the equipment housed and how secure is it?) but a more interesting example is often the interplay between an online system and a call centre.  It may be that by using information available from a call centre you can exploit the software system in some way. For instance, getting a call-centre team to change an email address on record for someone else, and then using a forgotten password facility which relies on the email address being trusted. Although some level of exploratory manual testing is always a good idea when looking for vulnerabilities this is time-consuming and expensive. Having some level of automation can often be a good idea. This may take the form of tests written or tools used specifically to test the security of a feature. For instance static analysis or input fuzz testing. The web is a hostile environment, and the nature of Government services means they can be targets for a wide range of different threats; from financially motivated criminals and online activists up to nation states. Even where personal or sensitive information is not at risk the reputation of government can be damaged by even the smallest issues. Web application exploits tend to follow a relatively small number of common patterns, which means automated and manual testing, as well as awareness of these common problems can have a drastic effect on the security of the system. The Government Accreditation processes mandate some form of vulnerability testing, often working with CHECK approved suppliers. This should be viewed as the minimum effort required. ","description":"Ensuring web based systems and applications are secure requires more than just good design and development. In order to identify vulnerabilities it is often a good idea to involve an independent body to help find potential security problems before releasing to the public.","link":"/service-manual/operations/penetration-testing.html"},{"title":"Alpha phase","indexable_content":"What is the objective of an alpha? What should be in my alpha? How long does it take? Who do I need? What are the outputs? Related guides and resources gain greater understanding of service to trial design approach trial some technologies begin to form a team gain shared understanding of the service at a coding and integrations level understand what or who you will need to deliver a beta high level story cards plan for alpha / beta / live (decreasingly detailed) working basic system that provides limited functionality that can be shown to a number of users understanding around legacy systems to replace or wrap or integrate with cross-functional requirements decision to progress to beta phase When designing a digital system it is impossible to predict everything up-front. Each project features many challenges, and in your alpha you will start building solutions for these. You may need to bring more developers and designers into the team, but the whole phase should not last longer than about six to eight weeks. By the end of the phase you should have a clear idea of what’s required to build a beta. The objective is to build a working prototype. This will be used by stakeholders or a closed group of end users to: Following demonstration of your alpha, you may choose to discard the code and start fresh in the beta. If, however, your code is robust enough you may continue to iterate against your prototype. The alpha doesn’t need to be a complete, end-to-end service. You’re looking to demonstrate just enough so users gain some understanding of the service. Think of it as a proof-of-concept. Is the solution appropriate? Is your approach viable? Do you have enough understanding of your users’ needs to meet them? If not, find out more and make a new prototype. The alpha phase is another relatively short phase. At GDS, we try to limit these to about two months, running in week long sprints over a 6-9 week period. This phase involves a relatively small core team, who will be capable of rapidly iterating solutions. It will probably expand and contract in size as different specialisms are required. Next phase: beta Previous phase: discovery","description":"When designing a digital system it is impossible to predict everything up-front. Each project features many challenges, and in your alpha you will start building solutions for these.","link":"/service-manual/phases/alpha.html"},{"title":"Beta phase","indexable_content":"What is the objective of a beta? How long does it take? Who do I need? What are the outputs? Related guides and resources delivered a public, end-to-end prototype of the service high level story cards a user testing plan accurate metrics and measurements to monitor your KPIs a working system that can be used, for real, by end users You’ve tested your solutions to user needs and built up a clear picture of what it will take to build and operate your service. Now you will build an end-to-end prototype, test it in public and prepare to run it. The objective of this phase is to build a fully working prototype which you test publicly with users. You will continuously improve on the prototype until it is ready to go live, replacing or integrating with any existing services. This is achieved by delivering the user stories in the backlog created in the alpha phase. This is the time to resolve any outstanding technical or process-related challenges, get the service accredited and plan to go live. You will also be resolving technical and process challenges, meeting for the first time many of the technical criteria outlined in the service standard. You should be rapidly releasing updates and improvements into the development environment, and measuring the impact of your changes to the KPIs established in your discovery and alpha phases. The exact duration of your beta will depend on the scope of your project, but an appropriately sized team shouldn’t take more than a few months to deliver a public beta. Following the release of your beta you will spend some time iterating on the service until it is ready to go live. You will now know what size team you need to deliver the service, scoping it in response to the findings of your alpha prototype(s). It will be run by a single, suitably skilled service manager, and will include designers, developers, web operations specialists and performance analysts as appropriate. You will have: Next phase: live Previous phase: alpha","description":"You’ve tested your solutions to user needs and built up a clear picture of what it will take to build and operate your service. Now you will build an end-to-end prototype, test it in public and prepare to run it.","link":"/service-manual/phases/beta.html"},{"title":"Discovery phase","indexable_content":"Timescales Objectives The team Outputs Related guides and resources workshops simple mock ups paper prototypes plenty of whiteboard diagrams a prioritised list of user needs a prioritised list of story cards to feed into project teams understanding of landscape understanding of team and capability required to deliver the project ability to scope and plan an alpha a decision to progress to next phase maybe some rough prototypes The discovery phase is your chance to find out what the users of your service need, what the business requirements are and what technological or policy related constraints there might be. The discovery phase is your chance to gain an understanding of what the users of the service need, what the business requirements are and what technological or policy related constraints there might be. This is achieved through research, workshops and interviews. The discovery phase will give you a high-level understanding of users needs, what the existing service landscape looks like and a sense of what your initial prototypes will explore. The high level business context will become clear, and you will begin setting targets for your KPIs. You will also get a better understanding of the legacy interfaces and infrastructure you must deal with, and what existing process are in place for replacing or decommissioning these. This information is found through: A small team will be required, consisting of your stakeholders and any core team members that have been identified, including the service manager. The phase should not take longer than 4-8 weeks. During the final week you should be setting up the broad scope of a  project and an initial backlog to deliver against. This is known as an ‘inception’. At the end of the phase a decision should be made whether to proceed to the alpha phase. You will leave the discovery phase with: Next phase: alpha","description":"The discovery phase is your chance to find out what the users of your service need, what the business requirements are and what technological or policy related constraints there might be.","link":"/service-manual/phases/discovery.html"},{"title":"Live phase","indexable_content":"What does going ‘live’ mean? What next? Who do I need? Related guides and resources monitor system performance  optimise the code ensure the service remains secure You’ve been building a service to meet users needs, and after your public beta you have a tested solution that is ready to release. In order to provide a fully resilient service to all end users the service should now meet all security and performance standards. You have configured your analytics to accurately monitor the KPIs identified in the building of your service, and you have planned the transition or integration of any existing services. You have liased with the team governing the Digital by Default Service Standard to ensure that you have met the requirements of new and redesigned services. And, most importantly, you have met the user needs identified in the discovery, alpha and beta phases. This is not the end of the process. The service should now be improved continuously, based on user feedback, analytics and further research. Operational support - both technical and customer-focused - is in place, and you have implemented pro-active monitoring methods. These will help you to: You will repeat the whole process (discovery, alpha, beta and live) for smaller pieces of work as the service continues running. Find something that needs improvement, research solutions, iterate, release. That should be a constant rhythm for the operating team, and done rapidly. You will have identified the roles required to run your service, including the service manager and user support teams, while building the service. As different areas of your service are iterated and improved the team size will expand and contract, accommodating specialists as appropriate. Final phase: retirement Previous phase: beta","description":"You’ve been building a service to meet users needs, and after your public beta you have a tested solution that is ready to release.","link":"/service-manual/phases/live.html"},{"title":"Retirement phase","indexable_content":"What about the needs? What next? Data Let your users know Plan to redirect traffic    When we retired the DirectGov, BusinessLink and departmental websites, we invested a lot of effort in mapping content on those sites to GOV.UK content. We redirected as many of the old sites’ URLs as we could to corresponding GOV.UK URLs, and provided ‘Gone’ pages with links to the National Archive where the content was not being transferred. We wrote about that in “No Link Left Behind”  Even the best services may eventually reach retirement. Changes in policy may mean that the service is no longer offered or new understanding may mean that those user needs are better provided through a different service. Whatever the reason, the retirement of digital services should be handled with the same degree of care as their creation, with a constant focus on user needs. Your service will have been built to serve user needs. It’s vital to understand how those needs are to be addressed once your service has been retired, whether they are deemed to no longer exist, are no longer served by government, or will in future be served as part of another service. If the needs will no longer be met by government but will now be met by the private or voluntary sectors then it is important to understand what organisations will be expected to fill that function so that they can be adequately prepared and so that the appropriate online user journey can be developed. Similarly, if the needs are to be served as part of another government service or services then you should identify which services they are and begin a dialogue with those services’ teams so they can learn from your experience and so that you can understand how you will support your users to make the transition. The vast majority of users of your service will begin and end their journeys via GOV.UK. As soon as you know that your service is likely to be retired you should contact the GOV.UK team to ensure that those journeys are amended and appropriate information is supplied. The GOV.UK team will need to know why the service is being retired, and how those user needs are to be served in future so that they can provide the appropriate information, advice and links to users. For that majority of users who begin and end their journeys on GOV.UK the most important thing is to ensure that GOV.UK is updated. There will be some users, however, who access your service directly whether via links in emails, bookmarks on their computer or remembering your URLs. It’s important to prepare them for the change and lay out clearly what it will mean to them. Your planning should aim to produce the minimum possible disruption for users, but it will still be a significant change for them so details of what the change is, why it’s being made, what they will need to do, and what will happen to their data should be made easily available. Users who access your service via an API will need time to update their software to use the replacement service’s APIs or to make other relevant adjustments. You should reach out to your API users as early as possible and remember that they may have significant lead times for making and distributing changes. Changes to the service online will also need to be seamlessly tied in with messaging to offline users who are receiving the service through assisted digital channels. Once GOV.UK is updated the majority the vast majority of users will begin to be directed to the new service. Some users will still try and access the service at its current (now retired) home. You should have a plan for redirecting those requests to the appropriate new service, or to provide clear information about the service that has been retired in perpetuity. When we retired the DirectGov, BusinessLink and departmental websites, we invested a lot of effort in mapping content on those sites to GOV.UK content. We redirected as many of the old sites’ URLs as we could to corresponding GOV.UK URLs, and provided ‘Gone’ pages with links to the National Archive where the content was not being transferred. We wrote about that in “No Link Left Behind” In running your service you will have accrued a large amount of data about the service and its users. You should already have policies in place to manage that data responsibly, including details of how long it will be retained. Those policies will continue to apply, and you will need to ensure that there is support in place to maintain them. Where data is being transferred to a new service owner, that should be done in accordance with your existing data protection policies, and communicated clearly to your users. Previous phase: live","description":"Even the best services may eventually reach retirement. Changes in policy may mean that the service is no longer offered or new understanding may mean that those user needs are better provided through a different service.","link":"/service-manual/phases/retirement.html"},{"title":"Accessibility skills","indexable_content":"Accessibility leads Related links strong analytical skills a methodical approach to testing empathy for users with different, often contradictory needs an in-depth knowledge of modern accessible development best-practices the ability to communicate at all levels Accessibility is everyone’s responsibility. Provide training and resources to help your team build accessibility into everything they do. That includes planning, designing, building and managing. Include at least one person with strong accessibility knowledge in your team. Give them overall responsibility for educating and supporting your team’s accessibility goals. The key skills required by an accessibility-focussed developer are: Accessible, usable products are the heart of everything we do at the GDS. Your service needs to be just as thoughtful to the needs of all possible users so that no one is excluded on the basis of disability. Read the guidance on accessible design","description":"Accessibility is everyone’s responsibility. Provide training and resources to help your team build accessibility into everything they do. That includes planning, designing, building and managing.","link":"/service-manual/the-team/accessibility.html"},{"title":"Content designer job description","indexable_content":"Job description Competencies/skills required Essential Desirable identifying user needs using a range of tools and producing high-quality products to satisfy prioritised tasks content production     scoping, commissioning, writing, editing and publishing digital content across GOV.UK       assuring customer journeys through GOV.UK       managing relationships with subject matter experts to ensure content accuracy      scoping, commissioning, writing, editing and publishing digital content across GOV.UK assuring customer journeys through GOV.UK managing relationships with subject matter experts to ensure content accuracy being accountable for the delivery of content assets that are accurate, timely, high-quality (based on insight and outputs of user testing, relevant to audience, easily understood, SEO optimised) and consistent with the style guide being accountable for, choosing the optimum format for displaying information to the user and presenting ideas to product managers being accountable for ensuring appropriate policy and legal checking within other parts of government, and timely publishing of content assets monitoring the performance of content and tools and work with the product manager and a multi-disciplinary team to understand user behaviours and feedback, identifying ways to improve the effectiveness of content and to iteratively improve the product working with the product manager and other parts of government to proactively identify forthcoming changes in government policy and reactively respond to external events that will require changes in the content making timely and confident decisions to continually improve the performance of the product, and swiftly select the correct editorial option under stressful or emergency conditions being active in the development and application of content and format strategies and be an evangelist with GDS and other parts of government enabling central publishing activities as required, participation in the emergency publishing rota and other ad hoc activities building on the inter-dependencies and relationships between teams to create a common purpose clarifying and communicating team objectives, bringing a broader perspective to a team so that it can focus on different delivery approaches co-ordinating and monitoring team performance, utilising team diversity to maximise effectiveness identifying hidden or emerging issues and proposing decisive strategic action  probing evidence to identify strategic trends and links  analysing evidence from diverse sources to generate robust solutions and make timely decisions  investing time to understand customer and stakeholder expectations and priorities, developing services to meet those needs, including when they change  anticipating and managing problems, bringing issues and conflict into the open and taking pre-emptive action  identifying and introducing improved services to deliver customer and stakeholder requirements  extensive experience of writing for the web, with proven ability of creating content that complies with statutory accessibility requirements and using A/B testing frameworks excellent knowledge of the Internet with proven experience of working within a web application development environment, proficient in writing Markdown, picture sourcing and editing must have experience in choosing the optimum format for displaying information to the user experienced in working with content publishing systems using regular performance assessment to focus on the delivery of objectives and provide or gain timely and constructive feedback to agree development plans valuing contributions from everyone, rewarding productive behaviour and promptly addressing any poor performance ensuring equal access to learning and development opportunities to enable all people to realise their full potential contributing to the development of business cases, and programme and project planning ensuring efficient and effective use of resources to deliver programmes and projects on time, within budgets and to agreed quality standards managing across boundaries to ensure delivery of benefits and sharing lessons learned complying with guidance on finance policies and applying procedures correctly controlling budgets effectively, estimating, forecasting and monitoring resource usage to ensure that plans are kept on track advising on future resource requirements and assessing the implications of changing demands working with experts to ensure that diverse audiences can easily understand complex information  proposing ways in which communication and marketing can add creative and innovative impact  establishing systems and processes which enable effective information sharing NOTE: the following template was used to advertise a content designer vacancy at GDS\t\t\t\t You’ll be responsible for identifying and matching user needs to appropriate content formats, and creation, monitoring and improvement of content and style across all single domain formats. The main responsibilities of the post are: Leading and team working: Analysing evidence and thinking strategically: Focusing on customers and stakeholders: Specialist skills and expertise: Managing and valuing people: Managing and supporting programmes and projects: Managing finance and resources: Communicating and marketing:","description":"NOTE: the following template was used to advertise a content designer vacancy at GDS\t\t\t\t","link":"/service-manual/the-team/content-designer-jd.html"},{"title":"Content designer","indexable_content":"The importance of content designers Skills and attributes Guidance Job description identify user needs - based on legacy content, source material provided by policy colleagues, feedback from users and stakeholders and analytics data both from the site and from search engines gain an in-depth knowledge of a wide range of subjects - so they can make informed decisions about the best way to present information to users develop content plans and strategies - high-level plans showing how the identified user needs will be met write great content - in plain English, optimised for the web and according to house style edit content - making sure the site remains accurate, relevant, current and optimised both for users and search engines make tough decisions and work hard for the user - grappling with complicated legislation and turning it into clear, clean, crisp web content (that still has enough depth to be useful) work with developers and designers to create better solutions - for example, writing logic and content for smart answers understand and incorporate the results of user testing review the work of other editors - to ensure consistency and excellence across the site publish content - using various systems communicate the principles of good content design to others in the organisation advocate for the user and act as a ‘gatekeeper’ for the site - pushing back on change requests that don’t contribute to meeting user needs and incorporating change requests that do build positive relationships with others inside the team and in the wider organisation innovate and anticipate - excellent content designers are excited about the possibilities of web content and involved in the ongoing conversation in the digital sector Content designers make sure that the writing on the site or service meets the needs of the user as clearly, simply and quickly as possible. You can add up, but it doesn’t mean you’re an accountant. You can write, but it doesn’t mean you’re a content designer. For many reasons, in the past the government has often published content that’s difficult to understand and difficult to act on.  What gets published can be more about what the government wants to say than what the user needs to know. At best this results in a frustrated user. At worst, citizens and businesses get into trouble because they can’t understand (or can’t face wading through) difficult content. The content designer’s job is to make sure that doesn’t happen. Content designers must be able to: Read guidance in the manual of particular interest to content designers. Content designer template","description":"Content designers make sure that the writing on the site or service meets the needs of the user as clearly, simply and quickly as possible.","link":"/service-manual/the-team/content-designer.html"},{"title":"Delivery manager job description","indexable_content":"VACANCY ADVERT PERSON SPECIFICATION - COMPETENCES/SKILLS REQUIRED JOB DESCRIPTION - MAIN DUTIES OF THE POST Analysing Evidence and Thinking Strategically Managing and Supporting Programmes and Projects Focusing on Customers and Stakeholders Leading and Team working Managing and Valuing People Managing Finance and Resources Communicating and Marketing Specialist Skills / Expertise Essential Essential Essential Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential delivering projects or programmes with a strong understanding of agile and waterfall project management methodologies, change and risk management and the interaction between product development, implementation and support services. assuring all Government Digital Service Products meet the standard build requirements (eg functionality, usability, performance, scalability, security, resiliency, etc) managing tight resource constraints, conflicting priorities and a dynamic programme would be highly beneficial representing the Government Digital Service at senior level by providing governance and leadership to project teams and ensuring contract management support implementing business and cultural change and introducing new process and procedures to ensure business improvements are achieved managing geographically spread teams within a matrix management environment, deploying differently skilled resource throughout a variety of complex and challenging delivery projects detailed release planning and delivery through the complete release lifecycle working with technical teams at all levels, from design through to development and implementation thinks strategically when integrating complex or conflicting analysis from a range of sources to provide balanced advice makes sound, evidence-based decisions, assessing risks and defending decisions and action champions and encourages others to think strategically when developing new approaches or addressing novel problems manages people, resources and relationships efficiently to ensure effective delivery of programmes and projects delivers timely project objectives within budget and to quality standards, ensuring that business benefits are realised evaluates outcomes of programmes and projects to build capability and share lessons learned shapes, links and manages customer and stakeholder expectations to determine delivery capabilities, accounting for changing requirements builds trust and openness with customers and stakeholders, keeps them updated on progress and acts upon feedback empowers others to improve the scope, delivery capability, measurement and provision of customer and stakeholder services provides a vision and defines clear team roles, responsibilities and objectives empowers, motivates and inspires teams to deliver timely results, systematically reviews progress and team performance develops the capability of teams to deliver the Department’s objectives reinforces a culture that values all people and rewards productive behaviour, promptly addressing any poor performance ensures timely performance assessment to provide or gain constructive feedback on the delivery of objectives and equal opportunities for people to develop their capabilities aligns people’s development needs with strategic corporate requirements to enable talent to flourish ensures an appropriate understanding of roles and responsibilities in complying with guidance on finance policies and procedures anticipates business needs and managing resource requirements plans effectively and utilises budgets and resources, including the authority to re-deploy funds across functions, to deliver measurable value for money promotes effective information sharing uses experts to help ensure the effective communication and marketing of business objectives works in partnership with experts to define, plan, implement, review and measure the effectiveness of communication and marketing channels experience in delivering services through digital / web channels in a fast paced environment experience in Agile and Waterfall Project Management delivery methodologies strong estimation and budget scoping skills experience in structured programme and project management environments experience in open source and cloud technologies and their sourcing, or relevant/significant experience in the field. NOTE: the following template was used to advertise a delivery manager vacancy at GDS POST TITLE:             Delivery Manager\t\t\t\t\t\t\t\t PAYBAND:                A\t\t\t\t\t\t\t\t UNIT/DIVISION:          Government Digital Service\t\t\t\t\t\t\t\t LOCATION:               London\t\t\t\t\t\t\t\t TYPE OF POSITION:       Permanent\t\t\t\t\t\t\t\t The Government Digital Service (GDS) is at the centre of government, coordinating the digital strategy across all departments into a single, comprehensive and accessible Government website and supporting the government’s aims for a digital by default strategy. The GDS’s aim is to make government easier for the citizen to engage with, to build trust and to put users at the heart of this transformation. It does this by working alongside the Prime Minister’s Office, Cabinet Office and all government departments and their executive agencies – and a whole community of support outside government. Headed by Mike Bracken, Executive Director, The Government Digital Service comprises approximately 180 highly mobile and skilled IT professionals based in Aviation House. They form a number of specialised digital teams, including Digital Engagement, Business Transformation, the Innovation and Delivery Team, Directgov and the Single Domain Team. GDS is an innovative and exciting place to work and is fully engaged with delivering a better service to the citizen, business and to other organisations and with a digital vision for the 21st Century. To be effective within Government Digital Service you will have worked within structured programme and project environments, delivered a range of services through digital / web channels by sourcing and using open source and cloud technologies and have applied agile development methodologies. You will also have supported business change, rationalisation and transformation programmes. The Transformation team within Government Digital Service is responsible for two key areas: 1) The operation of the department’s portfolio and programme management processes. 2) The definition and delivery of the ‘Digital by Default’ mission across government. You will be responsible for driving the successful delivery of projects within the Transformation portfolio, within relevant time and costs constraints and to the appropriate level of quality. You will work closely with the Proposition Directors, Product Managers, in house delivery team and external delivery teams to build user centred digital products. The ability to work under pressure and be able to respond quickly to changing circumstances and to tight timetables is essential. You will need to be confident in dealing with, and influencing, senior officials, as well as producing clear advice on complex issues. FOR INFORMATION REGARDING RECRUITMENT PROCESS, ELIGIBILITY, TERMS & CONDITIONS: cabinet-office.external@dwp.gsi.gov.uk FURTHER INFORMATION REGARDING THESE POSTS: CLOSING DATE: EXPECTED SIFT DATE: EXPECTED INTERVIEW DATES: APPLICATIONS ARE WELCOME FROM PART TIMERS AND JOB SHARERS SALARY SCALE: The main responsibilities of the post are:","description":"NOTE: the following template was used to advertise a delivery manager vacancy at GDS","link":"/service-manual/the-team/delivery-manager-jd.html"},{"title":"Delivery manager","indexable_content":"The importance of delivery managers Skills Job description templates Guidance Further reading strong estimation and budget scoping skills experience in Agile Project Management methodologies familiarity with structured programme and project management environments experience delivering digital services experience in open source and cloud technologies and their sourcing good communication skills strong organisational and communication skills collaborative approach to working good at prioritising time-critical work an understanding of the wider digital landscape Good health check from the Scrum Alliance for delivery managers. A day in the life of a delivery manager - blog The delivery manager sets the team up for successful delivery. Remove obstacles, or blockers to progress, constantly helping the team become more self organising. They enable the work a team does rather than impose how it’s done. Skilled delivery managers remove obstacles, or blockers to progress, constantly helping the team become more self organising. They enable the work a team does rather than impose how it’s done. It’s not about micro managing! Equally important in an agile team – and particularly important to the delivery manager – is ongoing effort to improve products, services or processes. Their role in this is to facilitate project meetings- including daily stand-ups, sprint planning meetings, and retrospectives. They also track progress and produce artefacts for showing this, like burn down/up charts. They must be able to enable the team to produce estimates of how much effort is required to produce features that the Product Manager wants.  Delivery managers need to have: A delivery manager will also need the following skills: Delivery Manager Read articles in the manual of particular interest to delivery managers.","description":"The delivery manager sets the team up for successful delivery. Remove obstacles, or blockers to progress, constantly helping the team become more self organising. They enable the work a team does rather than impose how it’s done.","link":"/service-manual/the-team/delivery-manager.html"},{"title":"Designer job description","indexable_content":"VACANCY ADVERT PERSON SPECIFICATION - COMPETENCES/SKILLS REQUIRED Further reading: DUTIES & RESPONSIBILITIES producing design concepts for digital services for both GDS and departments it works with, often working to very tight deadlines design reusable elements of a digital service to drive up a consistent user experience designing and creating communication material for GDS, ensuring all elements are well designed, consistent and user focused deliver finished designs that meet web standards, ensuring that key elements for government such as accessibility are built into designs from the outset work as part of a multi-disciplinary team including other designers, developers, content designers and product managers to deliver highly user focused and successful services working with front end developers to implement design concepts ensuring all GDS output, internal and external, is well designed and user focused consistently producing work of an extremely high standard contributing to the direction of the design team contributing to a wider discussion about design within GDS be good at designing information regardless of what media it’s for have mastered basic typography and have an interest in learning more be able to create design concepts that answer a brief and go beyond expectations have contacts in the wider industry be comfortable speaking about your work to key stakeholders be able to work calmly under tight delivery deadlines be able to plan your day and resources present at internal show and tell have experience of web design / interface design. NOTE: the following template was used to advertise a designer vacancy at GDS POST TITLE:             Designer PAYBAND:               \tA UNIT/DIVISION:       \tGovernment Digital Service LOCATION:              \tLondon TYPE OF POSTING: To build world class digital services we need to build a world class design team. We’re looking for a mid weight designer to be part of this team. This is the ideal opportunity to gain experience working on large digital products used by millions of people every day. Let’s be clear about the impact of your work, making better digital services has a positive impact on millions of people. The ideal candidate will have a degree in design or similar, have a love of the web and its possibilities, a passion for design and its history and an understanding of how form and function work together. You will proactively seek new learning opportunities and welcome constructive criticism of your work. You’ll: Take 5 minutes to read our Design Principles to see how we think","description":"NOTE: the following template was used to advertise a designer vacancy at GDS","link":"/service-manual/the-team/designer-jd.html"},{"title":"Design skills","indexable_content":"How designers work How to hire designers Job description templates Further reading Specific guidance for designers working on digital by default services. Those with the title of designer may have a particular focus on one or more specific design disciplines – interaction, graphic, UX – but a good digital service needs talented, flexible designers to help build user-centred products. Designers and front-end developers should work together in one team, designing in-browser. This is a better way of working, avoiding silos and ensuring that decisions are made with complete awareness of the implications. As a result, the people you hire should already have worked like this, or at least understand it. Depending on the types of project you are tackling you may require a team of designers with a range of different skills. A good first hire for a team tends to be a strong interaction designer, however adding designers with graphic design skills and designers who also have a background in undertaking user research can also give your team additional flexibility and capabilities. We strongly believe that design and user experience is the responsibility of the entire team and must be considered from the outset of the project through to and beyond going live. UX includes how fast the servers are, to how the copy is written, to how the layout is implemented in code, and what the structure of the URLs is. It’s worth looking at Frances Berriman’s talk on this. When building a team ask to see examples of work and ask the designers to explain their practical contribution. You should look for the designer to share stories and documentation that demonstrates how they have worked closely with other members of the team including developers, content designers, user researchers and stakeholders in an agile and iterative way. When evaluating their design work, it is important that the designer can explain a strong rationale for their design decision making that is based in supporting user needs. This ability to explain their rationale convincingly is more important than their ability to show polished wireframes or designs in their portfolio. Often a lack of polished designs in a portfolio can indicate that a designer is highly collaborative or has strong development skills, so take care not to focus only on polished comps or layouts. You should also ask the designer to talk about any significant differences between the design they present in their portfolio and the actual live design. It is important that designers create appropriate work and are able to persuade stakeholders and their team to make good design decisions. See an example of a designer job description provided by GDS.","description":"Those with the title of designer may have a particular focus on one or more specific design disciplines – interaction, graphic, UX – but a good digital service needs talented, flexible designers to help build user-centred products.","link":"/service-manual/the-team/designer.html"},{"title":"Developer job description","indexable_content":"VACANCY ADVERT PERSON SPECIFICATION - COMPETENCES/SKILLS REQUIRED DUTIES & RESPONSIBILITIES Leading and Teamworking Analysing Evidence and Thinking Strategically Focusing on Customers and Stakeholders Managing and Valuing People Managing and Supporting Programmes and Projects Managing Finance and Resources Communicating and Marketing SPECIALIST SKILLS / EXPERTISE Essential Essential Essential Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable designing and building web and mobile products to serve a variety of citizens’ needs designing and implementing APIs for internal and external use building up a useful, robust automated test suite to support a Continuous Deployment environment being involved in the wider web development community, identifying good practices we can adopt and sharing our experiences solid experience of web application development, ideally in Ruby and Javascript training and mentoring new developers, and introduce non-programmers to programmers and programming provides a vision and defines clear team roles, responsibilities and objectives empowers, motivates and inspires teams to deliver timely results, systematically reviews progress and team performance develops the capability of teams to deliver the Department’s objectives thinks strategically when integrating complex or conflicting analysis from a range of sources to provide balanced advice makes sound, evidence-based decisions, assesses risks and defends decisions and actions champions and encourages others to think strategically when developing new approaches or addressing novel problems shapes, links and manages customer and stakeholder expectations to determine delivery capabilities, accounting for changing requirements builds trust and openness with customers and stakeholders, keeps them updated on progress and acts upon feedback empowers others to improve the scope, delivery capability, measurement and provision of customer and stakeholder services ensures timely performance assessment to provide or gain constructive feedback on the delivery of objectives and equal opportunities for people to develop their capabilities reinforces a culture that values all people and rewards productive behaviour, promptly addresses any poor performance aligns people’s development needs with strategic corporate requirements to enable talent to flourish delivers timely project objectives within budget and to quality standards, ensures that business benefits are realised manages people, resources and relationships efficiently to ensure effective delivery of programmes and projects evaluates outcomes of programmes and projects to build capability and share lessons learned plans effectively and utilises budgets and resources, including the authority to re-deploy funds across functions, to deliver measurable value for money ensures an appropriate understanding of roles and responsibilities in complying with guidance on finance policies and procedures anticipates business needs and manages resource requirements promotes effective information sharing uses experts to help ensure the effective communication and marketing of business objectives works in partnership with experts to define, plan, implement, review and measure the effectiveness of communication and marketing channels solid experience of web application development, ideally in Ruby and Javascript enthusiasm for sharing knowledge and working in a multi-disciplinary team. a habit of writing robust automated tests for your work ability to quickly learn new languages and frameworks and happiness to pick the right tool for the job enthusiasm for sharing knowledge and working in a multi-disciplinary team experience of building and scaling high-traffic websites knowledge of content management techniques, workflows, etc. ability to train and mentor new developers, and introduce non-programmers to programming concepts NOTE: the following template was used to advertise a developer vacancy at GDS POST TITLE:              Developer           PAYBAND:                 A    UNIT/DIVISION:           Government Digital Service                    LOCATION:                London     TYPE OF POSTING:         24 Month Fixed Term Appointment with possibility of extension or permanency. The post is fixed term to cover a finite piece of work.     The Government Digital Service (GDS) is at the centre of Government, coordinating the digital strategy across all departments into a single, comprehensive and accessible Government website and supporting the Government’s aims for a Digital by Default strategy. The GDS’s aim is to make Government easier for the citizen to engage with, to build trust and to put users at the heart of this transformation. It does this by working alongside the Prime Minister’s Office, Cabinet Office and all Government Departments and their Executive Agencies – and a whole community of support outside Government. Headed by Mike Bracken, Executive Director, and comprising of a number of specialised digital teams, including Digital Engagement, the Innovation and Delivery Team, Directgov and the Single Domain Team, the GDS is an innovative and exciting place to work. The whole GDS team is fully engaged with delivering a better service to the citizen, business and to other organisations and with a digital vision for the 21st Century. You will be responsible for designing, creating and improving new and existing products, platforms and transactions across government. Working alongside a multi-disciplinary team of developers, designers, editors, analysts, the main responsibilities of the post are: CONTACT DETAILS FOR INFORMATION REGARDING RECRUITMENT PROCESS, ELIGIBILITY, TERMS & CONDITIONS: cabinet-office.external@dwp.gsi.gov.uk FURTHER INFORMATION REGARDING THESE POSTS: CLOSING DATE: EXPECTED SIFT DATE: EXPECTED INTERVIEW DATES: APPLICATIONS ARE WELCOME FROM PART TIMERS AND JOB SHARERS SALARY SCALE: package of up to £73,000 per annum available for exceptional candidates depending on specialist skills and expertise. The total package will comprise base salary, additional pensionable allowances, pension benefits, generous annual leave allowance and flexible working arrangements. 11th January 2012 w/c 16th January 2012 w/c 23rd January 2012 How to Apply Please send completed application form to: cabinet-office.external@dwp.gsi.gov.uk quoting ref 1225793 No later than close of business 11th January 2012 Late or faxed applications will not be accepted Candidates will be asked to complete a test. More information will be provided to successful candidates who are notified of an interview date.","description":"NOTE: the following template was used to advertise a developer vacancy at GDS","link":"/service-manual/the-team/developer-jd.html"},{"title":"Developer skills","indexable_content":"The importance of developers Skills and attributes: Developers in the team Guidance Job description builds software with a relentless focus on how it will be used seeks collaboration and early feedback designs software they expect to operate and maintain leaves code simpler and better tested than when they started looks for opportunities to share progress and knowledge is always hoping to learn from colleagues and the wider community distinguishes the important from the urgent uses data to make decisions, building tools to gather that data have deep skills in at least one programming language be aware of the differences between a few languages and frameworks, and be pragmatic at picking the right one understand the core concepts of the internet and web – they should be able to give a good answer to the question ‘what happens when I click a link in a web browser?’ be deeply committed to testing their work with automated tests and exploratory testing be able to explain their work to people without particular technical skills Developers build software with a relentless focus on how it will be used. They continually improve the service by identifying new tools and techniques and removing technical bottlenecks Good digital services will require code to be written, adapted, maintained and supported. A team of skilled developers will be able to make sure that happens in an efficient and transparent way, and to help continually improve the service by identifying new tools and techniques and removing technical bottlenecks. No digital service can be effectively built, delivered, owned and operated without the technical skills to understand and improve the software enabling it. In order to provide the best service to your users it is vital that you are in a position to rapidly tailor that software to their needs and to the efficient running of the underlying systems. Developers will be able to work directly on those services, but are also an important part of service innovation as they bring ideas, generate prototypes and contribute to a rounded team.  Once a service is live the need for developers continues. There will always be technical optimisations that can be made – faster and more responsive systems, acting to mitigate the risks of a constantly changing security environment – but as you respond to new or more clearly understood user needs the software will need to adapt. As the policy and other context around a service changes the software may need to integrate with new systems or provide new features and a development team can help ensure that work is pro-active. A great developer: You would expect any developer to: It’s really important that your team is clear as to who makes technical decisions. Everyone on the team will have useful knowledge, skills and experience to bring to bear and you will need an agreed way to understand that input and make a call. Some teams accomplish that by appointing a Tech Lead or delegating certain decisions to a Technical Architect, others will put that responsibility in other roles. The important thing is that clear technical decisions be made by people equipped to understand the trade-offs involved. As your team grows it is likely that you will find a range of skills and experience. You should be ensuring a balance within the team, making sure that more junior team members are well supported and coached by more experienced team members, but that everyone’s ideas are considered and engaged with by the team and its decision maker. Read guidance in the manual of particular interest to developers. See an example of a developer job description provided by GDS.","description":"Developers build software with a relentless focus on how it will be used. They continually improve the service by identifying new tools and techniques and removing technical bottlenecks","link":"/service-manual/the-team/developer.html"},{"title":"Service manager job description","indexable_content":"VACANCY ADVERT PERSON SPECIFICATION - COMPETENCES/SKILLS REQUIRED JOB DESCRIPTION - MAIN DUTIES OF THE POST Seeing the big picture Changing and improving Making effective decisions Leading and communicating Collaborating and partnering Building capability for all Achieving commercial outcomes Delivering value for money Managing a quality service Delivering at pace SPECIALIST SKILLS / EXPERTISE How to Apply (Re)design Delivery and improvement Sharing learning and best practice Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential Desirable Essential lead the gathering of user requirements based on a clear understanding of diverse customer groups and channels for the service identify and pursue any potential linkages with other services (internal or external) that might be exploited to improve users’ overall contact experience with government interpret user research, customer insight and behavioural data to make robust service design decisions, noting that users do not always know/express what they want define and ensure user buy in for service definition and delivery approach act as an advocate for your service users, and negotiate to remove any identified blockages (within or outside the department) to the design of a excellent digital service  oversee one or more multi disciplinary agile delivery teams to deliver excellent new services redesign existing brown field legacy services to meet user needs and the digital by default service standard lead project operational delivery; supporting and ensuring the necessary project and approval processes are followed; monitoring and reporting on progress in reaching the digital by default service standard; identifying and mitigating risks; and deliver on all aspects within the timescales set for launch be digitally literate to effectively engage with technical staff, suppliers and stakeholders to define the best approach to service design to achieve business/user objectives create effective, prioritised business cases, service descriptions and delivery plans/roadmaps to meet user needs in a cost effective way lead effectively on the change management, process re-engineering and communications required to launch/implement successful services be accountable for the quality and usage of service delivery in line with the digital by default service standard and other agreed targets, continuously iterating the service based on user feedback (minimum monthly) keep continually abreast of changes to your users’ habits, preferences and behaviours across various (digital and non-digital) channels and their implications for successful delivery of the service(s) you are responsible for underpin the delivery and iteration of digital services through effective analysis of multi channelled qualitative and quantitative user data and follow-up action act as an advocate for your service users, challenging and negotiating to remove any blockages to the delivery of an excellent digital service that emerge at any point (within or outside the department)   identify and pursue any emerging opportunities for joining up with other related services (government, voluntary or private sector) to provide a more straightforward, convenient or holistic experience for users encourage the maximum possible take-up of digital service channels by effective promotion, communications and marketing, and specify/manage the requirements for successful assisted digital activity to supplement this effectively manage your service’s resources, including any contractual and partnership arrangements, to achieve high service functionality and performance, user satisfaction and usage alongside demonstrable value for money ensure that your team and those working with you understand and are fully equipped to achieve high-performance in pursuing a user-centred service vision  act as an ambassador for your users and their needs with colleagues and stakeholders, inspiring a user-focussed approach to future joint working share your understanding and insights into user behaviours, and into the digital marketplace (including best practice, costs, suppliers, methodologies and skills) with both internal and external stakeholders communicate credibly with a wide range of digital delivery disciplines and talent both internally and externally be actively involved across our partner and user communities and networking with other Service Managers, inside and outside government, to share good practice and learning and foster a collaborative approach to solution delivery and engagement be prepared to attend specialist training, networking events and share learning as and when required develop an in-depth insight into customers, citizens, services, communities and markets affected by their area and the wider public sector context create joined up strategies and plans that have positive impact and add value for stakeholders, citizens and communities shape strategies and plans which help put into practice and support the Department’s vision and long-term direction, including those shared with other departments anticipate and predict the long term impact of national and international developments, including economic, political, environmental, social and technological, on own area identify and shape how own area fits within and supports the work of the Department seek and encourage ideas, improvements and measured risk taking within own area to deliver better approaches and services encourage a culture of imaginative thinking, seek to expand mindsets and genuinely listen to ideas from employees and stakeholders identify step changes that quickly transform flexibility, responsiveness and quality of service lead the transformation of services to users, moving to a digital approach whenever possible challenge the status quo in own and related areas to achieve value-adding improvements and change  create effective plans, systems and governance to manage change and respond promptly to critical events take quick, confident decisions at a strategic level to move things forward outline direction of travel, recommendations and decisions for their area, taking account of financial and implementation issues ensure involvement and consultation where necessary and take decisive action when required interpret a wide range of political and national pressures and influences to develop strategies weigh up competing views to generate ways forward which will meet organisational goals articulate options and large-scale reputational risks and impacts, including economic, environmental, political and social, and recommend plans to manage and mitigate communicate with conviction and clarity in the face of tough negotiations or challenges influence external partners, stakeholders and customers successfully – secure mutually beneficial outcomes inspire staff and delivery partners to engage fully with long term vision and purpose of the Department, supporting them to make sense of change actively promote the Department’s reputation externally and internally – publicise successes widely actively promote diversity and equality of opportunity inside and outside the Civil Service lead from the front, communicating and motivating people towards stretching goals proactively create, maintain and promote a strong network of connections with colleagues across the Department, wider Civil Service and externally actively promote knowledge and resource sharing with peers and across functions build high performing teams within own area, aligned around common goals encourage teams to engage with a variety of delivery partners and stakeholders and listen to their feedback set out clear expectations that bullying, harassment and discrimination are unacceptable encourage and establish principles of working effectively across boundaries to support the business encourage work-place based learning, ensure colleagues take responsibility for their own learning and share it to build organisational capability devote dedicated time to supporting and empowering people through coaching and mentoring and sharing expertise/knowledge identify capability requirements to deliver Departmental 3-5 year strategy and grow sustainable capability across all groups including those identified as having high potential champion development, talent and career management for all staff and make learning a reality by encouraging and providing a range of development experiences create an inclusive environment, one from which all staff, including under-represented groups, can benefit role model continuous learning and self development, evaluating own effectiveness and growth and planning next learning steps accordingly promote a strong focus on the needs of customers, suppliers and other delivery partners to develop new commercial models for the delivery of policy and business goals manage strategic commercial relationships and delivery arrangements actively and effectively to provide ongoing value for money to the tax payer ensure teams appreciate how market demands, investment decisions and other commercial considerations such as funding and pricing models influence suppliers and the delivery of services identify and implement different ways of working deployed in other sectors eg using resources, assets and commercial arrangements develop and apply market and economic understanding and insights, working with commercial experts, to support sound commercial decision-making and recommendations take a wide view, successfully achieving common goals with organisations that have different priorities understand the financial position of own area, the organisation and the wider economy and recognise impacts of this when delivering services  make and encourage strategic choices on spend, challenge high risk costly projects and forgo non-priority expenditure  promote and visibly demonstrate a culture of value for money in own area/function in order to focus managers on getting a good return for taxpayers‟ money interpret a wide range of financial and management information and use financial data effectively in decisions develop robust business cases, with fully costed options identifying clear policy advantages and/or returns on investment to assist decision making understand and manage the risks and cost-drivers for own areas of responsibility in the context of strategic priority clarify and articulate the diverse requirements of customers and delivery partners to support effective delivery interpret customer insight and user data to determine and drive customer service outcomes and quality throughout own area translate complex aims into clear and manageable plans and determine resource requirements to support implementation  maintain and improve service by managing risks to ensure own area and partners deliver against defined outcomes work collaboratively with customers or service delivery partners to manage, monitor and deliver against service level agreements facilitate flexible use of resources across grades through innovative structuring of teams and resources within own area translate strategic priorities into clear outcome-focused objectives for managers and provide the energy and drive in achievement of these objectives take ownership of delivery against outcomes and give credit for others‟ delivery maintain a strong focus on priorities, holding others to account for priorities and swiftly respond to changing requirements act as a role model for delivery by injecting enthusiasm and energy to achieve results promote resilience and responsiveness in the organisation by being open and honest about challenges, and the actions required to address unexpected developments drive a performance culture within own area and support and encourage a focus on performance and priorities proven leadership in successful service vision and delivery harnessing the power of digital.  proven grasp and expertise in analysing and using customer insight and user and performance data to design and continually improve digital services to fully meet user needs in a convenient and straightforward way. successful design, delivery and ongoing management of high quality services which  maximised opportunities offered by digital technology. practical success in interpreting user data and feedback to design and implement channel shift strategies to move users from traditional to digital delivery channels track record of successful negotiation with colleagues and stakeholders to identify potential for working across traditional service divides to enhance and improve user experience. proven ability to challenge and remove any unnecessary barriers to excellent digital service delivery. experience of using lean and agile approaches to service development demonstrable communication skills and impact, with the ability to communicate and gain commitment to the benefits of digital effectively to a large range of stakeholders inside and outside government NOTE: the following template was used to advertise a service manager vacancy at GDS POST TITLE:   \t\t\tService Manager \t PAYBAND: \t\t\t\tSCS1\t\t\t\t\t\t\t\t\t UNIT/DIVISION: \t\t LOCATION: \t\t \t\t\t TYPE OF POSTING:     \t24 Month Fixed Term Appointment with possibility of extension or permanency This role will be in the [Business Unit] Team who are responsible for on and offline continuous service delivery, developing and delivering all the changes and improvements necessary to provide effective and holistic services for users.   Your role is to be the owner of a high quality user experience between people and your department, by being the driving force behind service provision. You will lead services that are not just best in class, but give the same level of digital experience users expect from daily interaction with the most respected web services. You will be representing your service to Departmental Board-level officials and senior officials in [Dept], using information from diverse user, commercial and service sources to create and project a compelling product vision. You will already be an experienced leader, with an in-depth understanding of service delivery and equipped to represent your service and its users’ needs at all levels within and outside an organisation. You will have the digital literacy to engage with technical staff and suppliers to define the best system and platform configurations to achieve business/user objectives.  CONTACT DETAILS FOR INFORMATION REGARDING RECRUITMENT PROCESS, ELIGIBILITY, TERMS & CONDITIONS:  FURTHER INFORMATION REGARDING THESE POSTS:  CLOSING DATE: \t\t\t\t\t\t\t\t\t EXPECTED SIFT DATE: \t\tW/c \t\t\t\t EXPECTED INTERVIEW DATES: \tW/c  APPLICATIONS ARE WELCOME FROM PART TIMERS AND JOB SHARERS  SALARY SCALE: You will be responsible for acting as the user advocate at all times to ensure that the service remains relevant, convenient and straightforward for them to use.  Your role will involve managing the product lifecycle - initial design and/or redesign,  delivery, on-going success and continuous improvement - of one or more transactional services and/or platforms, plus sharing your expertise across government  You will: Please send completed CV and Covering Letter to: [department email address] quoting ref [XXXXX]. No later than close of business [Date]. Late or faxed applications will not be accepted","description":"NOTE: the following template was used to advertise a service manager vacancy at GDS","link":"/service-manual/the-team/service-manager-jd.html"},{"title":"Service managers","indexable_content":"Responsibilities Help with hiring service managers Sample job description Guidance Further reading What’s the difference between a Service Manager and a Product Manager? be experienced leaders, with an in-depth understanding of their service (built on continuity of involvement over a period of years) and equipped to represent their service and its users’ needs at all levels within the organisation. For high-profile services these will be at Senior Civil Servant level be accountable for the quality and usage of their service, and able to iterate the service based on user feedback at least every month be able to lead effectively on the change management and process re-engineering required to implement successful services have the digital literacy to engage with technical staff and suppliers to define the best system and platform configurations to achieve business/user objectives encourage the maximum possible take-up of their digital service by effective marketing, and specify/manage the requirements for assisted digital activity to supplement this oversee service redesign and subsequent operational delivery; supporting and ensuring the necessary project and approval processes are followed, monitoring and reporting on progress in line with the digital by default service standard, identifying and mitigating risks, and be empowered to deliver on all aspects actively participate in networking with other Service Managers inside and outside government, and share good practice and learning Service managers are individuals who work full-time to develop and deliver all the changes necessary to provide effective user focused digital services. Outside government, organisations in the public and private sector are learning that empowered, experienced and highly skilled managers (often called Product Managers in the commercial world) are necessary to deliver high-quality digital services. We are adopting that model, requiring each transactional digital service handling over 100,000 transactions each year to be developed, operated and continually improved by an experienced, skilled and empowered Service Manager. These are not technical IT posts, nor are they confined to running a website. Instead, they are individuals who work full-time to develop and deliver all the changes necessary to provide effective digital services. With a handful of exceptions, this is a new role within government. These Service Managers will: This will depend on the scale of the service you are working on.  In some cases the Service Manager will also be able to fulfil the role of Product Manager - working closely with the delivery team (the ‘makers’), prioritising stories for each sprint, attending daily stand ups, being on hand to comment on solutions as they emerge, and accepting stories once they are delivered. However, in many cases it is likely that the Service Manager won’t have the capacity to be this hands-on, so they are likely to need a dedicated Product Manager. The government digital strategy requires services handling over 100,000 transactions each year to be re-designed, operated and improved by a skilled, experienced and empowered Service Manager. Cabinet Office will help departments to recruit suitably skilled individuals. Newly appointed Service Managers will be supported by GDS through a specialist training programme. This will include the hands-on process of designing and prototyping a digital service. An example job description for this role provided by GDS. Read guidance within the manual of particular interest to service managers. Building a team","description":"Service managers are individuals who work full-time to develop and deliver all the changes necessary to provide effective user focused digital services.","link":"/service-manual/the-team/service-manager.html"},{"title":"Web operations job description","indexable_content":"VACANCY ADVERT PERSON SPECIFICATION - COMPETENCES/SKILLS REQUIRED DUTIES & RESPONSIBILITIES Seeing the Big Picture Making Effective Decisions Collaborating and Partnering Achieving Commercial Outcomes Managing a Quality Service Delivering at Pace SPECIALIST SKILLS AND REQUIREMENTS Essential Changing and Improving Essential Essential Essential Essential Essential Essential Essential Desirable operational management of Linux servers, delivering a complex web application stack building and configuring new server platforms and the automated tooling to do so testing, debugging and troubleshooting of platform level problems supporting development teams with configuring applications for deployment sharing on-call duties anticipate technological developments to keep activity relevant and targeted understand and identify the role of technology in public service delivery and policy implementation spot warning signs of things going wrong and provide a decisive response to delivery challenges make difficult decisions by pragmatically weighing the complexities involved against the need to act draw together and present reasonable conclusions from a wide range of incomplete and complex evidence and data - able to act or decide even when details are not clear identify the main issues in complex problems, clarify understanding of stakeholder expectations, to seek best option seek constructive outcomes in discussions, challenge assumptions but remain willing to compromise when it is beneficial to progress. question and challenge the value being delivered through commercial arrangements with delivery partners ensure the service offer thoroughly considers customers’ needs and a broad range of available methods to meet this, including new technology where relevant. maintain effective performance in difficult and challenging circumstances, encouraging others to do the same. review, challenge and adjust performance levels to ensure quality outcomes are delivered on time understanding of common web application architectures experience configuring and managing Linux servers for serving a dynamic website experience debugging a complex multi-server service scripting or basic programming skills familiarity with network protocols - TCP/IP, HTTP, SSL, etc. installation and management of open source monitoring tools configuration management tools like Puppet, Chef deploying and configuring machines in a Cloud environment understanding of application deployment strategies and continuous integration working within a product-centric environment NOTE: the following template was used to advertise a web operations vacancy at GDS POST TITLE:             Web Operations\t PAYBAND:               \tA\t\t\t\t\t\t\t UNIT/DIVISION:       \tGovernment Digital Service\t\t LOCATION:              \tLondon\t\t\t\t\t\t\t\t\t TYPE OF POSTING: \t    2 year FTA with possibility of extension or permanency. The post will be reevaluated at the end of the period to match against the on-going requirements of GDS. The Government Digital Service is part of the Cabinet Office. Our job is to help transform digital services throughout government. We do that by building world-class services, by developing digital capability throughout the civil service, and by setting a standard for service design across government. All of our work puts the needs of users first. Only by developing around the needs of citizens can we create digital services so good that people prefer to use them. The Government Digital Service is seeking motivated individuals with sound judgment to work within the Infrastructure team supporting our Web Platform while developing new solutions to meet the needs of stakeholders across government.  The applicant must have demonstrable experience configuring web and application servers and possess a fundamental understanding of Linux. An ideal candidate will have previous experience supporting a large production platform. Participation in an out of hour’s on-call rota is a requirement of this role. CONTACT DETAILS FOR INFORMATION REGARDING RECRUITMENT PROCESS, ELIGIBILITY, TERMS & CONDITIONS: \t\t\t\t\t\t\t\t cabinet-office.external@dwp.gsi.gov.uk FURTHER INFORMATION REGARDING THESE POSTS:  Please contact Carl Massa - carl.massa@digital.cabinet-office.gov.uk CLOSING DATE: \t\t\t\t EXPECTED SIFT DATE:\t\t EXPECTED INTERVIEW DATES:\t APPLICATIONS ARE WELCOME FROM PART TIMERS AND JOB SHARERS   NOTE: SUCCESSFUL APPLICANTS WILL TRANSFER ONTO CABINET OFFICE TERMS AND CONDITIONS INCLUDING SALARY. FOR POSTS ADVERTISED ON LOAN, WHERE EXISTING SALARIES EXCEED CABINET OFFICE PAY SCALES IT MAY BE POSSIBLE TO REMAIN ON THE PARENT DEPARTMENT’S PAY AND APPRAISAL SYSTEM. ALLOWANCES WILL NOT BE CARRIED OVER UNLESS APPLICABLE TO THE JOB. EXCESS COSTS WILL BE PAYABLE ONLY IF THERE IS A PROVEN BUSINESS CASE.","description":"NOTE: the following template was used to advertise a web operations vacancy at GDS","link":"/service-manual/the-team/web-operations-jd.html"},{"title":"Web operations skills","indexable_content":"The importance of web operations Skills Job Description Further reading work with developers to optimise existing application and to design new ones participate in stand-ups, planning sessions and retrospectives design, build and run systems for application deployment, systems orchestration and configuration management encourage everyone (developers, delivery managers, product owners) to think about how new applications will be run and maintained contribute to designing internal processes needed in the running of a high performance development and operations organisation help everyone understand constrains around security, performance, cost and resulting tradeoffs deep understanding of the target operating system; Windows, Linux, Unix, etc. experience of multiple programming languages common deployment patterns continuous integration capacity planning load and performance testing techniques highly available systems design administration and tuning of production database systems. installation and usage of monitoring tools; for instance Nagios, Ganglia, Riemann, Graphite, etc. knowledge of configuration, deployment and management of web application stacks configuration management tools like Puppet, Chef, CFEngine EC2 or similar dynamic provisioning compliance, auditing and security open source development experience in a product centric environment Presentation given to GDS about web operations Article explaining the web operations role Book all about web operations topics Web operations (sometimes called systems administrators, operations engineers or site reliability engineers) run the production systems and help the development team build software that is easy to operate, scale and secure.  This involves expertise in infrastructure, configuration management, monitoring, deployment and operating systems. Web operations people help run the eventual production systems, but also to help the development team build software that is easy to operate. Thinking about how the eventual system will be run at the very start of the project is important if you want to smoothly move from prototypes to production systems. At a high level they will: With specific skills: And ideally have an interest in or some experience with: A sample job description for web operations provided by GDS.","description":"Web operations (sometimes called systems administrators, operations engineers or site reliability engineers) run the production systems and help the development team build software that is easy to operate, scale and secure. ","link":"/service-manual/the-team/web-operations.html"},{"title":"Your working environment","indexable_content":"What you might encounter Hacking the environment Sit together Communication tools Further reading ‘Has anyone else encountered this bug in our search component?’ ‘Is anyone else working on the main dashboard template?’ ‘Does anyone know how to configure this server to support more connections?’    ‘Has anyone else encountered this bug in our search component?’     ‘Is anyone else working on the main dashboard template?’     ‘Does anyone know how to configure this server to support more connections?’    Working spaces for digital projects will vary, but there are some things you can do to ensure that the space you have available can be used in the way your team needs. Those working in creative and technical fields often need plenty of space for focussed, detailed work. It’s not uncommon to see people spending a significant chunk of their day with headphones on to help them focus, or locked in conversation with just one person with whom they’re pairing. Equally, you might expect to see lots of short meetings throughout a day, often around walls covered in notes or reference material. These regular exchanges are important to ensure the quality of the work, but can seem strange in office cultures that are much more used to formal meetings or conference calls. The room a team works in is a tool. It is just as important as the choice of project management tools or choice of programming language. Teams should dedicate time at the beginning of a project to making sure they have everything they need and addressing any problems. This might include setting up a project wall, configuring collaboration software like email groups or project trackers, building and installing dashboards, putting up whiteboards, or simply moving desks about so the team can sit together. Removing those dividers between desks makes a big difference and allows conversation between the team to flow more freely. If large monitors are getting in the way remove them. You might also want to think about getting desk tidies like these. The difference a tidy environment makes to ability of a team to think and work is striking. This process is known as ‘hacking the environment’. This might seem like an obvious one, but teams working together to deliver a product should sit close together. Short, informal conversations are an important way to test assumptions, and this gets much harder when a team is distributed across an office, or worse, in different buildings. When working on the design, development and operation of a service it’s essential that your team be able to be in constant contact with one another to make rapid decisions, provide support and information and to ensure everyone’s aware of the project as a whole. Some of that will be achieved through regular short meetings such as a daily standup or weekly ‘show and tell’ session, but there’s also a need for an asynchronous mechanism that’s more immediate and conversational than email but that allows people to dip in and out. Internet Relay Chat (IRC) – and similar tools such as group messengers, Campfire, and so on – operate as software running on the user’s computer as a dedicated application or in a web browser, supporting a constant stream of live conversation. Typically, a user would leave the service running in the background while working on other things, switching focus when a break is needed or when you need to ask a specific question. Questions might be along the lines of: Anyone on the team would be able to respond with information, suggestions of other people to talk to, and so on. Because it is network based it will also work regardless of geography so distributed teams can continue to communicate as if they were in one room. Paul Graham on Makers’ Schedules vs. Managers’ Schedules","description":"Working spaces for digital projects will vary, but there are some things you can do to ensure that the space you have available can be used in the way your team needs.","link":"/service-manual/the-team/working-environment.html"},{"title":"Working with specialist suppliers","indexable_content":"Identifying the skills you need Individuals Companies Choosing your supplier People, not process Guidance for a smooth induction Working together Knowledge transfer Further reading a proven track record of Agile delivery  how they will use continuous delivery methods how they will share knowledge and provide coaching and mentoring to civil servants who are developing and/or will be responsible for the service how they will deliver in an Agile way; possibly while working with departments who work in waterfall or PRINCE delivery method  their commitment to work on-site with civil servants to share knowledge how they will ‘bake in’ quality to the process make sure you have enough budget speak to your HR team and confirm you can negotiate salary etc, particularly for technical roles shield your people from the form-filling culture that HR sometimes brings contractors shouldn’t work from home all the time (be sensible here, the odd day won’t hurt) monitoring the work through project tracking tools, but most importantly talk to your people and understand the work they’re doing You may need specialist help to design, develop, build or improve your service. When buying in these services, there’s support GDS may be able to provide. When you have an idea of the service you are going to create, talk to your team about the skills that are lacking. This is your chance to develop skills in-house, so before you go outside the civil service, first see if you have team members who can be developed into roles. If not, you can hire individuals or companies to fill in the gaps of specialist skills. GDS can help you hire some roles. We have job descriptions for: * delivery managers * designers * developers * web ops * content designer Other descriptions will be made available. Please contact the team if you have particular descriptions in mind.  GDS can give you some advice on certain candidates or interviews and setting contracts.  If you need part of a team or a complete team, remember: you are buying skills to help your team or to build your team around. You are not locking yourselves into a long contract, with minimum spend criteria etc.  When you are considering an individual or company to work with, they should give you evidence of: They should also be aware of the departmental digital strategies and how they will need to work with them. GDS can give you advice on buying this sort of capability through existing processes like G-Cloud, Spot-buy etc. Later in 2013, you will be able to use the Digital Procurement Framework. An underlying principle behind Agile development is that people are more important than process. It has been proven that great teams make great products whether they’re in government or business.  At GDS, we don’t call people ‘resources’, whether permanent or contract. You look after people, resources are things you use (and discard). Some guiding principles for service managers or delivery managers: And don’t forget, contractors can’t sign things. Suppliers and permanent staff should sit together, work together and work through problems together. The team should create an environment where difficult questions can be asked and all ideas are listened to. All team members should work to do the right thing for the user, not just what they have been asked to do. Both suppliers and permanent staff should suggest ideas and work together to identify further skills gaps and solutions to create a better product. The individual’s or company’s intention should always be to disengage from the department, leaving the team to function on its own. Your team structure and processes should centre around transferring knowledge to permanent staff, wherever possible. Don’t let a contractor become a single point of failure and treat all team members (permanent and contractors) the same.  A blogpost by Meri Williams of GDS on people management in an agile setting","description":"You may need specialist help to design, develop, build or improve your service. When buying in these services, there’s support GDS may be able to provide.","link":"/service-manual/the-team/working-with-specialists.html"},{"title":"Card sorting","indexable_content":"How to carry out a card sort Where/how you might use it Weaknesses/when not to use Online tools Closed sorting Card sorting is a research method used to understand the way that the intended users of a web site naturally organise or think about different types of information or content. It’s also a method service teams can use to sort and arrange user needs. The method is very simple to use: it involves simply writing the needs or topics on pieces of card (maximum of around 50) and asking representative users to organise these into groups, which are then given a meaningful label. 15 to 30 users are recommended: a minimum of 15 users will give reasonable confidence in the results, but any more than 30 gives diminishing returns. It is also possible to conduct a closed card sort, whereby the users are given pre-determined categories and are asked to allocate each card to one of these categories. Open card sorts are most suitable for identifying how users think about information, in order to build an information architecture. Closed card sorts are most suitable for validating an information architecture. The analysis of card sorting can be difficult if no clear categories emerge. It can also be difficult to conduct a card sort on a very large website with a broad scope of content (eg GOV.UK) since the maximum number of cards may not be representative of all of the content. Card sorts can also be conducted using an online tool such as OptimalSort. This is a cheap and effective way of reaching a large sample of users without needing to bring them into a dedicated lab facility for the study.","description":"Card sorting is a research method used to understand the way that the intended users of a web site naturally organise or think about different types of information or content. It’s also a method service teams can use to sort and arrange user needs.","link":"/service-manual/users/card-sorting.html"},{"title":"An introduction to user research","indexable_content":"Product research Strategic research Research in the product’s lifecycle Research methods Background Qualitative user research techniques Quantitative Sampling methodologies User research briefs Survey design User research tools Ethnographic research Expert review Guerilla testing Same day user testing Lab based user testing Focus groups and 1:1 interviews Community user groups User research surveys Remote usability/summative testing Online research panels Online omnibus surveying This guidance provides a broad overview of the methods and techniques available to conduct user research. More detailed guidance on each of these techniques can be found in the links below.  User research can be categorised into two broad themes – product research, and strategic research.  Product research can incorporate both qualitative, and quantitative techniques. Qualitative techniques are intensive, and often small scale. These include focus groups and 1:1 interviews, and are typically used to explore and analyse unstructured data.  Quantitative techniques involve higher-volume research, and include online surveys, face-to-face interviews, and involve a structured approach to data collection and analysis.  Product based research can be conducted in-house or via a specialist agency. In-house approaches can be quicker as they involve less lead time (eg procurement), but require skilled in-house researchers, and can involve the procurement of some specialist software. Typically agencies are only used when specialist skills/experience is required that is not available in-house, and/or the scale of the project would mean it is difficult to provide dedicated internal resource.  Strategic research also uses quantitative and qualitative methods, and is used to help understand the appetite for a product or service – typically looking at the size of the market, trends, type of users etc. Secondary data, also known as desk research, can be used, and involves the analysis of existing research or information sources. Ideally, secondary research should be conducted before embarking on any research project to understand what is already known, and what research is required to fill the knowledge gaps. This can range from published research, news article, or internal research that has been conducted previously. The table below illustrates the typical product lifecycle, showing the stages at which user research should be conducted. This chart can be used as a reference to ensure that user needs are being factored into design at every stage.  Typically this will involve some initial fact finding in the early stages to understand the user needs, including who they are, how they currently do things, how they’d like to do them, and what information is currently available.  Please note that each service/product will have a different proportion of users who are not online and this will need to be considered when formulating an appropriate research approach. The services/product will need to consider the digital skills of their users to understand which users who currently don’t use digital channels:  can’t ever use the digital service independently and will always need assisted digital support could use the digital service independently but will require initial assisted digital support to build their confidence in using the service  should use the digital service (ie. have the digital skills but currently use other channels) and don’t need assisted digital support Some services (e.g. where users are large corporations) will not require assisted digital. The Digital Landscape Research contains a demographic breakdown of who is offline and online and service teams and these techniques may be useful for doing user research.","description":"This guidance provides a broad overview of the methods and techniques available to conduct user research. More detailed guidance on each of these techniques can be found in the links below. ","link":"/service-manual/users/introduction-to-user-research.html"},{"title":"User needs","indexable_content":"Defining user needs Work out your proposition You can’t do it all at once User stories Further reading it’s something that only the government does there is clear demand for it from users (ie. through search and traffic logs) or the government is legally obliged to provide it it’s something that people can do or it’s something people need to know before they can do something that’s regulated by/related to the government it’s something the government provides, does or pays for it’s inherent to a person’s or an organisation’s rights and obligations it’s straightforward advice that helps people to comply with their statutory obligations (eg. what records you should keep for your HMRC tax return) or provides certain kinds of advice and support to businesses, but excludes general life or business advice that is provided by third parties Define the user need Write the user story from the perspective of the user Define the acceptance criteria Solution is explored and delivered by the service team What was the evidence? Users’ information needs and analytics Using search data to meet user needs Exploring user needs What we know about the users of Inside Government Meeting the needs of businesses Introducing the Needotron: working out the shape of the product Deep understanding of your users needs is crucial for building a successful digital service. Any thinking about a service, whether online or offline, must start with the question: What is the user need? Defining a user need must be strict and honest. For GDS, it’s the need the user has of government, not the need of government to impart information to the user. That’s an important distinction, because it means that you’ll be able to more measure the success of your services and iteratively improve them to meet the needs of the people who will make use of them. You need to set the boundaries of what your service can and should offer, to prevent a bottomless list of user needs. This is especially true of a government website such as GOV.UK. As well as identifying user needs, we identified which of those needs the government must answer. This led to the ‘It’s in if…’ criteria: Similar criteria may help you determine which needs you build a service to meet. Expressing a user need mustn’t imply the solution. The user need should be expressed as a user story, so the service team can discuss and explore possible solutions. Read more detailed guidance about writing user stories.","description":"Deep understanding of your users needs is crucial for building a successful digital service.","link":"/service-manual/users/user-needs.html"},{"title":"Community user groups","indexable_content":"How research communities work Where and how you might use it When not to use Participants rapid speed (questions are answered in real time, research team can react rapidly to internal demands) cost effective when up and running  flexibility availability rich outputs (visual content such as video is regularly used and is impactful) deep insights raises profile of research internally when insight is relevant and timely An online research community is a website that allows pre-selected respondents to interact with each other and complete a series of tasks.  The types of community differ, and vary in openness, permanency and size. A typical community will be private, often have between 300-500 members and focus on building relationships between participants. This type of community offers a great source of deep insight over long periods of time.  The tasks given to a research community differ in format and can include; online forums, blogs, polls, surveys, instant chat and more. Tasks are usually creative, and ask different questions relating to the research objective/s. Research communities can be used for a wide range of projects such as audience understanding, diary studies, concept development or simply idea generation. They allow a business to get close to users and offer meaningful dialogue between an organisation and its customers. The key benefits are: Communities require constant management. Participants need to be kept engaged, which means daily interaction, new questions and inventive approaches to maintain their interest.  The community needs constant moderation, usually by a research manager or third party research agency. The quality of community members is paramount. Their feedback needs to be quality checked and panel attrition needs to be monitored on an on-going basis to ensure fresh ideas.  Participants can be obtained using public postings on websites, email groups and social media, or via third party sample companies.","description":"An online research community is a website that allows pre-selected respondents to interact with each other and complete a series of tasks. ","link":"/service-manual/users/user-research/community-user-groups.html"},{"title":"Discussion Guides","indexable_content":"Where and how you might use them Example Discussion guides are used in order to ensure that focus groups and 1:1 interviews cover the required topics, and information is obtained from the sessions that will address the needs of the research.  In preparation for a focus group or 1:1 interview it is helpful to generate a list of questions that address the information that you’re interested in obtaining from the sessions. These questions should be open ended, and structured in a manner that will help elicit information from respondents in a sensible flow.  As suggested by the name, discussion guides should be used as a guide to the discussion, and in comparison with a structured questionnaire, questions and areas for coverage should not read out verbatim. This enables the discussion to be led by respondents’ own experience. Typically each section of the guide would include time guidance to ensure all areas can be covered and it should also indicate when stimulus is being used, and specify participants’ tasks. Writing a discussion guide should be an iterative process, and once the initial draft has been written it is helpful to get input from other people on the project team.  A discussion guide written for testing that was conducted with BIS experts for the development of GOV.UK (PDF, 157kb).","description":"Discussion guides are used in order to ensure that focus groups and 1:1 interviews cover the required topics, and information is obtained from the sessions that will address the needs of the research. ","link":"/service-manual/users/user-research/discussion-guides.html"},{"title":"Ethnographic research","indexable_content":"How ethnographic research works Where and how you might use it When not to use Participants Timescales Ethnographic research usually involves observing target users in their natural, real-world setting,  rather than in the artificial environment of a lab or focus group. The aim is to gather insight into how people live; what they do; how they use things; or what they need in their everyday or professional lives. Ethnographic research relies on techniques such as observation, video diaries, photographs, contextual interviews, and analysis of artefacts such as for example devices, tools or paper forms that might be used as part of a person’s job. Observations can be made at home, at work, or in leisure environments. People can be studied with their family, on their own, with work colleagues, or as part of a group of friends. Often one participant may be recruited, but several more may be studied as part of that person’s family or friends. Data collection can range from a 4-5 hour contextual interview, through to following a participant for several days, or even a longitudinal study over several weeks or months to investigate, for example, how a particular product or service might be used over time. It doesn’t necessarily involve ‘full immersion’ in a person’s life: it can involve a depth interview in a person’s home or it might involve a person simply maintaining their own video diary over a period of time. Ethnographic research can provide extremely rich insight into ‘real life’ behaviour, and can be used to identify new or currently unmet user needs. This approach is most valuable at the beginning of a project when there is a need to understand real end user needs, or to understand the constraints of using a new product or service by a particular audience. Ethnographic research can provide a significant amount of qualitative data, and analysis can be time consuming. NOTE: The term ‘ethnographic’ can be misused, it’s currently a bit of a ‘buzzword’ with some agencies who may not fully understand the approach.  It is recommended that a specialist agency is used, who can demonstrate successful case studies (collecting and analysing the data). In principle, anyone could participate in this type of research. As with any user research, the recruitment of suitable participants is key. The full implications of the research should be fully explained to potential participants, as some may not feel comfortable with this level of intrusion in their lives. Depending on the study needs and the approach, but 6-8 weeks from briefing to results can provide rich insight. It may take time to build trust with participants, and the analysis period needs to be sufficient to be thorough. Ethnographic research can be expensive and time consuming, but this depends on the needs of a particular project. The benefits derived can be extremely valuable.","description":"Ethnographic research usually involves observing target users in their natural, real-world setting,  rather than in the artificial environment of a lab or focus group. The aim is to gather insight into how people live; what they do; how they use things; or what they need in their everyday or professional lives.","link":"/service-manual/users/user-research/ethnographic-research.html"},{"title":"Expert reviews","indexable_content":"How expert reviews work Where and how you might use it Weaknesses and when not to use Timescales Cognitive walkthrough Expert reviews - also known as heuristic evaluations - are low cost usability methods that don’t involve participation of real end users. An ‘expert’ usability evaluator can assess a product (or web site) against a known set of ‘heuristics’, or usability guidelines (best practice). An alternative approach is to conduct a ‘cognitive walkthrough’ against specific use cases or scenarios.   Ideally two usability experts will conduct the review independently, and then meet to discuss and agree the findings before making recommendations to the service manager. A list of widely accepted (although not necessarily validated) heuristics are provided by Jakob Nielsen or an alternative set can be found in the International Standard ISO 9241. A ‘cognitive walkthrough’ is a usability inspection that aims to identify usability issues by focusing on how easy it is for users to accomplish specific tasks with the system (or website).   This method starts with identifying the user goals, then conducting a task analysis to specify the sequence of steps or actions required to achieve each task. The usability expert, along with designers and developers, then walks through these identified steps to assess the extent to which a user can achieve their goal. Both of these approaches can be used to evaluate an existing product or website, or as a quick, low cost method of evaluating a product in development. These approaches can be considered to be ‘better than nothing’, but will never provide the same quality insight as testing with real end users. However, a competent usability specialist will often identify issues that are subsequently seen in traditional user testing or in actual use. Some agencies conduct expert reviews as the first step of all usability projects. The fundamental weakness of any expert review is that it doesn’t involve use by real end users. Some people may therefore consider this to be purely opinion, but input from an experienced usability expert is better than no user testing at all. For a simple website application this could be turned around in 1-2 days.","description":"Expert reviews - also known as heuristic evaluations - are low cost usability methods that don’t involve participation of real end users. An ‘expert’ usability evaluator can assess a product (or web site) against a known set of ‘heuristics’, or usability guidelines (best practice). An alternative approach is to conduct a ‘cognitive walkthrough’ against specific use cases or scenarios.  ","link":"/service-manual/users/user-research/expert-review.html"},{"title":"Focus groups, mini groups, and 1:1 interviews","indexable_content":"How they work Where and how you might use them Weaknesses and when not to use Participants Focus groups, mini groups, and 1:1 interviews involve unstructured interviews or group discussion.  A focus group is normally comprised of 6-12 people, although sometimes mini groups are favoured (4-5 people) as they can lead to a greater depth of discussion. 1:1 interviews are conducted by a moderator with a single respondent, and sometimes these are conducted over the phone. Interviews and discussion groups are both facilitated by a trained moderator using a specially designed topic guide in order to ensure the discussion is focused and keeps on topic. Sessions normally last 1-2 hours and will often involve participants being shown stimulus – eg communications materials to inform discussion, and sessions may include interactive techniques eg role play scenarios. Focus groups and 1:1 interviews are useful techniques for exploring and mapping reasons for attitudes and behaviour, understanding how target audiences approach issues or may be encouraged to change. They also enable participants reactions to be monitored, and the moderator to probe interesting issues when necessary. Dedicated viewing facilities are often used that enable sessions to be recorded, and interested parties can observe the sessions (often via a two way mirror) in a separate room to the participants. This often results in the research having more credibility as interested parties will have been able to view the sessions, and witness the findings first hand - this also means key issues can be acted upon quicker as observers can feed straight back to their teams. Some sessions take place in community settings, encouraging less confident/harder-to-reach audiences to attend. Focus groups can also be conducted online. The number of groups is often dictated by the budget available, but the average project will have 4 to 6 groups, with larger ones having between 10 and 20. Besides budget, other factors that influence the number of groups used are the number of potential users groups that need to be covered, and the number of geographic areas. Focus groups and 1:1 interviews can be expensive compared with other types of research, while the small samples size means that findings are not statistically significant. There is, therefore, a risk of generalising across audience groups. Analysis of the sessions can also be time consuming. Moderators also need to build a rapport with respondents. If he or she fails to do this, and can’t control the group adequately, it can result in the sessions being dominated by one or two participants, and biased data being collected.  Participants can be obtained from the general population and hard to reach groups.","description":"Focus groups, mini groups, and 1:1 interviews involve unstructured interviews or group discussion. ","link":"/service-manual/users/user-research/focus-groups-mini-groups-interviews.html"},{"title":"Guerilla testing","indexable_content":"How does guerilla testing work Where and how you might use it Weaknesses and when not to use Number and types of participants GDS Example always ask permission first to speak with people outline briefly the purpose of the research  reassure them about confidentiality keep it simple and quick consider the location and set up carefully eg a busy train station may have the footfall but people might be in too much of a hurry to spare the time providing incentives for audience participation is not required or necessary (however, depending on where you are running your sessions chocolates are often a welcome ‘thank you’ for peoples’ time) Guerilla user testing is a low cost method of user testing. The term ‘guerilla’ refers to its ‘out in the wild’ style, in the fact that it can be conducted anywhere eg cafe, library, train station etc, essentially anywhere where there is significant footfall. Guerilla testing works well to quickly validate how effective a design is on its intended audience, whether certain functionality works in the way it is supposed to, or even establishing whether a brand or proposition is clear. This approach is quick and relatively easy to set up. Participants are not recruited but are ‘approached’ by those persons conducting the sessions. The sessions themselves are short, typically between 15-30 minutes and are loosely structured around specific key research objectives. The output is typically ‘qualitative’ so insight is often rich and detailed. Anyone on the service team can conduct ‘guerilla testing’ on their site or service but often the best scenario is for a researcher to run the sessions with the designer or developer. The researcher can help with defining the tasks, moderating the sessions as well as provide a level of ‘objectivity’ by not being the person who designed or built what is being evaluated. Involving the designer / developer in the sessions enables them to see first hand ‘real’ people interacting with their product, where there are areas for improvement and how they might go about resolving any issues. This approach also does away with any lengthy reporting back. Insights can be observed, taken away and fed back into the design process almost immediately. However, a brief summary with key findings and recommendations can be written up as a more formal record. It is a method that suits the ‘agile framework’ well. Guerilla testing can be used throughout the service lifecycle. As it is cheap to set up, run and report back on, it is a method that can be used frequently. There are a few logistics that should be taken into consideration before conducting any guerilla testing; Remember, whenever recording sessions you must seek permission from the participant first. Provide them with a written consent form for them to sign. The key weakness of guerilla testing as a research method it that is not statistically robust and participants may not always match your ‘target’ audience in terms of skills, expertise, knowledge. This can vary from between 6-12 participants in any given round of guerilla testing. It is very much dependent on where and when those sessions are conducted. 16 teenagers evaluated the National Citizen Service website. Sessions were conducted in the canteen of a further education college in Nottingham. Usability and editorial findings were discovered and quickly fed back to the development teams. The whole process took 2 days.","description":"Guerilla user testing is a low cost method of user testing. The term ‘guerilla’ refers to its ‘out in the wild’ style, in the fact that it can be conducted anywhere eg cafe, library, train station etc, essentially anywhere where there is significant footfall.","link":"/service-manual/users/user-research/guerilla-testing.html"},{"title":"Lab-based user testing","indexable_content":"How lab-based user testing works Where and how you might use it Weaknesses and when not to use Number and types of participants efficiency  accuracy recall  emotional response  User testing is a ‘qualitative’ research method, used to gauge how easy and intuitive a (product, service, website) is to use and whether it supports the needs of it’s intended audience. From a traditional perspective, user testing measures how well participants respond in the key areas of:  This approach is combined with more ‘qualitative’ techniques to help understand the users’ motivations and attitudes as well.  A product or service is usually assessed by asking small samples of the target audience to complete specific but realistic tasks in one to one sessions. The facilitator observes how well the participants are able to complete those tasks, noting down the areas or features that cause the participant problems.  Often the facilitator will ask participants to think aloud whilst completing those tasks in order to understand their decision processes better. User testing can be conducted on low-fi assets (eg paper prototypes, wireframes) and hi-fi assets, including working prototypes and live digital services. It’s most effective when conducted early within the lifecycle of a product but can be conducted towards the end of the service lifecycle to validate any usability improvements. A lab environment can provide a more formal setting for conducting sessions, with most spaces offering viewing facilities enabling stakeholders and key team members to watch the sessions in real time.  Usability testing is best suited to finding the big issues, essentially the problems that affect users trying to perform tasks. However, it is qualitative in nature and is not statistically robust due to the small participant numbers, per round. The lab environment may also be considered a weakness. It means testing is conducted in a very different space to that a user will commonly be in. This method is not an appropriate for understanding user behaviour or user needs eg what they might want from a product or service.  Between 5-8 participants, per round of user testing is sufficient to highlight the majority of usability issues. The key is to test often.","description":"User testing is a ‘qualitative’ research method, used to gauge how easy and intuitive a (product, service, website) is to use and whether it supports the needs of it’s intended audience.","link":"/service-manual/users/user-research/lab-based-user-testing.html"},{"title":"A/B and multivariate experiments","indexable_content":"Further reading This article in Wired shows how A/B experiments were used to good effect in Obama’s election campaign. This article in eConsultancy shows how multivariate experiments were used to improve conversion rates at Lovefilm. We interviewed Craig Sullivan, an industry expert on conversion optimization. He explains when he uses A/B and multivariate experiments in the design process.","description":"We interviewed Craig Sullivan, an industry expert on conversion optimization. He explains when he uses A/B and multivariate experiments in the design process.","link":"/service-manual/users/user-research/multivariate-testing.html"},{"title":"Online Omnibus surveying","indexable_content":"Where and how you might use it Weaknesses and when not to use Timescales Online Omnibus surveys are an effective way of interviewing a representative number of people, in a short period of time, and for a relatively low cost. Omnibus surveys of this type use an online panel to gather the sample and, as with regular offline Omnibus surveys, costs are kept down by collating questions on a variety of subjects from a number of clients.  Omnibus panels are ideal when you have key questions that you want answering, and need to reach a representative number of people quickly and cheaply. An omnibus survey is not appropriate when there are too many questions required. This would result in the survey being too long (combined with questions from other clients). An online Omnibus panel can be conducted relatively quickly, with most companies running surveys twice a week with data delivered 4 days after survey goes in to field. Some companies offer an ‘on demand’ service where surveys can start any time, although a minimum number of questions is normally required.","description":"Online Omnibus surveys are an effective way of interviewing a representative number of people, in a short period of time, and for a relatively low cost. Omnibus surveys of this type use an online panel to gather the sample and, as with regular offline Omnibus surveys, costs are kept down by collating questions on a variety of subjects from a number of clients. ","link":"/service-manual/users/user-research/online-omnibus-survey.html"},{"title":"Online research panels","indexable_content":"Where and how you might use them When not to use Timescales An online panel is a collection of pre-recruited research participants who have agreed to take part in online research over a period of time. Members of the panels are incentivised to take part, and normally rewarded through vouchers, or points that have a monetary value.  As members of the panel are pre-recruited it means that they can be easily targeted by demographic, ownership and lifestyle information. As well as regular consumer panels, some companies also run business panels. Online panels are used to target representative samples of people easily, cheaply and quickly. They can also be useful to target hard to reach groups, who would otherwise be impossible to reach within a realistic timeframe. Respondents completing research in the shortest amount of time is a common problem, as this indicates that they have not given full consideration to the research that they are taking part in. Most panel companies reduce this prospect by monitoring how respondents complete the research (by time completion, and by the way they answer certain questions) and remove any suspicious respondents from their database. In addition to this, most panel companies will ensure that their respondents only complete four to six surveys a year. As the sample is ‘on tap’ online panels can be used to turn round projects very quickly. When used for remote user testing, fieldwork is normally complete within three to four days.","description":"An online panel is a collection of pre-recruited research participants who have agreed to take part in online research over a period of time. Members of the panels are incentivised to take part, and normally rewarded through vouchers, or points that have a monetary value. \nAs members of the panel are pre-recruited it means that they can be easily targeted by demographic, ownership and lifestyle information. As well as regular consumer panels, some companies also run business panels.","link":"/service-manual/users/user-research/online-research-panels.html"},{"title":"Remote usability/summative testing (quantative)","indexable_content":"How remote usability testing works Where and how you might use it Weaknesses and when not to use Number and types of participants Examples produces results quickly is relatively cheap compared with conducting face to face user testing at scale produces statistically significant results removes moderator bias Remote usability testing takes place outside the lab with users participating in their own home, using their own computers, and with no third party moderator present. Each session usually includes tasks being given to see how users interact with the website/online service and are followed up with a series of questions about their perceptions and how easy it was to complete the tasks. As there is no moderator present, special software is used in order to record the user’s interactions with the website/online service. While traditional lab testing focuses of gathering rich and detailed information, remote usability testing aims to test with large numbers of users and produce statistically significant results. It is recommended that remote testing is not conducted in isolation, and face to face testing is also completed. Remote usability testing can be used to test both website content, and online services. Testing content normally involves people completing task based on the online content, while online services are normally tested by asking users to complete a task using the online tool or transaction (Jobseekers Allowance, Driving Licence, etc). Success is measured on whether the user can complete the tasks/transaction.  Benchmarks on new and existing products are gathered so that completion rates (and other success measures) be collected and performance monitored. The key advantage of remote usability testing are that it: Although remote usability provides testing with large numbers of people, findings can lack depth as they focus on what people do, and not why they have done it. When testing new products the tasks can seem artificial, and this is increased when testing is conducted with a panel of users, instead of real users on a live site. Remote usability testing should not be used in isolation and it is recommended that it is used in conjunction with face to face testing with real users.  In order to test new products that are still in development it is necessary to engage an online panel in order to recruit participants. Existing products and services can be testing via the live website. It is recommended that 400 responses are collected so that results are robust. An example from the second round of Inside Government usability testing (PDF, 2MB)","description":"Remote usability testing takes place outside the lab with users participating in their own home, using their own computers, and with no third party moderator present.","link":"/service-manual/users/user-research/remote-usability.html"},{"title":"Same day user testing (online qualitative)","indexable_content":"How same day user testing works Where and how you might use it Weaknesses and when not to use Number and types of participants fits with an agile way of working produces quick results can be relatively cheap compared with conducting face to face user testing removes moderator bias Like standard remote usability testing, same day user testing also takes place outside the lab with users participating in their own home, using their own computers, and with no third party moderator present. Where standard remote usability testing focuses on large numbers, and providing statistically significant findings, this type of testing enables you to get rich, qualitative data from respondents that would normally only be possible by observing users in person. As there is no moderator present, each session is recorded via screen capture software, that records the whole session, including the user talking about what they are doing, why they are doing it, and how they feel about it etc. All interviews are conducted in one hour, with the video sessions, and the answers to the follow up questions made available immediately. Analysis is then conducted in house. Rapid 1:1 testing can be used to test both website content, and online services. Each session involves participants completing a series of online tasks to see how they use the website or tool to find information and/or complete transactions. Each participant is then asked a few follow up questions focusing on overall satisfaction with the site and the experience it provided. The key advantages of remote usability testing are that it: Although this type of remote usability testing can provide depth of content, the lack of moderation can result in respondents veering off topic and the analysis be quite lengthy. Also, respondents can sometimes appear to be ‘professional testers’, and therefore can perform tasks with greater ease than other users. Testing is normally conducted using the online panel that is available through the panel company. As with regular lab based testing, it is recommended that you test with 8-12 users.","description":"Like standard remote usability testing, same day user testing also takes place outside the lab with users participating in their own home, using their own computers, and with no third party moderator present.","link":"/service-manual/users/user-research/same-day-user-testing.html"},{"title":"Survey sampling methodologies","indexable_content":"What to consider when sampling Further reading When conducting quantitative research it is essential that all findings are statistically valid, so that there is confidence in the findings and inferences can be made from the sample to the population.  This process of collecting information from a sample is referred to as ‘sampling’ and enables researchers to understand the views, and needs of a user base, without interviewing the whole user population. Consideration needs to be given to how the sample is collected (who, how, where, when) and the size of the sample collected for each study. A large sample size can be more accurate and provide greater confidence in the data collected, however a large sample is not required for all research projects.  The sample method chosen should consider the size and scale of the project, the sub-group analysis required, and balance the robustness of the approach that with the time, money, and resource available to ensure its fit for purpose. Sampling can be a complex process to understand, but on most occasions a sample of 400-500 will be sufficient for most in-house studies - again this is dependent on the level of subgroup analysis needed and also the penetration of the target group in the population. The greater the number of population groups that need to be analysed may increase the sample size needed, as typically for findings to be statistically valid a minimum of 100 in a subgroup is required. A larger overall sample of 1000+ is normally required if findings need to be nationally representative.  This guide to sampling was written by the National Audit Office, and although it was first published in 2001, still provides a helpful introduction to sampling methodologies.","description":"When conducting quantitative research it is essential that all findings are statistically valid, so that there is confidence in the findings and inferences can be made from the sample to the population. ","link":"/service-manual/users/user-research/sampling-methodologies.html"},{"title":"Sentiment analysis","indexable_content":"How sentiment analysis works Weaknesses and when not to be used Sentiment analysis is a method used to analyse high volumes of verbatim comments from users in order to help easily understand the attitude and tone of users’ comment. The method uses tailored software to analyse user comments and structure them in a manner that can be used to understand what user ‘feel’ towards a product or service. This enables positive and negative comments to be grouped so that actions can be assigned to resolve problems and issues raised by users.  Some of the free tools available can group comments very broadly, and not enable the level of granularity that enables the analysis to be useful and actionable.  Furthermore, comments can sometimes be analysed incorrectly. This is especially the case when slang is used, or phrases are not meant literally (when negative words and phrases are meant positively, or positive comment are meant ironically). This is a notoriously difficult technique for anything beyond broad statements, and requires a very large sample size both of seed (already analysed) material and of commentary from each user. It’s not much use on twitter comments, for example, because they’re so short.","description":"Sentiment analysis is a method used to analyse high volumes of verbatim comments from users in order to help easily understand the attitude and tone of users’ comment.","link":"/service-manual/users/user-research/sentiment-analysis.html"},{"title":"Survey design","indexable_content":"What to consider when creating a survey GDS Example Further reading Questions Common survey question types introduction – purpose of the survey, why it’s important that people take part. screener questions KPI questions – questions that benchmark performance follow up demographic questions – additional respondent information eg working/not working, salary, location etc Male Female Prefer not to answer Was visiting the site for more than one reason Information I was looking for was spread over more than one area of the site Couldn’t find what I was looking for in one area, so went into other areas Stumbled into other interesting areas of the site Just browsing other areas of the site Other (please specify) Strongly agree Agree Neither agree nor disagree Disagree Strongly disagree Don’t know The abundance of free survey tools makes it cheap and easy for user research teams to produce their own surveys. However, thought still needs to be given to the survey design, understanding the goal(s) of the survey , and how the results will be used. In order to increase the effectiveness of the survey, it is important to include an introduction that explains the purpose of the survey to potential respondents. Make it clear what the survey will be used for, and how it will help improve the service. As it’s unlikely that it will be possible to include monetary incentives, it’s important the introduction is worded in a manner that increases the likelihood that people will want to take part. It is also recommended that people are informed of how long the survey will take to complete as this will reduce drop out rate (people who start the survey but don’t finish). Screener questions should be placed at the beginning of surveys to ensure that the correct people take the survey eg demographic information, reason for visiting etc. Quotas may also be set so that you can control the number of people taking the survey that fall into a specific demographic group or audience type.  A typical user survey will be structured in the following manner: Surveys are normally composed of the following types of questions: Single response (these type of questions allow the respondent to select just one answer) eg: Q. What is your gender? Multiple choice questions (respondents can select more than one answer) eg: Q. Why did you visit more than one area of the site today (please tick all that apply)? Open ended questions (respondents can write a text response) Q. You rated ‘ease of using the site’ as fair or poor. Please tell us why you gave this rating? Scale questions (respondents are asked if they agree/disagree with a statement) Q. The site was easy to use Once you have decided on the questions that you want to be included, it is necessary to set up the question logic so that respondents are routed through the questionnaire correctly. It is recommended that all surveys are tested thoroughly to ensure the correct data data is collected. GOV.UK Survey (PDF, 213KB) University of Leeds - Guide to design of questionnaires","description":"The abundance of free survey tools makes it cheap and easy for user research teams to produce their own surveys. However, thought still needs to be given to the survey design, understanding the goal(s) of the survey , and how the results will be used.","link":"/service-manual/users/user-research/survey-design.html"},{"title":"User research briefs","indexable_content":"What it should contain Example See also A Research brief is a document written to explain research requirements and enable research to be procured via third party agencies. A research brief will outline the research objectives, and why the work is required.  Agencies respond to the brief and recommend suitable ways to conduct the work, and address the research objectives. A brief should contain the following information: Background – this should include a background of the organisation that wants to conduct the research, what relevant research has been conducted previously (or is being conducted), and the overall need for the piece of research that’s being procured. Business objectives - this should include an explanation of the business objectives that the research is addressing. This is essential as it explains why the research is required by the business. Research objectives - the research objectives should outline what the research is trying to achieve. Target Audience/Participants - this should identify who you want to talk to, and focus on the target audience for the product/service. It is also common to include key demographic information, and where, geographically, the research is to be conducted. Preferred Approach/Methodology - it is recommended that research agencies consider the objective of the research and recommend the most suitable methodology, however, it is common practice for in-house research teams to provide an idea of how they think the research could be conducted. Cost - this section should state the budget available for the research. It is suggested that research agencies should be asked to provide a range of price options, so that insight teams can choose the most appropriate approach for their needs. Deliverables - this should outline how the research is to be delivered eg presentation, workshop etc. Timings - this should specify when the research is to be delivered. Project team - this section should specify who is on the project team and their contact details. IDA research brief (PDF, 177KB) Working with specialist suppliers","description":"A Research brief is a document written to explain research requirements and enable research to be procured via third party agencies. A research brief will outline the research objectives, and why the work is required. ","link":"/service-manual/users/user-research/user-research-briefs.html"},{"title":"User research surveys","indexable_content":"How surveys work Weaknesses and when not to use Participants Online web surveys – self-completion surveys used to obtain information from web users. Surveys are activated when a user interacts with a page – this can either be through arriving/leaving a page, or clicking on a link. A piece of computer script is used to control the frequency at which users are invited to take part in a survey eg 1:n users will get invited to take a specific survey. In order to increase completion rates, online surveys are normally no longer than 5-10 mins in length (approximately 20 – 25 questions). Email survey – these are identical in set up and design to online web surveys, except participants are asked to complete them via an email, and not at random when they visit a website. Email surveys are often more targeted as participants can be identified by information already known about the them eg demographic, information usage etc. Face to face interviews – like telephone interviews, face to face interviews are structured and conducted by a trained moderator. Unlike other survey methods, respondents may be shown limited stimulus – eg advert, leaflet cover. website design etc. Face to face interviews also enable researchers to target respondents more easily by demographic, geographic and socio economic group. Telephone interviews – structured interviews that are conducted over the phone by a trained moderator. Telephone and face interviews are the most costly methodology and they are normally conducted via a third party agency. don’t allow much time or context for considered replies. leave room for questions to be misinterpreted have a completion bias – one common criticism is that they are only completed by people who are either very satisfied or very dissatisfied Surveys comprise of closed ended questions with fixed responses such as ‘yes’, ‘no’, ‘very satisfied’ to very dissatisfied’, ‘excellent’ to ‘poor’ etc, and open ended questions that allow respondents to provide verbatim responses. Surveys can be conducted either face to face by a trained moderator or through self-completion (online, postal etc.) in order to quantify thoughts/beliefs, behaviours, ownership etc. Surveys can be a relatively cheap and quick way of gathering and quantifying public opinion and monitoring change over time. Surveys can be used to size a market to find out how many people own a product, or take part in an activity eg how many people use the Internet in the UK. They can be also used to understand usage and attitudes towards a product or activity eg how often people use the Internet, how they access it, why the use it etc. Complex analysis can be also be conducted to understand key drivers of attitude/behaviour, segmentation of audiences, and trade offs between different opinions etc. Surveys provide a snapshot of opinion, and are a useful method for monitoring uptake, usage and attitudes over time. Online/email surveys are normally the cheapest method as these can be conducted in-house using inexpensive or free survey software, inviting people to take part from their own website, or using a database of email addresses.  Although surveys can be a quick and cheap manner in which to conduct user research, they often: All surveys, regardless of methodology should use a robust sample that is nationally representative or representative of an audience of interest. Most nationally representative surveys are 1,000 people or more, but can be significantly larger if there are a number of distinct user groups that are being targeted. It is important that the delivery channel used considers the target audience. For example in the recent Digital Landscape research an online and face-to-face methodology was used as online and offline audiences needed to be interviewed - an online only methodology would have excluded those who are offline, and the opinions on this audience omitted from the research It is also important to note that reaching hard-to-reach groups can be more time consuming and costly (eg BME, people with disabilities).","description":"Surveys comprise of closed ended questions with fixed responses such as ‘yes’, ‘no’, ‘very satisfied’ to very dissatisfied’, ‘excellent’ to ‘poor’ etc, and open ended questions that allow respondents to provide verbatim responses.","link":"/service-manual/users/user-research/user-research-surveys.html"},{"title":"User research tools","indexable_content":"Survey tools Remote user testing tools Card sorting tools Online focus groups Community groups Text analysis tool    Please note: Examples are illustrative, rather than recommendations, and we suggest checking G-Cloud regularly to see if any similiar services are available using that framework.  There are number of good tools that can help user research teams conduct in-house research quickly and effectively. Below is a high level overview of what these enable, for people unfamiliar with user testing. Online tools are a good way in which to conduct in-house research cheaply and effectively. Conducting research in-house enables user research teams get closer to the data, and have a good understanding of the user. This is, however, dependent on teams having adequate resource to enable analysis to be conducted properly and fed back to the relevant teams. Please note: Examples are illustrative, rather than recommendations, and we suggest checking G-Cloud regularly to see if any similiar services are available using that framework. These enable the easy creation of online surveys. Features include ascripting tool that allows easy creation of different question types, the ability to add branding, advanced branching, automated reporting, automatic activation/pop script, email links etc.  Some good tools are available free, however, these often have restrictions on the number of questions you can ask, the number of completes you can collect, and advance features such as API, and branding. Examples include Survey Monkey, Survey Expression, Smart Survey and Fluid Surveys. These tools enable user research teams to conduct remote usability testing in-house. These tools allow you to script the surveys easily, while also conduct the analysis to be conducted relatively simply and quickly.  Most of these tools also enable you to conduct standard online surveys within the same software package. Examples include Keynote Webeffective, and User Zoom. These tools enable user research teams to conduct online card sorting in-house. Card sorting tools usually come as part of a larger survey package. Examples include User Zoom and Optimal Workshop. Enable in-house research teams to conduct focus groups online. Most also enable you to run 1:1 sessions, auto ethnography, diary studies, and micro communities. Examples include LiveMinds and VisionsLive. Enables in-house research team to manage a community of users and/or stakeholders. These normally come part of a larger online research tools package. Examples include LiveMinds and Bloomfire. Enables the analysis of large amounts of written feedback - via email, helpdesk etc. This software enables you to sort user feedback into themes, and make it easier to action. Examples include Feedback Ferret and Atlas.","description":"There are number of good tools that can help user research teams conduct in-house research quickly and effectively. Below is a high level overview of what these enable, for people unfamiliar with user testing.","link":"/service-manual/users/user-research/user-research-tools.html"}]
